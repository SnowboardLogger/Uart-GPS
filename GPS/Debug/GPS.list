
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006d78  08006d78  00016d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071dc  080071dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080071dc  080071dc  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e4  080071e4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  080073c8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080073c8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca97  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eea  00000000  00000000  0002cca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d3b  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c743  00000000  00000000  00050c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c26ff  00000000  00000000  0005d3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  0011fb18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d60 	.word	0x08006d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006d60 	.word	0x08006d60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fb4c 	bl	800154e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f83d 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f8ed 	bl	8001098 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ebe:	f000 f88b 	bl	8000fd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f8b9 	bl	8001038 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //enable GGA (contains the precision data) and RMC (contains all the minimum navigation info)
  //data on the GPS
  char * inputBuffer = "PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <main+0x78>)
 8000ec8:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart2, (uint8_t *) inputBuffer, sizeof(inputBuffer), 100);
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	2204      	movs	r2, #4
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <main+0x7c>)
 8000ed2:	f002 f895 	bl	8003000 <HAL_UART_Transmit>

  char dataBuffer[5];
  const uint8_t MAXGPSBYTES = 50;
 8000ed6:	2332      	movs	r3, #50	; 0x32
 8000ed8:	71fb      	strb	r3, [r7, #7]
  {
	//The last parameter is the number of data elements to be received, this will need to be changed based on the max # bytes the GPS sends
	//The number of bytes can change based on whether the GPS has a fix or not so that's a problem
	//printf("test:2,23,32,4,23,4,423,43");

	HAL_UART_Receive(&huart2, (uint8_t *) dataBuffer, 5, 10000);
 8000eda:	4639      	mov	r1, r7
 8000edc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	4811      	ldr	r0, [pc, #68]	; (8000f28 <main+0x7c>)
 8000ee4:	f002 f920 	bl	8003128 <HAL_UART_Receive>
	//huart->RxISR(huart); might hold some data?
	if(*dataBuffer!=0){
 8000ee8:	783b      	ldrb	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <main+0x48>
		printf("received");
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <main+0x80>)
 8000ef0:	f003 fe12 	bl	8004b18 <iprintf>
	}
	printf("data:");
 8000ef4:	480e      	ldr	r0, [pc, #56]	; (8000f30 <main+0x84>)
 8000ef6:	f003 fe0f 	bl	8004b18 <iprintf>
	for(uint8_t i = 0; i < 4; ++i){
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e009      	b.n	8000f14 <main+0x68>
		//convert the dataBuffer from binary to a char
		printf("%c", *(dataBuffer+i));
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	463a      	mov	r2, r7
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fe1d 	bl	8004b48 <putchar>
	for(uint8_t i = 0; i < 4; ++i){
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d9f2      	bls.n	8000f00 <main+0x54>

	}
	printf("\n");
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f003 fe14 	bl	8004b48 <putchar>
	HAL_UART_Receive(&huart2, (uint8_t *) dataBuffer, 5, 10000);
 8000f20:	e7db      	b.n	8000eda <main+0x2e>
 8000f22:	bf00      	nop
 8000f24:	08006d78 	.word	0x08006d78
 8000f28:	2000027c 	.word	0x2000027c
 8000f2c:	08006da8 	.word	0x08006da8
 8000f30:	08006db4 	.word	0x08006db4

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	; 0x58
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2244      	movs	r2, #68	; 0x44
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f003 f976 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f5a:	f000 fe8d 	bl	8001c78 <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f64:	f000 f8f4 	bl	8001150 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f74:	2360      	movs	r3, #96	; 0x60
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f84:	2310      	movs	r3, #16
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fec3 	bl	8001d24 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fa4:	f000 f8d4 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2303      	movs	r3, #3
 8000fae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fac3 	bl	800254c <HAL_RCC_ClockConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fcc:	f000 f8c0 	bl	8001150 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3758      	adds	r7, #88	; 0x58
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_USART1_UART_Init+0x5c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000fe4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_USART1_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_USART1_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_USART1_UART_Init+0x58>)
 800101c:	f001 ffa2 	bl	8002f64 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f893 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001f8 	.word	0x200001f8
 8001034:	40013800 	.word	0x40013800

08001038 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_USART2_UART_Init+0x58>)
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <MX_USART2_UART_Init+0x5c>)
 8001040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_USART2_UART_Init+0x58>)
 8001044:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_USART2_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x58>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x58>)
 800107c:	f001 ff72 	bl	8002f64 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001086:	f000 f863 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000027c 	.word	0x2000027c
 8001094:	40004400 	.word	0x40004400

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_GPIO_Init+0x8c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	480b      	ldr	r0, [pc, #44]	; (8001128 <MX_GPIO_Init+0x90>)
 80010fc:	f000 fd96 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001100:	2308      	movs	r3, #8
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_GPIO_Init+0x90>)
 8001118:	f000 fc1e 	bl	8001958 <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <__io_putchar+0x20>)
 800113e:	f001 ff5f 	bl	8003000 <HAL_UART_Transmit>
  return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001f8 	.word	0x200001f8

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x44>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6613      	str	r3, [r2, #96]	; 0x60
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x44>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x44>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6593      	str	r3, [r2, #88]	; 0x58
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x44>)
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0a0      	sub	sp, #128	; 0x80
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	2254      	movs	r2, #84	; 0x54
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f003 f835 	bl	8004234 <memset>
  if(huart->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a42      	ldr	r2, [pc, #264]	; (80012d8 <HAL_UART_MspInit+0x134>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d138      	bne.n	8001246 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011d8:	2300      	movs	r3, #0
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fbd7 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011ec:	f7ff ffb0 	bl	8001150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_UART_MspInit+0x138>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	4a39      	ldr	r2, [pc, #228]	; (80012dc <HAL_UART_MspInit+0x138>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	6613      	str	r3, [r2, #96]	; 0x60
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <HAL_UART_MspInit+0x138>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_UART_MspInit+0x138>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a33      	ldr	r2, [pc, #204]	; (80012dc <HAL_UART_MspInit+0x138>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001220:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001224:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001232:	2307      	movs	r3, #7
 8001234:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001240:	f000 fb8a 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001244:	e043      	b.n	80012ce <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <HAL_UART_MspInit+0x13c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d13e      	bne.n	80012ce <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001254:	2300      	movs	r3, #0
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fb99 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001268:	f7ff ff72 	bl	8001150 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_UART_MspInit+0x138>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001276:	6593      	str	r3, [r2, #88]	; 0x58
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_UART_MspInit+0x138>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <HAL_UART_MspInit+0x138>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_UART_MspInit+0x138>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800129c:	230c      	movs	r3, #12
 800129e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ac:	2307      	movs	r3, #7
 80012ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f000 fb4d 	bl	8001958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2026      	movs	r0, #38	; 0x26
 80012c4:	f000 fa93 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012c8:	2026      	movs	r0, #38	; 0x26
 80012ca:	f000 faac 	bl	8001826 <HAL_NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3780      	adds	r7, #128	; 0x80
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40013800 	.word	0x40013800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40004400 	.word	0x40004400

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <NMI_Handler+0x4>

080012ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler+0x4>

080012f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <BusFault_Handler+0x4>

080012fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <UsageFault_Handler+0x4>

08001302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 f962 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <USART2_IRQHandler+0x10>)
 800133e:	f001 ffc5 	bl	80032cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000027c 	.word	0x2000027c

0800134c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return 1;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_kill>:

int _kill(int pid, int sig)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001366:	f002 ff3b 	bl	80041e0 <__errno>
 800136a:	4603      	mov	r3, r0
 800136c:	2216      	movs	r2, #22
 800136e:	601a      	str	r2, [r3, #0]
  return -1;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_exit>:

void _exit (int status)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffe7 	bl	800135c <_kill>
  while (1) {}    /* Make sure we hang here */
 800138e:	e7fe      	b.n	800138e <_exit+0x12>

08001390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
  }

  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fea1 	bl	800112c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
  }
  return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_close>:

int _close(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142a:	605a      	str	r2, [r3, #4]
  return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_isatty>:

int _isatty(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f002 fea0 	bl	80041e0 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20010000 	.word	0x20010000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	20000300 	.word	0x20000300
 80014d4:	20000318 	.word	0x20000318

080014d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001500:	f7ff ffea 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <LoopForever+0x6>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	; (800153c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <LoopForever+0xe>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	; (8001548 <LoopForever+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152a:	f002 fe5f 	bl	80041ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152e:	f7ff fcbd 	bl	8000eac <main>

08001532 <LoopForever>:

LoopForever:
    b LoopForever
 8001532:	e7fe      	b.n	8001532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001534:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001540:	080071ec 	.word	0x080071ec
  ldr r2, =_sbss
 8001544:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001548:	20000318 	.word	0x20000318

0800154c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_IRQHandler>

0800154e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f93d 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f80e 	bl	8001580 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e001      	b.n	8001574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001570:	f7ff fdf4 	bl	800115c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001574:	79fb      	ldrb	r3, [r7, #7]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_InitTick+0x6c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_InitTick+0x70>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_InitTick+0x6c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f949 	bl	8001842 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d809      	bhi.n	80015d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f913 	bl	80017ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_InitTick+0x74>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e004      	b.n	80015e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e001      	b.n	80015e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000304 	.word	0x20000304

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000304 	.word	0x20000304

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4907      	ldr	r1, [pc, #28]	; (80016d4 <__NVIC_EnableIRQ+0x38>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff29 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff3e 	bl	8001680 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e022      	b.n	80018ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020e 	bic.w	r2, r2, #14
 8001892:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f003 021c 	and.w	r2, r3, #28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d005      	beq.n	80018fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2204      	movs	r2, #4
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e029      	b.n	800194e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 020e 	bic.w	r2, r2, #14
 8001908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f003 021c 	and.w	r2, r3, #28
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	4798      	blx	r3
    }
  }
  return status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e148      	b.n	8001bfa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 813a 	beq.w	8001bf4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d017      	beq.n	8001a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8094 	beq.w	8001bf4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <HAL_GPIO_Init+0x2c0>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad0:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <HAL_GPIO_Init+0x2c0>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <HAL_GPIO_Init+0x2c0>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1d4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a43      	ldr	r2, [pc, #268]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1d0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a42      	ldr	r2, [pc, #264]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1cc>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3e:	4937      	ldr	r1, [pc, #220]	; (8001c1c <HAL_GPIO_Init+0x2c4>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b70:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f aeaf 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d130      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d038      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2232      	movs	r2, #50	; 0x32
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbc:	e002      	b.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d102      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f2      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce4:	d110      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e00f      	b.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d007      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f000 bc02 	b.w	800253c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d38:	4b96      	ldr	r3, [pc, #600]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d42:	4b94      	ldr	r3, [pc, #592]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80e4 	beq.w	8001f22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4c>
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	f040 808b 	bne.w	8001e7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	f040 8087 	bne.w	8001e7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d70:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x64>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e3d9      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d004      	beq.n	8001da2 <HAL_RCC_OscConfig+0x7e>
 8001d98:	4b7e      	ldr	r3, [pc, #504]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	e005      	b.n	8001dae <HAL_RCC_OscConfig+0x8a>
 8001da2:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d223      	bcs.n	8001dfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fd8c 	bl	80028d4 <RCC_SetFlashLatencyFromMSIRange>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e3ba      	b.n	800253c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc6:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	496d      	ldr	r1, [pc, #436]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de4:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	4968      	ldr	r1, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	e025      	b.n	8001e46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfa:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4960      	ldr	r1, [pc, #384]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e18:	4b5e      	ldr	r3, [pc, #376]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	495b      	ldr	r1, [pc, #364]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd4c 	bl	80028d4 <RCC_SetFlashLatencyFromMSIRange>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e37a      	b.n	800253c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e46:	f000 fc81 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	091b      	lsrs	r3, r3, #4
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	4950      	ldr	r1, [pc, #320]	; (8001f98 <HAL_RCC_OscConfig+0x274>)
 8001e58:	5ccb      	ldrb	r3, [r1, r3]
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_RCC_OscConfig+0x278>)
 8001e64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e66:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_OscConfig+0x27c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fb88 	bl	8001580 <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d052      	beq.n	8001f20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	e35e      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d032      	beq.n	8001eec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a42      	ldr	r2, [pc, #264]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e92:	f7ff fbc5 	bl	8001620 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fbc1 	bl	8001620 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e347      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4930      	ldr	r1, [pc, #192]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	492b      	ldr	r1, [pc, #172]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e01a      	b.n	8001f22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eec:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb92 	bl	8001620 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f00:	f7ff fb8e 	bl	8001620 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e314      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1dc>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d073      	beq.n	8002016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x21c>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d10e      	bne.n	8001f58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d063      	beq.n	8002014 <HAL_RCC_OscConfig+0x2f0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d15f      	bne.n	8002014 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e2f1      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x24c>
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e025      	b.n	8001fbc <HAL_RCC_OscConfig+0x298>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d114      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x280>
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a02      	ldr	r2, [pc, #8]	; (8001f94 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e013      	b.n	8001fbc <HAL_RCC_OscConfig+0x298>
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08006dbc 	.word	0x08006dbc
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	4ba0      	ldr	r3, [pc, #640]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a9f      	ldr	r2, [pc, #636]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b9d      	ldr	r3, [pc, #628]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a9c      	ldr	r2, [pc, #624]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fb2c 	bl	8001620 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fb28 	bl	8001620 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e2ae      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2a8>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff fb18 	bl	8001620 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fb14 	bl	8001620 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e29a      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d0>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d060      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d005      	beq.n	8002034 <HAL_RCC_OscConfig+0x310>
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d119      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d116      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	4b7c      	ldr	r3, [pc, #496]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x328>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e277      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	4973      	ldr	r1, [pc, #460]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	e040      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d023      	beq.n	80020b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fad3 	bl	8001620 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff facf 	bl	8001620 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e255      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	4b65      	ldr	r3, [pc, #404]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b62      	ldr	r3, [pc, #392]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	495f      	ldr	r1, [pc, #380]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e018      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5c      	ldr	r2, [pc, #368]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff faaf 	bl	8001620 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff faab 	bl	8001620 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e231      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03c      	beq.n	800216a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01c      	beq.n	8002132 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa8a 	bl	8001620 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fa86 	bl	8001620 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e20c      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002122:	4b41      	ldr	r3, [pc, #260]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCC_OscConfig+0x3ec>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fa6d 	bl	8001620 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fa69 	bl	8001620 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1ef      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80a6 	beq.w	80022c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b0:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fa30 	bl	8001620 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7ff fa2c 	bl	8001620 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1b2      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <HAL_RCC_OscConfig+0x508>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x4d8>
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fa:	e029      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d115      	bne.n	8002230 <HAL_RCC_OscConfig+0x50c>
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x52c>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	4b9a      	ldr	r3, [pc, #616]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a99      	ldr	r2, [pc, #612]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	4b96      	ldr	r3, [pc, #600]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a95      	ldr	r2, [pc, #596]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d016      	beq.n	8002286 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff f9e2 	bl	8001620 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff f9de 	bl	8001620 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e162      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002276:	4b89      	ldr	r3, [pc, #548]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ed      	beq.n	8002260 <HAL_RCC_OscConfig+0x53c>
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7ff f9cb 	bl	8001620 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7ff f9c7 	bl	8001620 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e14b      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a4:	4b7d      	ldr	r3, [pc, #500]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ed      	bne.n	800228e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b78      	ldr	r3, [pc, #480]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a77      	ldr	r2, [pc, #476]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d03c      	beq.n	800234a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01c      	beq.n	8002312 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022d8:	4b70      	ldr	r3, [pc, #448]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80022da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022de:	4a6f      	ldr	r2, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff f99a 	bl	8001620 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f0:	f7ff f996 	bl	8001620 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e11c      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ef      	beq.n	80022f0 <HAL_RCC_OscConfig+0x5cc>
 8002310:	e01b      	b.n	800234a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002312:	4b62      	ldr	r3, [pc, #392]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002318:	4a60      	ldr	r2, [pc, #384]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7ff f97d 	bl	8001620 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800232a:	f7ff f979 	bl	8001620 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0ff      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800233c:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800233e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ef      	bne.n	800232a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80f3 	beq.w	800253a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	2b02      	cmp	r3, #2
 800235a:	f040 80c9 	bne.w	80024f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800235e:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	429a      	cmp	r2, r3
 8002370:	d12c      	bne.n	80023cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	3b01      	subs	r3, #1
 800237e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d123      	bne.n	80023cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d11b      	bne.n	80023cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d113      	bne.n	80023cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
 80023b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d109      	bne.n	80023cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d06b      	beq.n	80024a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	d062      	beq.n	8002498 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0ac      	b.n	800253c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2d      	ldr	r2, [pc, #180]	; (800249c <HAL_RCC_OscConfig+0x778>)
 80023e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ee:	f7ff f917 	bl	8001620 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f6:	f7ff f913 	bl	8001620 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e099      	b.n	800253c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_RCC_OscConfig+0x77c>)
 800241a:	4013      	ands	r3, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002424:	3a01      	subs	r2, #1
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242e:	0212      	lsls	r2, r2, #8
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002436:	0852      	lsrs	r2, r2, #1
 8002438:	3a01      	subs	r2, #1
 800243a:	0552      	lsls	r2, r2, #21
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002442:	0852      	lsrs	r2, r2, #1
 8002444:	3a01      	subs	r2, #1
 8002446:	0652      	lsls	r2, r2, #25
 8002448:	4311      	orrs	r1, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800244e:	06d2      	lsls	r2, r2, #27
 8002450:	430a      	orrs	r2, r1
 8002452:	4912      	ldr	r1, [pc, #72]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_RCC_OscConfig+0x778>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002470:	f7ff f8d6 	bl	8001620 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f8d2 	bl	8001620 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e058      	b.n	800253c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_RCC_OscConfig+0x778>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002496:	e050      	b.n	800253a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e04f      	b.n	800253c <HAL_RCC_OscConfig+0x818>
 800249c:	40021000 	.word	0x40021000
 80024a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d144      	bne.n	800253a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c8:	f7ff f8aa 	bl	8001620 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff f8a6 	bl	8001620 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e02c      	b.n	800253c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x7ac>
 80024ee:	e024      	b.n	800253a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d01f      	beq.n	8002536 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 80024fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff f88d 	bl	8001620 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff f889 	bl	8001620 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e00f      	b.n	800253c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	4905      	ldr	r1, [pc, #20]	; (8002544 <HAL_RCC_OscConfig+0x820>)
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_OscConfig+0x824>)
 8002530:	4013      	ands	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
 8002534:	e001      	b.n	800253a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	feeefffc 	.word	0xfeeefffc

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0e7      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d910      	bls.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b72      	ldr	r3, [pc, #456]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4970      	ldr	r1, [pc, #448]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b6e      	ldr	r3, [pc, #440]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cf      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d010      	beq.n	80025be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d908      	bls.n	80025be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4960      	ldr	r1, [pc, #384]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d04c      	beq.n	8002664 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	4b5a      	ldr	r3, [pc, #360]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d121      	bne.n	8002622 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0a6      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e09a      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002602:	4b4e      	ldr	r3, [pc, #312]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e08e      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e086      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4943      	ldr	r1, [pc, #268]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7fe fff4 	bl	8001620 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fff0 	bl	8001620 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e06e      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	4b31      	ldr	r3, [pc, #196]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267c:	429a      	cmp	r2, r3
 800267e:	d208      	bcs.n	8002692 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	492b      	ldr	r1, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d210      	bcs.n	80026c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 0207 	bic.w	r2, r3, #7
 80026a8:	4923      	ldr	r1, [pc, #140]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_ClockConfig+0x1ec>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e036      	b.n	8002730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4910      	ldr	r1, [pc, #64]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002700:	f000 f824 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	490b      	ldr	r1, [pc, #44]	; (8002740 <HAL_RCC_ClockConfig+0x1f4>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1f8>)
 800271e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1fc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe ff2b 	bl	8001580 <HAL_InitTick>
 800272a:	4603      	mov	r3, r0
 800272c:	72fb      	strb	r3, [r7, #11]

  return status;
 800272e:	7afb      	ldrb	r3, [r7, #11]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40022000 	.word	0x40022000
 800273c:	40021000 	.word	0x40021000
 8002740:	08006dbc 	.word	0x08006dbc
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x34>
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d121      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d11e      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e005      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_RCC_GetSysClockFreq+0x110>)
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e004      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_RCC_GetSysClockFreq+0x114>)
 80027d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d134      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d003      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0xac>
 80027f0:	e005      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCC_GetSysClockFreq+0x110>)
 80027f4:	617b      	str	r3, [r7, #20]
      break;
 80027f6:	e005      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_GetSysClockFreq+0x114>)
 80027fa:	617b      	str	r3, [r7, #20]
      break;
 80027fc:	e002      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	617b      	str	r3, [r7, #20]
      break;
 8002802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	3301      	adds	r3, #1
 8002810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	fb03 f202 	mul.w	r2, r3, r2
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	0e5b      	lsrs	r3, r3, #25
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	3301      	adds	r3, #1
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002844:	69bb      	ldr	r3, [r7, #24]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	08006dd4 	.word	0x08006dd4
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08006dcc 	.word	0x08006dcc

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028ac:	f7ff ffda 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08006dcc 	.word	0x08006dcc

080028d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028ec:	f7ff f9b6 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 80028f0:	6178      	str	r0, [r7, #20]
 80028f2:	e014      	b.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800290c:	f7ff f9a6 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 8002910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d10b      	bne.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d919      	bls.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2ba0      	cmp	r3, #160	; 0xa0
 8002930:	d902      	bls.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002932:	2302      	movs	r3, #2
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e013      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002938:	2301      	movs	r3, #1
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e010      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d902      	bls.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002944:	2303      	movs	r3, #3
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e00a      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d102      	bne.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002950:	2302      	movs	r3, #2
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e004      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b70      	cmp	r3, #112	; 0x70
 800295a:	d101      	bne.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 0207 	bic.w	r2, r3, #7
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40022000 	.word	0x40022000

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800299c:	2300      	movs	r3, #0
 800299e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d031      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029b8:	d01a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80029ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029be:	d814      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d009      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029c8:	d10f      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029ca:	4b5d      	ldr	r3, [pc, #372]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4a5c      	ldr	r2, [pc, #368]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d6:	e00c      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f9ce 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e8:	e003      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	74fb      	strb	r3, [r7, #19]
      break;
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f8:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	494e      	ldr	r1, [pc, #312]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a0e:	e001      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 809e 	beq.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a26:	4b46      	ldr	r3, [pc, #280]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6593      	str	r3, [r2, #88]	; 0x58
 8002a48:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a54:	2301      	movs	r3, #1
 8002a56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a39      	ldr	r2, [pc, #228]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a64:	f7fe fddc 	bl	8001620 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a6a:	e009      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fdd8 	bl	8001620 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d902      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a7e:	e005      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a80:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ef      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d15a      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01e      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d019      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ada:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d016      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fd98 	bl	8001620 <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af2:	e00b      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe fd94 	bl	8001620 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d902      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	74fb      	strb	r3, [r7, #19]
            break;
 8002b0a:	e006      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0ec      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2e:	4904      	ldr	r1, [pc, #16]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b36:	e009      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
 8002b3c:	e006      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4c:	7c7b      	ldrb	r3, [r7, #17]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4b8a      	ldr	r3, [pc, #552]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	4a89      	ldr	r2, [pc, #548]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6a:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f023 0203 	bic.w	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4980      	ldr	r1, [pc, #512]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b8c:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 020c 	bic.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	4978      	ldr	r1, [pc, #480]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bae:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	496f      	ldr	r1, [pc, #444]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	4967      	ldr	r1, [pc, #412]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	495e      	ldr	r1, [pc, #376]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	4956      	ldr	r1, [pc, #344]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c36:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d028      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c58:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4945      	ldr	r1, [pc, #276]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c82:	60d3      	str	r3, [r2, #12]
 8002c84:	e011      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f872 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	492d      	ldr	r1, [pc, #180]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4a28      	ldr	r2, [pc, #160]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce0:	60d3      	str	r3, [r2, #12]
 8002ce2:	e011      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f843 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01c      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d22:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f820 	bl	8002d80 <RCCEx_PLLSAI1_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	4904      	ldr	r1, [pc, #16]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d70:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8e:	4b74      	ldr	r3, [pc, #464]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d9a:	4b71      	ldr	r3, [pc, #452]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10d      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
       ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002db2:	4b6b      	ldr	r3, [pc, #428]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d047      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e044      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d018      	beq.n	8002e06 <RCCEx_PLLSAI1_Config+0x86>
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d825      	bhi.n	8002e24 <RCCEx_PLLSAI1_Config+0xa4>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d002      	beq.n	8002de2 <RCCEx_PLLSAI1_Config+0x62>
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d009      	beq.n	8002df4 <RCCEx_PLLSAI1_Config+0x74>
 8002de0:	e020      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002de2:	4b5f      	ldr	r3, [pc, #380]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11d      	bne.n	8002e2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df2:	e01a      	b.n	8002e2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df4:	4b5a      	ldr	r3, [pc, #360]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e04:	e013      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e06:	4b56      	ldr	r3, [pc, #344]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e12:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e22:	e006      	b.n	8002e32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e004      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	4943      	ldr	r1, [pc, #268]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d17c      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e5c:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a3f      	ldr	r2, [pc, #252]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e68:	f7fe fbda 	bl	8001620 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e6e:	e009      	b.n	8002e84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e70:	f7fe fbd6 	bl	8001620 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	73fb      	strb	r3, [r7, #15]
        break;
 8002e82:	e005      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ef      	bne.n	8002e70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d15f      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d110      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9c:	4b30      	ldr	r3, [pc, #192]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	0211      	lsls	r1, r2, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68d2      	ldr	r2, [r2, #12]
 8002eb2:	06d2      	lsls	r2, r2, #27
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	492a      	ldr	r1, [pc, #168]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	610b      	str	r3, [r1, #16]
 8002ebc:	e027      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d112      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec4:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6912      	ldr	r2, [r2, #16]
 8002eda:	0852      	lsrs	r2, r2, #1
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0552      	lsls	r2, r2, #21
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	491f      	ldr	r1, [pc, #124]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	610b      	str	r3, [r1, #16]
 8002ee8:	e011      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6892      	ldr	r2, [r2, #8]
 8002efa:	0211      	lsls	r1, r2, #8
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6952      	ldr	r2, [r2, #20]
 8002f00:	0852      	lsrs	r2, r2, #1
 8002f02:	3a01      	subs	r2, #1
 8002f04:	0652      	lsls	r2, r2, #25
 8002f06:	430a      	orrs	r2, r1
 8002f08:	4915      	ldr	r1, [pc, #84]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f0e:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fb81 	bl	8001620 <HAL_GetTick>
 8002f1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f20:	e009      	b.n	8002f36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f22:	f7fe fb7d 	bl	8001620 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d902      	bls.n	8002f36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	73fb      	strb	r3, [r7, #15]
          break;
 8002f34:	e005      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ef      	beq.n	8002f22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e040      	b.n	8002ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe f90c 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fc94 	bl	80038d0 <UART_SetConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e022      	b.n	8002ff8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 feb4 	bl	8003d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 ff3b 	bl	8003e6c <UART_CheckIdleState>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 8082 	bne.w	800311e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_UART_Transmit+0x26>
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07a      	b.n	8003120 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_UART_Transmit+0x38>
 8003034:	2302      	movs	r3, #2
 8003036:	e073      	b.n	8003120 <HAL_UART_Transmit+0x120>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2221      	movs	r2, #33	; 0x21
 800304c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304e:	f7fe fae7 	bl	8001620 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d108      	bne.n	8003080 <HAL_UART_Transmit+0x80>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e003      	b.n	8003088 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003090:	e02d      	b.n	80030ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 ff2e 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e039      	b.n	8003120 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10b      	bne.n	80030ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030be:	b292      	uxth	r2, r2
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3302      	adds	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e008      	b.n	80030dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b292      	uxth	r2, r2
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3301      	adds	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1cb      	bne.n	8003092 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fefa 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e005      	b.n	8003120 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313c:	2b20      	cmp	r3, #32
 800313e:	f040 80bf 	bne.w	80032c0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_UART_Receive+0x26>
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0b7      	b.n	80032c2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_UART_Receive+0x38>
 800315c:	2302      	movs	r3, #2
 800315e:	e0b0      	b.n	80032c2 <HAL_UART_Receive+0x19a>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2222      	movs	r2, #34	; 0x22
 8003174:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317c:	f7fe fa50 	bl	8001620 <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319a:	d10e      	bne.n	80031ba <HAL_UART_Receive+0x92>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_UART_Receive+0x88>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ae:	e02d      	b.n	800320c <HAL_UART_Receive+0xe4>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	22ff      	movs	r2, #255	; 0xff
 80031b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031b8:	e028      	b.n	800320c <HAL_UART_Receive+0xe4>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_UART_Receive+0xb6>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <HAL_UART_Receive+0xac>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031d2:	e01b      	b.n	800320c <HAL_UART_Receive+0xe4>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	227f      	movs	r2, #127	; 0x7f
 80031d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031dc:	e016      	b.n	800320c <HAL_UART_Receive+0xe4>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031e6:	d10d      	bne.n	8003204 <HAL_UART_Receive+0xdc>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_UART_Receive+0xd2>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	227f      	movs	r2, #127	; 0x7f
 80031f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031f8:	e008      	b.n	800320c <HAL_UART_Receive+0xe4>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	223f      	movs	r2, #63	; 0x3f
 80031fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003202:	e003      	b.n	800320c <HAL_UART_Receive+0xe4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003212:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	d108      	bne.n	8003230 <HAL_UART_Receive+0x108>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e003      	b.n	8003238 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003240:	e033      	b.n	80032aa <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	2120      	movs	r1, #32
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fe56 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e032      	b.n	80032c2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003268:	b29a      	uxth	r2, r3
 800326a:	8a7b      	ldrh	r3, [r7, #18]
 800326c:	4013      	ands	r3, r2
 800326e:	b29a      	uxth	r2, r3
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	3302      	adds	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e00d      	b.n	8003298 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003282:	b29b      	uxth	r3, r3
 8003284:	b2da      	uxtb	r2, r3
 8003286:	8a7b      	ldrh	r3, [r7, #18]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4013      	ands	r3, r2
 800328c:	b2da      	uxtb	r2, r3
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1c5      	bne.n	8003242 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0ba      	sub	sp, #232	; 0xe8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80032fa:	4013      	ands	r3, r2
 80032fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d115      	bne.n	8003334 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 82a6 	beq.w	8003876 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
      }
      return;
 8003332:	e2a0      	b.n	8003876 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8117 	beq.w	800356c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800333e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800334a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800334e:	4b85      	ldr	r3, [pc, #532]	; (8003564 <HAL_UART_IRQHandler+0x298>)
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 810a 	beq.w	800356c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d011      	beq.n	8003388 <HAL_UART_IRQHandler+0xbc>
 8003364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2201      	movs	r2, #1
 8003376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d011      	beq.n	80033b8 <HAL_UART_IRQHandler+0xec>
 8003394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00b      	beq.n	80033b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2202      	movs	r2, #2
 80033a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d011      	beq.n	80033e8 <HAL_UART_IRQHandler+0x11c>
 80033c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00b      	beq.n	80033e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2204      	movs	r2, #4
 80033d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d017      	beq.n	8003424 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003404:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2208      	movs	r2, #8
 8003412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341a:	f043 0208 	orr.w	r2, r3, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342c:	2b00      	cmp	r3, #0
 800342e:	d012      	beq.n	8003456 <HAL_UART_IRQHandler+0x18a>
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00c      	beq.n	8003456 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 820c 	beq.w	800387a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800346e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d005      	beq.n	80034ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04f      	beq.n	800354e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fde9 	bl	8004086 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d141      	bne.n	8003546 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3308      	adds	r3, #8
 80034c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1d9      	bne.n	80034c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a13      	ldr	r2, [pc, #76]	; (8003568 <HAL_UART_IRQHandler+0x29c>)
 800351c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f9d7 	bl	80018d6 <HAL_DMA_Abort_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003538:	4610      	mov	r0, r2
 800353a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e00f      	b.n	800355e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9b0 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e00b      	b.n	800355e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9ac 	bl	80038a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e007      	b.n	800355e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f9a8 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800355c:	e18d      	b.n	800387a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355e:	bf00      	nop
    return;
 8003560:	e18b      	b.n	800387a <HAL_UART_IRQHandler+0x5ae>
 8003562:	bf00      	nop
 8003564:	04000120 	.word	0x04000120
 8003568:	0800414d 	.word	0x0800414d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003570:	2b01      	cmp	r3, #1
 8003572:	f040 8146 	bne.w	8003802 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 813f 	beq.w	8003802 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8138 	beq.w	8003802 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2210      	movs	r2, #16
 8003598:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	f040 80b4 	bne.w	8003712 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 815f 	beq.w	800387e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ca:	429a      	cmp	r2, r3
 80035cc:	f080 8157 	bcs.w	800387e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8085 	bne.w	80036f6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800361a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1da      	bne.n	80035ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3308      	adds	r3, #8
 8003656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800365a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800365e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800366c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e1      	bne.n	8003636 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3308      	adds	r3, #8
 8003692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800369c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e3      	bne.n	8003672 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e4      	bne.n	80036b6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe f8b2 	bl	800185a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003702:	b29b      	uxth	r3, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8d4 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003710:	e0b5      	b.n	800387e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800371e:	b29b      	uxth	r3, r3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80a7 	beq.w	8003882 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a2 	beq.w	8003882 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
 8003762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e4      	bne.n	800373e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	623b      	str	r3, [r7, #32]
   return(result);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003798:	633a      	str	r2, [r7, #48]	; 0x30
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0310 	bic.w	r3, r3, #16
 80037d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e4      	bne.n	80037be <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f85c 	bl	80038b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003800:	e03f      	b.n	8003882 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00e      	beq.n	800382c <HAL_UART_IRQHandler+0x560>
 800380e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003822:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fcd1 	bl	80041cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800382a:	e02d      	b.n	8003888 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800382c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
    }
    return;
 8003854:	e017      	b.n	8003886 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d012      	beq.n	8003888 <HAL_UART_IRQHandler+0x5bc>
 8003862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fc82 	bl	8004178 <UART_EndTransmit_IT>
    return;
 8003874:	e008      	b.n	8003888 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003876:	bf00      	nop
 8003878:	e006      	b.n	8003888 <HAL_UART_IRQHandler+0x5bc>
    return;
 800387a:	bf00      	nop
 800387c:	e004      	b.n	8003888 <HAL_UART_IRQHandler+0x5bc>
      return;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003886:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003888:	37e8      	adds	r7, #232	; 0xe8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop

08003890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d4:	b08a      	sub	sp, #40	; 0x28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4bb4      	ldr	r3, [pc, #720]	; (8003bd0 <UART_SetConfig+0x300>)
 8003900:	4013      	ands	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4aa9      	ldr	r2, [pc, #676]	; (8003bd4 <UART_SetConfig+0x304>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4313      	orrs	r3, r2
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4aa0      	ldr	r2, [pc, #640]	; (8003bd8 <UART_SetConfig+0x308>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d126      	bne.n	80039a8 <UART_SetConfig+0xd8>
 800395a:	4ba0      	ldr	r3, [pc, #640]	; (8003bdc <UART_SetConfig+0x30c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d81b      	bhi.n	80039a0 <UART_SetConfig+0xd0>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0xa0>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003981 	.word	0x08003981
 8003974:	08003991 	.word	0x08003991
 8003978:	08003989 	.word	0x08003989
 800397c:	08003999 	.word	0x08003999
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e080      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e07c      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e078      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e074      	b.n	8003a8a <UART_SetConfig+0x1ba>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e070      	b.n	8003a8a <UART_SetConfig+0x1ba>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a8c      	ldr	r2, [pc, #560]	; (8003be0 <UART_SetConfig+0x310>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d138      	bne.n	8003a24 <UART_SetConfig+0x154>
 80039b2:	4b8a      	ldr	r3, [pc, #552]	; (8003bdc <UART_SetConfig+0x30c>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d82d      	bhi.n	8003a1c <UART_SetConfig+0x14c>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0xf8>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003a1d 	.word	0x08003a1d
 80039d4:	08003a1d 	.word	0x08003a1d
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a1d 	.word	0x08003a1d
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a1d 	.word	0x08003a1d
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	08003a1d 	.word	0x08003a1d
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e042      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e03e      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e03a      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e036      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e032      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a6a      	ldr	r2, [pc, #424]	; (8003bd4 <UART_SetConfig+0x304>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d12a      	bne.n	8003a84 <UART_SetConfig+0x1b4>
 8003a2e:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <UART_SetConfig+0x30c>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3c:	d01a      	beq.n	8003a74 <UART_SetConfig+0x1a4>
 8003a3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a42:	d81b      	bhi.n	8003a7c <UART_SetConfig+0x1ac>
 8003a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a48:	d00c      	beq.n	8003a64 <UART_SetConfig+0x194>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d815      	bhi.n	8003a7c <UART_SetConfig+0x1ac>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <UART_SetConfig+0x18c>
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	d008      	beq.n	8003a6c <UART_SetConfig+0x19c>
 8003a5a:	e00f      	b.n	8003a7c <UART_SetConfig+0x1ac>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e012      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a64:	2302      	movs	r3, #2
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e00e      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e00a      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a74:	2308      	movs	r3, #8
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e006      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e002      	b.n	8003a8a <UART_SetConfig+0x1ba>
 8003a84:	2310      	movs	r3, #16
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a51      	ldr	r2, [pc, #324]	; (8003bd4 <UART_SetConfig+0x304>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d17a      	bne.n	8003b8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d824      	bhi.n	8003ae6 <UART_SetConfig+0x216>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x1d4>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ac9 	.word	0x08003ac9
 8003aa8:	08003ae7 	.word	0x08003ae7
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ae7 	.word	0x08003ae7
 8003ab4:	08003ad7 	.word	0x08003ad7
 8003ab8:	08003ae7 	.word	0x08003ae7
 8003abc:	08003ae7 	.word	0x08003ae7
 8003ac0:	08003ae7 	.word	0x08003ae7
 8003ac4:	08003adf 	.word	0x08003adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7fe fed8 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003acc:	61f8      	str	r0, [r7, #28]
        break;
 8003ace:	e010      	b.n	8003af2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad0:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <UART_SetConfig+0x314>)
 8003ad2:	61fb      	str	r3, [r7, #28]
        break;
 8003ad4:	e00d      	b.n	8003af2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7fe fe39 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8003ada:	61f8      	str	r0, [r7, #28]
        break;
 8003adc:	e009      	b.n	8003af2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae2:	61fb      	str	r3, [r7, #28]
        break;
 8003ae4:	e005      	b.n	8003af2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8107 	beq.w	8003d08 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d305      	bcc.n	8003b16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d903      	bls.n	8003b1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b1c:	e0f4      	b.n	8003d08 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2200      	movs	r2, #0
 8003b22:	461c      	mov	r4, r3
 8003b24:	4615      	mov	r5, r2
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	022b      	lsls	r3, r5, #8
 8003b30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b34:	0222      	lsls	r2, r4, #8
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	6849      	ldr	r1, [r1, #4]
 8003b3a:	0849      	lsrs	r1, r1, #1
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	4688      	mov	r8, r1
 8003b40:	4681      	mov	r9, r0
 8003b42:	eb12 0a08 	adds.w	sl, r2, r8
 8003b46:	eb43 0b09 	adc.w	fp, r3, r9
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b58:	4650      	mov	r0, sl
 8003b5a:	4659      	mov	r1, fp
 8003b5c:	f7fd f824 	bl	8000ba8 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6e:	d308      	bcc.n	8003b82 <UART_SetConfig+0x2b2>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b76:	d204      	bcs.n	8003b82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e0c2      	b.n	8003d08 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b88:	e0be      	b.n	8003d08 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d16a      	bne.n	8003c6a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d834      	bhi.n	8003c06 <UART_SetConfig+0x336>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x2d4>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bf1 	.word	0x08003bf1
 8003bb0:	08003c07 	.word	0x08003c07
 8003bb4:	08003bf7 	.word	0x08003bf7
 8003bb8:	08003c07 	.word	0x08003c07
 8003bbc:	08003c07 	.word	0x08003c07
 8003bc0:	08003c07 	.word	0x08003c07
 8003bc4:	08003bff 	.word	0x08003bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe fe58 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61f8      	str	r0, [r7, #28]
        break;
 8003bce:	e020      	b.n	8003c12 <UART_SetConfig+0x342>
 8003bd0:	efff69f3 	.word	0xefff69f3
 8003bd4:	40008000 	.word	0x40008000
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40004400 	.word	0x40004400
 8003be4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7fe fe5e 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003bec:	61f8      	str	r0, [r7, #28]
        break;
 8003bee:	e010      	b.n	8003c12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <UART_SetConfig+0x454>)
 8003bf2:	61fb      	str	r3, [r7, #28]
        break;
 8003bf4:	e00d      	b.n	8003c12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf6:	f7fe fda9 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8003bfa:	61f8      	str	r0, [r7, #28]
        break;
 8003bfc:	e009      	b.n	8003c12 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c02:	61fb      	str	r3, [r7, #28]
        break;
 8003c04:	e005      	b.n	8003c12 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d077      	beq.n	8003d08 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005a      	lsls	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	441a      	add	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d916      	bls.n	8003c62 <UART_SetConfig+0x392>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3a:	d212      	bcs.n	8003c62 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f023 030f 	bic.w	r3, r3, #15
 8003c44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	8afa      	ldrh	r2, [r7, #22]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e052      	b.n	8003d08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c68:	e04e      	b.n	8003d08 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d827      	bhi.n	8003cc2 <UART_SetConfig+0x3f2>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x3a8>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cc3 	.word	0x08003cc3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe fdee 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61f8      	str	r0, [r7, #28]
        break;
 8003ca2:	e014      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe fe00 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	61f8      	str	r0, [r7, #28]
        break;
 8003caa:	e010      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <UART_SetConfig+0x454>)
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e00d      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe fd4b 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8003cb6:	61f8      	str	r0, [r7, #28]
        break;
 8003cb8:	e009      	b.n	8003cce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	61fb      	str	r3, [r7, #28]
        break;
 8003cc0:	e005      	b.n	8003cce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d019      	beq.n	8003d08 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	085a      	lsrs	r2, r3, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	441a      	add	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d909      	bls.n	8003d02 <UART_SetConfig+0x432>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf4:	d205      	bcs.n	8003d02 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	e002      	b.n	8003d08 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	00f42400 	.word	0x00f42400

08003d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01a      	beq.n	8003e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d10a      	bne.n	8003e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	605a      	str	r2, [r3, #4]
  }
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e7c:	f7fd fbd0 	bl	8001620 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10e      	bne.n	8003eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f82d 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e023      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d10e      	bne.n	8003eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f817 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e00d      	b.n	8003ef6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b09c      	sub	sp, #112	; 0x70
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	e0a5      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	f000 80a1 	beq.w	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd fb81 	bl	8001620 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d13e      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f44:	667b      	str	r3, [r7, #100]	; 0x64
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e6      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e067      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d04f      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fca:	d147      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e6      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3308      	adds	r3, #8
 800400e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004028:	623a      	str	r2, [r7, #32]
 800402a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	61bb      	str	r3, [r7, #24]
   return(result);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e5      	bne.n	8004008 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e010      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	f43f af4a 	beq.w	8003f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3770      	adds	r7, #112	; 0x70
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004086:	b480      	push	{r7}
 8004088:	b095      	sub	sp, #84	; 0x54
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
 80040ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e6      	bne.n	800408e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d118      	bne.n	800412e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	60bb      	str	r3, [r7, #8]
   return(result);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 0310 	bic.w	r3, r3, #16
 8004110:	647b      	str	r3, [r7, #68]	; 0x44
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6979      	ldr	r1, [r7, #20]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	613b      	str	r3, [r7, #16]
   return(result);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004140:	bf00      	nop
 8004142:	3754      	adds	r7, #84	; 0x54
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fb9a 	bl	80038a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	60bb      	str	r3, [r7, #8]
   return(result);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	613b      	str	r3, [r7, #16]
   return(result);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fb66 	bl	8003890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c4:	bf00      	nop
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <__errno>:
 80041e0:	4b01      	ldr	r3, [pc, #4]	; (80041e8 <__errno+0x8>)
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4d0d      	ldr	r5, [pc, #52]	; (8004224 <__libc_init_array+0x38>)
 80041f0:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <__libc_init_array+0x3c>)
 80041f2:	1b64      	subs	r4, r4, r5
 80041f4:	10a4      	asrs	r4, r4, #2
 80041f6:	2600      	movs	r6, #0
 80041f8:	42a6      	cmp	r6, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	4d0b      	ldr	r5, [pc, #44]	; (800422c <__libc_init_array+0x40>)
 80041fe:	4c0c      	ldr	r4, [pc, #48]	; (8004230 <__libc_init_array+0x44>)
 8004200:	f002 fdae 	bl	8006d60 <_init>
 8004204:	1b64      	subs	r4, r4, r5
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	2600      	movs	r6, #0
 800420a:	42a6      	cmp	r6, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f855 3b04 	ldr.w	r3, [r5], #4
 8004214:	4798      	blx	r3
 8004216:	3601      	adds	r6, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f855 3b04 	ldr.w	r3, [r5], #4
 800421e:	4798      	blx	r3
 8004220:	3601      	adds	r6, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	080071e4 	.word	0x080071e4
 8004228:	080071e4 	.word	0x080071e4
 800422c:	080071e4 	.word	0x080071e4
 8004230:	080071e8 	.word	0x080071e8

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <__cvt>:
 8004244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	ec55 4b10 	vmov	r4, r5, d0
 800424c:	2d00      	cmp	r5, #0
 800424e:	460e      	mov	r6, r1
 8004250:	4619      	mov	r1, r3
 8004252:	462b      	mov	r3, r5
 8004254:	bfbb      	ittet	lt
 8004256:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800425a:	461d      	movlt	r5, r3
 800425c:	2300      	movge	r3, #0
 800425e:	232d      	movlt	r3, #45	; 0x2d
 8004260:	700b      	strb	r3, [r1, #0]
 8004262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004268:	4691      	mov	r9, r2
 800426a:	f023 0820 	bic.w	r8, r3, #32
 800426e:	bfbc      	itt	lt
 8004270:	4622      	movlt	r2, r4
 8004272:	4614      	movlt	r4, r2
 8004274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004278:	d005      	beq.n	8004286 <__cvt+0x42>
 800427a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800427e:	d100      	bne.n	8004282 <__cvt+0x3e>
 8004280:	3601      	adds	r6, #1
 8004282:	2102      	movs	r1, #2
 8004284:	e000      	b.n	8004288 <__cvt+0x44>
 8004286:	2103      	movs	r1, #3
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	ab02      	add	r3, sp, #8
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	ec45 4b10 	vmov	d0, r4, r5
 8004294:	4653      	mov	r3, sl
 8004296:	4632      	mov	r2, r6
 8004298:	f000 fcfa 	bl	8004c90 <_dtoa_r>
 800429c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042a0:	4607      	mov	r7, r0
 80042a2:	d102      	bne.n	80042aa <__cvt+0x66>
 80042a4:	f019 0f01 	tst.w	r9, #1
 80042a8:	d022      	beq.n	80042f0 <__cvt+0xac>
 80042aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042ae:	eb07 0906 	add.w	r9, r7, r6
 80042b2:	d110      	bne.n	80042d6 <__cvt+0x92>
 80042b4:	783b      	ldrb	r3, [r7, #0]
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d10a      	bne.n	80042d0 <__cvt+0x8c>
 80042ba:	2200      	movs	r2, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	4620      	mov	r0, r4
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7fc fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80042c6:	b918      	cbnz	r0, 80042d0 <__cvt+0x8c>
 80042c8:	f1c6 0601 	rsb	r6, r6, #1
 80042cc:	f8ca 6000 	str.w	r6, [sl]
 80042d0:	f8da 3000 	ldr.w	r3, [sl]
 80042d4:	4499      	add	r9, r3
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4620      	mov	r0, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	f7fc fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80042e2:	b108      	cbz	r0, 80042e8 <__cvt+0xa4>
 80042e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80042e8:	2230      	movs	r2, #48	; 0x30
 80042ea:	9b03      	ldr	r3, [sp, #12]
 80042ec:	454b      	cmp	r3, r9
 80042ee:	d307      	bcc.n	8004300 <__cvt+0xbc>
 80042f0:	9b03      	ldr	r3, [sp, #12]
 80042f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042f4:	1bdb      	subs	r3, r3, r7
 80042f6:	4638      	mov	r0, r7
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	b004      	add	sp, #16
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	1c59      	adds	r1, r3, #1
 8004302:	9103      	str	r1, [sp, #12]
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e7f0      	b.n	80042ea <__cvt+0xa6>

08004308 <__exponent>:
 8004308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430a:	4603      	mov	r3, r0
 800430c:	2900      	cmp	r1, #0
 800430e:	bfb8      	it	lt
 8004310:	4249      	neglt	r1, r1
 8004312:	f803 2b02 	strb.w	r2, [r3], #2
 8004316:	bfb4      	ite	lt
 8004318:	222d      	movlt	r2, #45	; 0x2d
 800431a:	222b      	movge	r2, #43	; 0x2b
 800431c:	2909      	cmp	r1, #9
 800431e:	7042      	strb	r2, [r0, #1]
 8004320:	dd2a      	ble.n	8004378 <__exponent+0x70>
 8004322:	f10d 0407 	add.w	r4, sp, #7
 8004326:	46a4      	mov	ip, r4
 8004328:	270a      	movs	r7, #10
 800432a:	46a6      	mov	lr, r4
 800432c:	460a      	mov	r2, r1
 800432e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004332:	fb07 1516 	mls	r5, r7, r6, r1
 8004336:	3530      	adds	r5, #48	; 0x30
 8004338:	2a63      	cmp	r2, #99	; 0x63
 800433a:	f104 34ff 	add.w	r4, r4, #4294967295
 800433e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004342:	4631      	mov	r1, r6
 8004344:	dcf1      	bgt.n	800432a <__exponent+0x22>
 8004346:	3130      	adds	r1, #48	; 0x30
 8004348:	f1ae 0502 	sub.w	r5, lr, #2
 800434c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004350:	1c44      	adds	r4, r0, #1
 8004352:	4629      	mov	r1, r5
 8004354:	4561      	cmp	r1, ip
 8004356:	d30a      	bcc.n	800436e <__exponent+0x66>
 8004358:	f10d 0209 	add.w	r2, sp, #9
 800435c:	eba2 020e 	sub.w	r2, r2, lr
 8004360:	4565      	cmp	r5, ip
 8004362:	bf88      	it	hi
 8004364:	2200      	movhi	r2, #0
 8004366:	4413      	add	r3, r2
 8004368:	1a18      	subs	r0, r3, r0
 800436a:	b003      	add	sp, #12
 800436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004372:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004376:	e7ed      	b.n	8004354 <__exponent+0x4c>
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	3130      	adds	r1, #48	; 0x30
 800437c:	7083      	strb	r3, [r0, #2]
 800437e:	70c1      	strb	r1, [r0, #3]
 8004380:	1d03      	adds	r3, r0, #4
 8004382:	e7f1      	b.n	8004368 <__exponent+0x60>

08004384 <_printf_float>:
 8004384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	ed2d 8b02 	vpush	{d8}
 800438c:	b08d      	sub	sp, #52	; 0x34
 800438e:	460c      	mov	r4, r1
 8004390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004394:	4616      	mov	r6, r2
 8004396:	461f      	mov	r7, r3
 8004398:	4605      	mov	r5, r0
 800439a:	f001 fb5d 	bl	8005a58 <_localeconv_r>
 800439e:	f8d0 a000 	ldr.w	sl, [r0]
 80043a2:	4650      	mov	r0, sl
 80043a4:	f7fb ff14 	bl	80001d0 <strlen>
 80043a8:	2300      	movs	r3, #0
 80043aa:	930a      	str	r3, [sp, #40]	; 0x28
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	9305      	str	r3, [sp, #20]
 80043b0:	f8d8 3000 	ldr.w	r3, [r8]
 80043b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043b8:	3307      	adds	r3, #7
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	f103 0208 	add.w	r2, r3, #8
 80043c2:	f8c8 2000 	str.w	r2, [r8]
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043d6:	9307      	str	r3, [sp, #28]
 80043d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043dc:	ee08 0a10 	vmov	s16, r0
 80043e0:	4b9f      	ldr	r3, [pc, #636]	; (8004660 <_printf_float+0x2dc>)
 80043e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043e6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ea:	f7fc fb9f 	bl	8000b2c <__aeabi_dcmpun>
 80043ee:	bb88      	cbnz	r0, 8004454 <_printf_float+0xd0>
 80043f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f4:	4b9a      	ldr	r3, [pc, #616]	; (8004660 <_printf_float+0x2dc>)
 80043f6:	f04f 32ff 	mov.w	r2, #4294967295
 80043fa:	f7fc fb79 	bl	8000af0 <__aeabi_dcmple>
 80043fe:	bb48      	cbnz	r0, 8004454 <_printf_float+0xd0>
 8004400:	2200      	movs	r2, #0
 8004402:	2300      	movs	r3, #0
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	f7fc fb68 	bl	8000adc <__aeabi_dcmplt>
 800440c:	b110      	cbz	r0, 8004414 <_printf_float+0x90>
 800440e:	232d      	movs	r3, #45	; 0x2d
 8004410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004414:	4b93      	ldr	r3, [pc, #588]	; (8004664 <_printf_float+0x2e0>)
 8004416:	4894      	ldr	r0, [pc, #592]	; (8004668 <_printf_float+0x2e4>)
 8004418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800441c:	bf94      	ite	ls
 800441e:	4698      	movls	r8, r3
 8004420:	4680      	movhi	r8, r0
 8004422:	2303      	movs	r3, #3
 8004424:	6123      	str	r3, [r4, #16]
 8004426:	9b05      	ldr	r3, [sp, #20]
 8004428:	f023 0204 	bic.w	r2, r3, #4
 800442c:	6022      	str	r2, [r4, #0]
 800442e:	f04f 0900 	mov.w	r9, #0
 8004432:	9700      	str	r7, [sp, #0]
 8004434:	4633      	mov	r3, r6
 8004436:	aa0b      	add	r2, sp, #44	; 0x2c
 8004438:	4621      	mov	r1, r4
 800443a:	4628      	mov	r0, r5
 800443c:	f000 f9d8 	bl	80047f0 <_printf_common>
 8004440:	3001      	adds	r0, #1
 8004442:	f040 8090 	bne.w	8004566 <_printf_float+0x1e2>
 8004446:	f04f 30ff 	mov.w	r0, #4294967295
 800444a:	b00d      	add	sp, #52	; 0x34
 800444c:	ecbd 8b02 	vpop	{d8}
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	4642      	mov	r2, r8
 8004456:	464b      	mov	r3, r9
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc fb66 	bl	8000b2c <__aeabi_dcmpun>
 8004460:	b140      	cbz	r0, 8004474 <_printf_float+0xf0>
 8004462:	464b      	mov	r3, r9
 8004464:	2b00      	cmp	r3, #0
 8004466:	bfbc      	itt	lt
 8004468:	232d      	movlt	r3, #45	; 0x2d
 800446a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800446e:	487f      	ldr	r0, [pc, #508]	; (800466c <_printf_float+0x2e8>)
 8004470:	4b7f      	ldr	r3, [pc, #508]	; (8004670 <_printf_float+0x2ec>)
 8004472:	e7d1      	b.n	8004418 <_printf_float+0x94>
 8004474:	6863      	ldr	r3, [r4, #4]
 8004476:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800447a:	9206      	str	r2, [sp, #24]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	d13f      	bne.n	8004500 <_printf_float+0x17c>
 8004480:	2306      	movs	r3, #6
 8004482:	6063      	str	r3, [r4, #4]
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	6861      	ldr	r1, [r4, #4]
 8004488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800448c:	2300      	movs	r3, #0
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	ab0a      	add	r3, sp, #40	; 0x28
 8004492:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004496:	ab09      	add	r3, sp, #36	; 0x24
 8004498:	ec49 8b10 	vmov	d0, r8, r9
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6022      	str	r2, [r4, #0]
 80044a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7ff fecd 	bl	8004244 <__cvt>
 80044aa:	9b06      	ldr	r3, [sp, #24]
 80044ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044ae:	2b47      	cmp	r3, #71	; 0x47
 80044b0:	4680      	mov	r8, r0
 80044b2:	d108      	bne.n	80044c6 <_printf_float+0x142>
 80044b4:	1cc8      	adds	r0, r1, #3
 80044b6:	db02      	blt.n	80044be <_printf_float+0x13a>
 80044b8:	6863      	ldr	r3, [r4, #4]
 80044ba:	4299      	cmp	r1, r3
 80044bc:	dd41      	ble.n	8004542 <_printf_float+0x1be>
 80044be:	f1ab 0b02 	sub.w	fp, fp, #2
 80044c2:	fa5f fb8b 	uxtb.w	fp, fp
 80044c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044ca:	d820      	bhi.n	800450e <_printf_float+0x18a>
 80044cc:	3901      	subs	r1, #1
 80044ce:	465a      	mov	r2, fp
 80044d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044d4:	9109      	str	r1, [sp, #36]	; 0x24
 80044d6:	f7ff ff17 	bl	8004308 <__exponent>
 80044da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044dc:	1813      	adds	r3, r2, r0
 80044de:	2a01      	cmp	r2, #1
 80044e0:	4681      	mov	r9, r0
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	dc02      	bgt.n	80044ec <_printf_float+0x168>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	07d2      	lsls	r2, r2, #31
 80044ea:	d501      	bpl.n	80044f0 <_printf_float+0x16c>
 80044ec:	3301      	adds	r3, #1
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d09c      	beq.n	8004432 <_printf_float+0xae>
 80044f8:	232d      	movs	r3, #45	; 0x2d
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fe:	e798      	b.n	8004432 <_printf_float+0xae>
 8004500:	9a06      	ldr	r2, [sp, #24]
 8004502:	2a47      	cmp	r2, #71	; 0x47
 8004504:	d1be      	bne.n	8004484 <_printf_float+0x100>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1bc      	bne.n	8004484 <_printf_float+0x100>
 800450a:	2301      	movs	r3, #1
 800450c:	e7b9      	b.n	8004482 <_printf_float+0xfe>
 800450e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004512:	d118      	bne.n	8004546 <_printf_float+0x1c2>
 8004514:	2900      	cmp	r1, #0
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	dd0b      	ble.n	8004532 <_printf_float+0x1ae>
 800451a:	6121      	str	r1, [r4, #16]
 800451c:	b913      	cbnz	r3, 8004524 <_printf_float+0x1a0>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	07d0      	lsls	r0, r2, #31
 8004522:	d502      	bpl.n	800452a <_printf_float+0x1a6>
 8004524:	3301      	adds	r3, #1
 8004526:	440b      	add	r3, r1
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	65a1      	str	r1, [r4, #88]	; 0x58
 800452c:	f04f 0900 	mov.w	r9, #0
 8004530:	e7de      	b.n	80044f0 <_printf_float+0x16c>
 8004532:	b913      	cbnz	r3, 800453a <_printf_float+0x1b6>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	07d2      	lsls	r2, r2, #31
 8004538:	d501      	bpl.n	800453e <_printf_float+0x1ba>
 800453a:	3302      	adds	r3, #2
 800453c:	e7f4      	b.n	8004528 <_printf_float+0x1a4>
 800453e:	2301      	movs	r3, #1
 8004540:	e7f2      	b.n	8004528 <_printf_float+0x1a4>
 8004542:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004548:	4299      	cmp	r1, r3
 800454a:	db05      	blt.n	8004558 <_printf_float+0x1d4>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	6121      	str	r1, [r4, #16]
 8004550:	07d8      	lsls	r0, r3, #31
 8004552:	d5ea      	bpl.n	800452a <_printf_float+0x1a6>
 8004554:	1c4b      	adds	r3, r1, #1
 8004556:	e7e7      	b.n	8004528 <_printf_float+0x1a4>
 8004558:	2900      	cmp	r1, #0
 800455a:	bfd4      	ite	le
 800455c:	f1c1 0202 	rsble	r2, r1, #2
 8004560:	2201      	movgt	r2, #1
 8004562:	4413      	add	r3, r2
 8004564:	e7e0      	b.n	8004528 <_printf_float+0x1a4>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	055a      	lsls	r2, r3, #21
 800456a:	d407      	bmi.n	800457c <_printf_float+0x1f8>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	4642      	mov	r2, r8
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	d12c      	bne.n	80045d4 <_printf_float+0x250>
 800457a:	e764      	b.n	8004446 <_printf_float+0xc2>
 800457c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004580:	f240 80e0 	bls.w	8004744 <_printf_float+0x3c0>
 8004584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	f7fc fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004590:	2800      	cmp	r0, #0
 8004592:	d034      	beq.n	80045fe <_printf_float+0x27a>
 8004594:	4a37      	ldr	r2, [pc, #220]	; (8004674 <_printf_float+0x2f0>)
 8004596:	2301      	movs	r3, #1
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	f43f af51 	beq.w	8004446 <_printf_float+0xc2>
 80045a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045a8:	429a      	cmp	r2, r3
 80045aa:	db02      	blt.n	80045b2 <_printf_float+0x22e>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	07d8      	lsls	r0, r3, #31
 80045b0:	d510      	bpl.n	80045d4 <_printf_float+0x250>
 80045b2:	ee18 3a10 	vmov	r3, s16
 80045b6:	4652      	mov	r2, sl
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f af41 	beq.w	8004446 <_printf_float+0xc2>
 80045c4:	f04f 0800 	mov.w	r8, #0
 80045c8:	f104 091a 	add.w	r9, r4, #26
 80045cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4543      	cmp	r3, r8
 80045d2:	dc09      	bgt.n	80045e8 <_printf_float+0x264>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	079b      	lsls	r3, r3, #30
 80045d8:	f100 8105 	bmi.w	80047e6 <_printf_float+0x462>
 80045dc:	68e0      	ldr	r0, [r4, #12]
 80045de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045e0:	4298      	cmp	r0, r3
 80045e2:	bfb8      	it	lt
 80045e4:	4618      	movlt	r0, r3
 80045e6:	e730      	b.n	800444a <_printf_float+0xc6>
 80045e8:	2301      	movs	r3, #1
 80045ea:	464a      	mov	r2, r9
 80045ec:	4631      	mov	r1, r6
 80045ee:	4628      	mov	r0, r5
 80045f0:	47b8      	blx	r7
 80045f2:	3001      	adds	r0, #1
 80045f4:	f43f af27 	beq.w	8004446 <_printf_float+0xc2>
 80045f8:	f108 0801 	add.w	r8, r8, #1
 80045fc:	e7e6      	b.n	80045cc <_printf_float+0x248>
 80045fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	dc39      	bgt.n	8004678 <_printf_float+0x2f4>
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <_printf_float+0x2f0>)
 8004606:	2301      	movs	r3, #1
 8004608:	4631      	mov	r1, r6
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	f43f af19 	beq.w	8004446 <_printf_float+0xc2>
 8004614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004618:	4313      	orrs	r3, r2
 800461a:	d102      	bne.n	8004622 <_printf_float+0x29e>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	d5d8      	bpl.n	80045d4 <_printf_float+0x250>
 8004622:	ee18 3a10 	vmov	r3, s16
 8004626:	4652      	mov	r2, sl
 8004628:	4631      	mov	r1, r6
 800462a:	4628      	mov	r0, r5
 800462c:	47b8      	blx	r7
 800462e:	3001      	adds	r0, #1
 8004630:	f43f af09 	beq.w	8004446 <_printf_float+0xc2>
 8004634:	f04f 0900 	mov.w	r9, #0
 8004638:	f104 0a1a 	add.w	sl, r4, #26
 800463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463e:	425b      	negs	r3, r3
 8004640:	454b      	cmp	r3, r9
 8004642:	dc01      	bgt.n	8004648 <_printf_float+0x2c4>
 8004644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004646:	e792      	b.n	800456e <_printf_float+0x1ea>
 8004648:	2301      	movs	r3, #1
 800464a:	4652      	mov	r2, sl
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f aef7 	beq.w	8004446 <_printf_float+0xc2>
 8004658:	f109 0901 	add.w	r9, r9, #1
 800465c:	e7ee      	b.n	800463c <_printf_float+0x2b8>
 800465e:	bf00      	nop
 8004660:	7fefffff 	.word	0x7fefffff
 8004664:	08006e08 	.word	0x08006e08
 8004668:	08006e0c 	.word	0x08006e0c
 800466c:	08006e14 	.word	0x08006e14
 8004670:	08006e10 	.word	0x08006e10
 8004674:	08006e18 	.word	0x08006e18
 8004678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800467a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800467c:	429a      	cmp	r2, r3
 800467e:	bfa8      	it	ge
 8004680:	461a      	movge	r2, r3
 8004682:	2a00      	cmp	r2, #0
 8004684:	4691      	mov	r9, r2
 8004686:	dc37      	bgt.n	80046f8 <_printf_float+0x374>
 8004688:	f04f 0b00 	mov.w	fp, #0
 800468c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004690:	f104 021a 	add.w	r2, r4, #26
 8004694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004696:	9305      	str	r3, [sp, #20]
 8004698:	eba3 0309 	sub.w	r3, r3, r9
 800469c:	455b      	cmp	r3, fp
 800469e:	dc33      	bgt.n	8004708 <_printf_float+0x384>
 80046a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a4:	429a      	cmp	r2, r3
 80046a6:	db3b      	blt.n	8004720 <_printf_float+0x39c>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07da      	lsls	r2, r3, #31
 80046ac:	d438      	bmi.n	8004720 <_printf_float+0x39c>
 80046ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b0:	9a05      	ldr	r2, [sp, #20]
 80046b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046b4:	1a9a      	subs	r2, r3, r2
 80046b6:	eba3 0901 	sub.w	r9, r3, r1
 80046ba:	4591      	cmp	r9, r2
 80046bc:	bfa8      	it	ge
 80046be:	4691      	movge	r9, r2
 80046c0:	f1b9 0f00 	cmp.w	r9, #0
 80046c4:	dc35      	bgt.n	8004732 <_printf_float+0x3ae>
 80046c6:	f04f 0800 	mov.w	r8, #0
 80046ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046ce:	f104 0a1a 	add.w	sl, r4, #26
 80046d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	eba3 0309 	sub.w	r3, r3, r9
 80046dc:	4543      	cmp	r3, r8
 80046de:	f77f af79 	ble.w	80045d4 <_printf_float+0x250>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4652      	mov	r2, sl
 80046e6:	4631      	mov	r1, r6
 80046e8:	4628      	mov	r0, r5
 80046ea:	47b8      	blx	r7
 80046ec:	3001      	adds	r0, #1
 80046ee:	f43f aeaa 	beq.w	8004446 <_printf_float+0xc2>
 80046f2:	f108 0801 	add.w	r8, r8, #1
 80046f6:	e7ec      	b.n	80046d2 <_printf_float+0x34e>
 80046f8:	4613      	mov	r3, r2
 80046fa:	4631      	mov	r1, r6
 80046fc:	4642      	mov	r2, r8
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	d1c0      	bne.n	8004688 <_printf_float+0x304>
 8004706:	e69e      	b.n	8004446 <_printf_float+0xc2>
 8004708:	2301      	movs	r3, #1
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	9205      	str	r2, [sp, #20]
 8004710:	47b8      	blx	r7
 8004712:	3001      	adds	r0, #1
 8004714:	f43f ae97 	beq.w	8004446 <_printf_float+0xc2>
 8004718:	9a05      	ldr	r2, [sp, #20]
 800471a:	f10b 0b01 	add.w	fp, fp, #1
 800471e:	e7b9      	b.n	8004694 <_printf_float+0x310>
 8004720:	ee18 3a10 	vmov	r3, s16
 8004724:	4652      	mov	r2, sl
 8004726:	4631      	mov	r1, r6
 8004728:	4628      	mov	r0, r5
 800472a:	47b8      	blx	r7
 800472c:	3001      	adds	r0, #1
 800472e:	d1be      	bne.n	80046ae <_printf_float+0x32a>
 8004730:	e689      	b.n	8004446 <_printf_float+0xc2>
 8004732:	9a05      	ldr	r2, [sp, #20]
 8004734:	464b      	mov	r3, r9
 8004736:	4442      	add	r2, r8
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	d1c1      	bne.n	80046c6 <_printf_float+0x342>
 8004742:	e680      	b.n	8004446 <_printf_float+0xc2>
 8004744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004746:	2a01      	cmp	r2, #1
 8004748:	dc01      	bgt.n	800474e <_printf_float+0x3ca>
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d538      	bpl.n	80047c0 <_printf_float+0x43c>
 800474e:	2301      	movs	r3, #1
 8004750:	4642      	mov	r2, r8
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f ae74 	beq.w	8004446 <_printf_float+0xc2>
 800475e:	ee18 3a10 	vmov	r3, s16
 8004762:	4652      	mov	r2, sl
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f ae6b 	beq.w	8004446 <_printf_float+0xc2>
 8004770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004774:	2200      	movs	r2, #0
 8004776:	2300      	movs	r3, #0
 8004778:	f7fc f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800477c:	b9d8      	cbnz	r0, 80047b6 <_printf_float+0x432>
 800477e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004780:	f108 0201 	add.w	r2, r8, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	47b8      	blx	r7
 800478c:	3001      	adds	r0, #1
 800478e:	d10e      	bne.n	80047ae <_printf_float+0x42a>
 8004790:	e659      	b.n	8004446 <_printf_float+0xc2>
 8004792:	2301      	movs	r3, #1
 8004794:	4652      	mov	r2, sl
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f ae52 	beq.w	8004446 <_printf_float+0xc2>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4543      	cmp	r3, r8
 80047ac:	dcf1      	bgt.n	8004792 <_printf_float+0x40e>
 80047ae:	464b      	mov	r3, r9
 80047b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047b4:	e6dc      	b.n	8004570 <_printf_float+0x1ec>
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	f104 0a1a 	add.w	sl, r4, #26
 80047be:	e7f2      	b.n	80047a6 <_printf_float+0x422>
 80047c0:	2301      	movs	r3, #1
 80047c2:	4642      	mov	r2, r8
 80047c4:	e7df      	b.n	8004786 <_printf_float+0x402>
 80047c6:	2301      	movs	r3, #1
 80047c8:	464a      	mov	r2, r9
 80047ca:	4631      	mov	r1, r6
 80047cc:	4628      	mov	r0, r5
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f ae38 	beq.w	8004446 <_printf_float+0xc2>
 80047d6:	f108 0801 	add.w	r8, r8, #1
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047de:	1a5b      	subs	r3, r3, r1
 80047e0:	4543      	cmp	r3, r8
 80047e2:	dcf0      	bgt.n	80047c6 <_printf_float+0x442>
 80047e4:	e6fa      	b.n	80045dc <_printf_float+0x258>
 80047e6:	f04f 0800 	mov.w	r8, #0
 80047ea:	f104 0919 	add.w	r9, r4, #25
 80047ee:	e7f4      	b.n	80047da <_printf_float+0x456>

080047f0 <_printf_common>:
 80047f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f4:	4616      	mov	r6, r2
 80047f6:	4699      	mov	r9, r3
 80047f8:	688a      	ldr	r2, [r1, #8]
 80047fa:	690b      	ldr	r3, [r1, #16]
 80047fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004800:	4293      	cmp	r3, r2
 8004802:	bfb8      	it	lt
 8004804:	4613      	movlt	r3, r2
 8004806:	6033      	str	r3, [r6, #0]
 8004808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800480c:	4607      	mov	r7, r0
 800480e:	460c      	mov	r4, r1
 8004810:	b10a      	cbz	r2, 8004816 <_printf_common+0x26>
 8004812:	3301      	adds	r3, #1
 8004814:	6033      	str	r3, [r6, #0]
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	0699      	lsls	r1, r3, #26
 800481a:	bf42      	ittt	mi
 800481c:	6833      	ldrmi	r3, [r6, #0]
 800481e:	3302      	addmi	r3, #2
 8004820:	6033      	strmi	r3, [r6, #0]
 8004822:	6825      	ldr	r5, [r4, #0]
 8004824:	f015 0506 	ands.w	r5, r5, #6
 8004828:	d106      	bne.n	8004838 <_printf_common+0x48>
 800482a:	f104 0a19 	add.w	sl, r4, #25
 800482e:	68e3      	ldr	r3, [r4, #12]
 8004830:	6832      	ldr	r2, [r6, #0]
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	42ab      	cmp	r3, r5
 8004836:	dc26      	bgt.n	8004886 <_printf_common+0x96>
 8004838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800483c:	1e13      	subs	r3, r2, #0
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	bf18      	it	ne
 8004842:	2301      	movne	r3, #1
 8004844:	0692      	lsls	r2, r2, #26
 8004846:	d42b      	bmi.n	80048a0 <_printf_common+0xb0>
 8004848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484c:	4649      	mov	r1, r9
 800484e:	4638      	mov	r0, r7
 8004850:	47c0      	blx	r8
 8004852:	3001      	adds	r0, #1
 8004854:	d01e      	beq.n	8004894 <_printf_common+0xa4>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	68e5      	ldr	r5, [r4, #12]
 800485a:	6832      	ldr	r2, [r6, #0]
 800485c:	f003 0306 	and.w	r3, r3, #6
 8004860:	2b04      	cmp	r3, #4
 8004862:	bf08      	it	eq
 8004864:	1aad      	subeq	r5, r5, r2
 8004866:	68a3      	ldr	r3, [r4, #8]
 8004868:	6922      	ldr	r2, [r4, #16]
 800486a:	bf0c      	ite	eq
 800486c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004870:	2500      	movne	r5, #0
 8004872:	4293      	cmp	r3, r2
 8004874:	bfc4      	itt	gt
 8004876:	1a9b      	subgt	r3, r3, r2
 8004878:	18ed      	addgt	r5, r5, r3
 800487a:	2600      	movs	r6, #0
 800487c:	341a      	adds	r4, #26
 800487e:	42b5      	cmp	r5, r6
 8004880:	d11a      	bne.n	80048b8 <_printf_common+0xc8>
 8004882:	2000      	movs	r0, #0
 8004884:	e008      	b.n	8004898 <_printf_common+0xa8>
 8004886:	2301      	movs	r3, #1
 8004888:	4652      	mov	r2, sl
 800488a:	4649      	mov	r1, r9
 800488c:	4638      	mov	r0, r7
 800488e:	47c0      	blx	r8
 8004890:	3001      	adds	r0, #1
 8004892:	d103      	bne.n	800489c <_printf_common+0xac>
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489c:	3501      	adds	r5, #1
 800489e:	e7c6      	b.n	800482e <_printf_common+0x3e>
 80048a0:	18e1      	adds	r1, r4, r3
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	2030      	movs	r0, #48	; 0x30
 80048a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048aa:	4422      	add	r2, r4
 80048ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048b4:	3302      	adds	r3, #2
 80048b6:	e7c7      	b.n	8004848 <_printf_common+0x58>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4622      	mov	r2, r4
 80048bc:	4649      	mov	r1, r9
 80048be:	4638      	mov	r0, r7
 80048c0:	47c0      	blx	r8
 80048c2:	3001      	adds	r0, #1
 80048c4:	d0e6      	beq.n	8004894 <_printf_common+0xa4>
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7d9      	b.n	800487e <_printf_common+0x8e>
	...

080048cc <_printf_i>:
 80048cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	7e0f      	ldrb	r7, [r1, #24]
 80048d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048d4:	2f78      	cmp	r7, #120	; 0x78
 80048d6:	4691      	mov	r9, r2
 80048d8:	4680      	mov	r8, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	469a      	mov	sl, r3
 80048de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048e2:	d807      	bhi.n	80048f4 <_printf_i+0x28>
 80048e4:	2f62      	cmp	r7, #98	; 0x62
 80048e6:	d80a      	bhi.n	80048fe <_printf_i+0x32>
 80048e8:	2f00      	cmp	r7, #0
 80048ea:	f000 80d8 	beq.w	8004a9e <_printf_i+0x1d2>
 80048ee:	2f58      	cmp	r7, #88	; 0x58
 80048f0:	f000 80a3 	beq.w	8004a3a <_printf_i+0x16e>
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048fc:	e03a      	b.n	8004974 <_printf_i+0xa8>
 80048fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004902:	2b15      	cmp	r3, #21
 8004904:	d8f6      	bhi.n	80048f4 <_printf_i+0x28>
 8004906:	a101      	add	r1, pc, #4	; (adr r1, 800490c <_printf_i+0x40>)
 8004908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800490c:	08004965 	.word	0x08004965
 8004910:	08004979 	.word	0x08004979
 8004914:	080048f5 	.word	0x080048f5
 8004918:	080048f5 	.word	0x080048f5
 800491c:	080048f5 	.word	0x080048f5
 8004920:	080048f5 	.word	0x080048f5
 8004924:	08004979 	.word	0x08004979
 8004928:	080048f5 	.word	0x080048f5
 800492c:	080048f5 	.word	0x080048f5
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	08004a85 	.word	0x08004a85
 800493c:	080049a9 	.word	0x080049a9
 8004940:	08004a67 	.word	0x08004a67
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004aa7 	.word	0x08004aa7
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080049a9 	.word	0x080049a9
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a6f 	.word	0x08004a6f
 8004964:	682b      	ldr	r3, [r5, #0]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	602a      	str	r2, [r5, #0]
 800496c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004974:	2301      	movs	r3, #1
 8004976:	e0a3      	b.n	8004ac0 <_printf_i+0x1f4>
 8004978:	6820      	ldr	r0, [r4, #0]
 800497a:	6829      	ldr	r1, [r5, #0]
 800497c:	0606      	lsls	r6, r0, #24
 800497e:	f101 0304 	add.w	r3, r1, #4
 8004982:	d50a      	bpl.n	800499a <_printf_i+0xce>
 8004984:	680e      	ldr	r6, [r1, #0]
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	2e00      	cmp	r6, #0
 800498a:	da03      	bge.n	8004994 <_printf_i+0xc8>
 800498c:	232d      	movs	r3, #45	; 0x2d
 800498e:	4276      	negs	r6, r6
 8004990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004994:	485e      	ldr	r0, [pc, #376]	; (8004b10 <_printf_i+0x244>)
 8004996:	230a      	movs	r3, #10
 8004998:	e019      	b.n	80049ce <_printf_i+0x102>
 800499a:	680e      	ldr	r6, [r1, #0]
 800499c:	602b      	str	r3, [r5, #0]
 800499e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049a2:	bf18      	it	ne
 80049a4:	b236      	sxthne	r6, r6
 80049a6:	e7ef      	b.n	8004988 <_printf_i+0xbc>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	6820      	ldr	r0, [r4, #0]
 80049ac:	1d19      	adds	r1, r3, #4
 80049ae:	6029      	str	r1, [r5, #0]
 80049b0:	0601      	lsls	r1, r0, #24
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0xec>
 80049b4:	681e      	ldr	r6, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0xf2>
 80049b8:	0646      	lsls	r6, r0, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0xe8>
 80049bc:	881e      	ldrh	r6, [r3, #0]
 80049be:	4854      	ldr	r0, [pc, #336]	; (8004b10 <_printf_i+0x244>)
 80049c0:	2f6f      	cmp	r7, #111	; 0x6f
 80049c2:	bf0c      	ite	eq
 80049c4:	2308      	moveq	r3, #8
 80049c6:	230a      	movne	r3, #10
 80049c8:	2100      	movs	r1, #0
 80049ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ce:	6865      	ldr	r5, [r4, #4]
 80049d0:	60a5      	str	r5, [r4, #8]
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	bfa2      	ittt	ge
 80049d6:	6821      	ldrge	r1, [r4, #0]
 80049d8:	f021 0104 	bicge.w	r1, r1, #4
 80049dc:	6021      	strge	r1, [r4, #0]
 80049de:	b90e      	cbnz	r6, 80049e4 <_printf_i+0x118>
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	d04d      	beq.n	8004a80 <_printf_i+0x1b4>
 80049e4:	4615      	mov	r5, r2
 80049e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80049ea:	fb03 6711 	mls	r7, r3, r1, r6
 80049ee:	5dc7      	ldrb	r7, [r0, r7]
 80049f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049f4:	4637      	mov	r7, r6
 80049f6:	42bb      	cmp	r3, r7
 80049f8:	460e      	mov	r6, r1
 80049fa:	d9f4      	bls.n	80049e6 <_printf_i+0x11a>
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d10b      	bne.n	8004a18 <_printf_i+0x14c>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	07de      	lsls	r6, r3, #31
 8004a04:	d508      	bpl.n	8004a18 <_printf_i+0x14c>
 8004a06:	6923      	ldr	r3, [r4, #16]
 8004a08:	6861      	ldr	r1, [r4, #4]
 8004a0a:	4299      	cmp	r1, r3
 8004a0c:	bfde      	ittt	le
 8004a0e:	2330      	movle	r3, #48	; 0x30
 8004a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a18:	1b52      	subs	r2, r2, r5
 8004a1a:	6122      	str	r2, [r4, #16]
 8004a1c:	f8cd a000 	str.w	sl, [sp]
 8004a20:	464b      	mov	r3, r9
 8004a22:	aa03      	add	r2, sp, #12
 8004a24:	4621      	mov	r1, r4
 8004a26:	4640      	mov	r0, r8
 8004a28:	f7ff fee2 	bl	80047f0 <_printf_common>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d14c      	bne.n	8004aca <_printf_i+0x1fe>
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	b004      	add	sp, #16
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	4835      	ldr	r0, [pc, #212]	; (8004b10 <_printf_i+0x244>)
 8004a3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a40:	6829      	ldr	r1, [r5, #0]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a48:	6029      	str	r1, [r5, #0]
 8004a4a:	061d      	lsls	r5, r3, #24
 8004a4c:	d514      	bpl.n	8004a78 <_printf_i+0x1ac>
 8004a4e:	07df      	lsls	r7, r3, #31
 8004a50:	bf44      	itt	mi
 8004a52:	f043 0320 	orrmi.w	r3, r3, #32
 8004a56:	6023      	strmi	r3, [r4, #0]
 8004a58:	b91e      	cbnz	r6, 8004a62 <_printf_i+0x196>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	f023 0320 	bic.w	r3, r3, #32
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	2310      	movs	r3, #16
 8004a64:	e7b0      	b.n	80049c8 <_printf_i+0xfc>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	2378      	movs	r3, #120	; 0x78
 8004a70:	4828      	ldr	r0, [pc, #160]	; (8004b14 <_printf_i+0x248>)
 8004a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a76:	e7e3      	b.n	8004a40 <_printf_i+0x174>
 8004a78:	0659      	lsls	r1, r3, #25
 8004a7a:	bf48      	it	mi
 8004a7c:	b2b6      	uxthmi	r6, r6
 8004a7e:	e7e6      	b.n	8004a4e <_printf_i+0x182>
 8004a80:	4615      	mov	r5, r2
 8004a82:	e7bb      	b.n	80049fc <_printf_i+0x130>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6826      	ldr	r6, [r4, #0]
 8004a88:	6961      	ldr	r1, [r4, #20]
 8004a8a:	1d18      	adds	r0, r3, #4
 8004a8c:	6028      	str	r0, [r5, #0]
 8004a8e:	0635      	lsls	r5, r6, #24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	d501      	bpl.n	8004a98 <_printf_i+0x1cc>
 8004a94:	6019      	str	r1, [r3, #0]
 8004a96:	e002      	b.n	8004a9e <_printf_i+0x1d2>
 8004a98:	0670      	lsls	r0, r6, #25
 8004a9a:	d5fb      	bpl.n	8004a94 <_printf_i+0x1c8>
 8004a9c:	8019      	strh	r1, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6123      	str	r3, [r4, #16]
 8004aa2:	4615      	mov	r5, r2
 8004aa4:	e7ba      	b.n	8004a1c <_printf_i+0x150>
 8004aa6:	682b      	ldr	r3, [r5, #0]
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	602a      	str	r2, [r5, #0]
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f7fb fb94 	bl	80001e0 <memchr>
 8004ab8:	b108      	cbz	r0, 8004abe <_printf_i+0x1f2>
 8004aba:	1b40      	subs	r0, r0, r5
 8004abc:	6060      	str	r0, [r4, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac8:	e7a8      	b.n	8004a1c <_printf_i+0x150>
 8004aca:	6923      	ldr	r3, [r4, #16]
 8004acc:	462a      	mov	r2, r5
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	47d0      	blx	sl
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d0ab      	beq.n	8004a30 <_printf_i+0x164>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	079b      	lsls	r3, r3, #30
 8004adc:	d413      	bmi.n	8004b06 <_printf_i+0x23a>
 8004ade:	68e0      	ldr	r0, [r4, #12]
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	4298      	cmp	r0, r3
 8004ae4:	bfb8      	it	lt
 8004ae6:	4618      	movlt	r0, r3
 8004ae8:	e7a4      	b.n	8004a34 <_printf_i+0x168>
 8004aea:	2301      	movs	r3, #1
 8004aec:	4632      	mov	r2, r6
 8004aee:	4649      	mov	r1, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	47d0      	blx	sl
 8004af4:	3001      	adds	r0, #1
 8004af6:	d09b      	beq.n	8004a30 <_printf_i+0x164>
 8004af8:	3501      	adds	r5, #1
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	9903      	ldr	r1, [sp, #12]
 8004afe:	1a5b      	subs	r3, r3, r1
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dcf2      	bgt.n	8004aea <_printf_i+0x21e>
 8004b04:	e7eb      	b.n	8004ade <_printf_i+0x212>
 8004b06:	2500      	movs	r5, #0
 8004b08:	f104 0619 	add.w	r6, r4, #25
 8004b0c:	e7f5      	b.n	8004afa <_printf_i+0x22e>
 8004b0e:	bf00      	nop
 8004b10:	08006e1a 	.word	0x08006e1a
 8004b14:	08006e2b 	.word	0x08006e2b

08004b18 <iprintf>:
 8004b18:	b40f      	push	{r0, r1, r2, r3}
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <iprintf+0x2c>)
 8004b1c:	b513      	push	{r0, r1, r4, lr}
 8004b1e:	681c      	ldr	r4, [r3, #0]
 8004b20:	b124      	cbz	r4, 8004b2c <iprintf+0x14>
 8004b22:	69a3      	ldr	r3, [r4, #24]
 8004b24:	b913      	cbnz	r3, 8004b2c <iprintf+0x14>
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 fef8 	bl	800591c <__sinit>
 8004b2c:	ab05      	add	r3, sp, #20
 8004b2e:	9a04      	ldr	r2, [sp, #16]
 8004b30:	68a1      	ldr	r1, [r4, #8]
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	4620      	mov	r0, r4
 8004b36:	f001 fc51 	bl	80063dc <_vfiprintf_r>
 8004b3a:	b002      	add	sp, #8
 8004b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b40:	b004      	add	sp, #16
 8004b42:	4770      	bx	lr
 8004b44:	2000000c 	.word	0x2000000c

08004b48 <putchar>:
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <putchar+0x28>)
 8004b4a:	b513      	push	{r0, r1, r4, lr}
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	4601      	mov	r1, r0
 8004b50:	b134      	cbz	r4, 8004b60 <putchar+0x18>
 8004b52:	69a3      	ldr	r3, [r4, #24]
 8004b54:	b923      	cbnz	r3, 8004b60 <putchar+0x18>
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 fedf 	bl	800591c <__sinit>
 8004b5e:	9901      	ldr	r1, [sp, #4]
 8004b60:	68a2      	ldr	r2, [r4, #8]
 8004b62:	4620      	mov	r0, r4
 8004b64:	b002      	add	sp, #8
 8004b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6a:	f001 bd67 	b.w	800663c <_putc_r>
 8004b6e:	bf00      	nop
 8004b70:	2000000c 	.word	0x2000000c

08004b74 <quorem>:
 8004b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	6903      	ldr	r3, [r0, #16]
 8004b7a:	690c      	ldr	r4, [r1, #16]
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	4607      	mov	r7, r0
 8004b80:	f2c0 8081 	blt.w	8004c86 <quorem+0x112>
 8004b84:	3c01      	subs	r4, #1
 8004b86:	f101 0814 	add.w	r8, r1, #20
 8004b8a:	f100 0514 	add.w	r5, r0, #20
 8004b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bac:	d331      	bcc.n	8004c12 <quorem+0x9e>
 8004bae:	f04f 0e00 	mov.w	lr, #0
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	46ac      	mov	ip, r5
 8004bb6:	46f2      	mov	sl, lr
 8004bb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bbc:	b293      	uxth	r3, r2
 8004bbe:	fb06 e303 	mla	r3, r6, r3, lr
 8004bc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8004bcc:	f8dc a000 	ldr.w	sl, [ip]
 8004bd0:	0c12      	lsrs	r2, r2, #16
 8004bd2:	fa13 f38a 	uxtah	r3, r3, sl
 8004bd6:	fb06 e202 	mla	r2, r6, r2, lr
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	9b00      	ldr	r3, [sp, #0]
 8004bde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004be2:	b292      	uxth	r2, r2
 8004be4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bec:	f8bd 3000 	ldrh.w	r3, [sp]
 8004bf0:	4581      	cmp	r9, r0
 8004bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf6:	f84c 3b04 	str.w	r3, [ip], #4
 8004bfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bfe:	d2db      	bcs.n	8004bb8 <quorem+0x44>
 8004c00:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c04:	b92b      	cbnz	r3, 8004c12 <quorem+0x9e>
 8004c06:	9b01      	ldr	r3, [sp, #4]
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	429d      	cmp	r5, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	d32e      	bcc.n	8004c6e <quorem+0xfa>
 8004c10:	613c      	str	r4, [r7, #16]
 8004c12:	4638      	mov	r0, r7
 8004c14:	f001 f9c0 	bl	8005f98 <__mcmp>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	db24      	blt.n	8004c66 <quorem+0xf2>
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f04f 0c00 	mov.w	ip, #0
 8004c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c28:	f8d0 e000 	ldr.w	lr, [r0]
 8004c2c:	b293      	uxth	r3, r2
 8004c2e:	ebac 0303 	sub.w	r3, ip, r3
 8004c32:	0c12      	lsrs	r2, r2, #16
 8004c34:	fa13 f38e 	uxtah	r3, r3, lr
 8004c38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c46:	45c1      	cmp	r9, r8
 8004c48:	f840 3b04 	str.w	r3, [r0], #4
 8004c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c50:	d2e8      	bcs.n	8004c24 <quorem+0xb0>
 8004c52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c5a:	b922      	cbnz	r2, 8004c66 <quorem+0xf2>
 8004c5c:	3b04      	subs	r3, #4
 8004c5e:	429d      	cmp	r5, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	d30a      	bcc.n	8004c7a <quorem+0x106>
 8004c64:	613c      	str	r4, [r7, #16]
 8004c66:	4630      	mov	r0, r6
 8004c68:	b003      	add	sp, #12
 8004c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	3b04      	subs	r3, #4
 8004c72:	2a00      	cmp	r2, #0
 8004c74:	d1cc      	bne.n	8004c10 <quorem+0x9c>
 8004c76:	3c01      	subs	r4, #1
 8004c78:	e7c7      	b.n	8004c0a <quorem+0x96>
 8004c7a:	6812      	ldr	r2, [r2, #0]
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d1f0      	bne.n	8004c64 <quorem+0xf0>
 8004c82:	3c01      	subs	r4, #1
 8004c84:	e7eb      	b.n	8004c5e <quorem+0xea>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e7ee      	b.n	8004c68 <quorem+0xf4>
 8004c8a:	0000      	movs	r0, r0
 8004c8c:	0000      	movs	r0, r0
	...

08004c90 <_dtoa_r>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	ed2d 8b04 	vpush	{d8-d9}
 8004c98:	ec57 6b10 	vmov	r6, r7, d0
 8004c9c:	b093      	sub	sp, #76	; 0x4c
 8004c9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ca0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ca4:	9106      	str	r1, [sp, #24]
 8004ca6:	ee10 aa10 	vmov	sl, s0
 8004caa:	4604      	mov	r4, r0
 8004cac:	9209      	str	r2, [sp, #36]	; 0x24
 8004cae:	930c      	str	r3, [sp, #48]	; 0x30
 8004cb0:	46bb      	mov	fp, r7
 8004cb2:	b975      	cbnz	r5, 8004cd2 <_dtoa_r+0x42>
 8004cb4:	2010      	movs	r0, #16
 8004cb6:	f000 fed7 	bl	8005a68 <malloc>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6260      	str	r0, [r4, #36]	; 0x24
 8004cbe:	b920      	cbnz	r0, 8004cca <_dtoa_r+0x3a>
 8004cc0:	4ba7      	ldr	r3, [pc, #668]	; (8004f60 <_dtoa_r+0x2d0>)
 8004cc2:	21ea      	movs	r1, #234	; 0xea
 8004cc4:	48a7      	ldr	r0, [pc, #668]	; (8004f64 <_dtoa_r+0x2d4>)
 8004cc6:	f001 fe27 	bl	8006918 <__assert_func>
 8004cca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cce:	6005      	str	r5, [r0, #0]
 8004cd0:	60c5      	str	r5, [r0, #12]
 8004cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	b151      	cbz	r1, 8004cee <_dtoa_r+0x5e>
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	604a      	str	r2, [r1, #4]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4093      	lsls	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 ff16 	bl	8005b14 <_Bfree>
 8004ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	1e3b      	subs	r3, r7, #0
 8004cf0:	bfaa      	itet	ge
 8004cf2:	2300      	movge	r3, #0
 8004cf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004cf8:	f8c8 3000 	strge.w	r3, [r8]
 8004cfc:	4b9a      	ldr	r3, [pc, #616]	; (8004f68 <_dtoa_r+0x2d8>)
 8004cfe:	bfbc      	itt	lt
 8004d00:	2201      	movlt	r2, #1
 8004d02:	f8c8 2000 	strlt.w	r2, [r8]
 8004d06:	ea33 030b 	bics.w	r3, r3, fp
 8004d0a:	d11b      	bne.n	8004d44 <_dtoa_r+0xb4>
 8004d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d18:	4333      	orrs	r3, r6
 8004d1a:	f000 8592 	beq.w	8005842 <_dtoa_r+0xbb2>
 8004d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d20:	b963      	cbnz	r3, 8004d3c <_dtoa_r+0xac>
 8004d22:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <_dtoa_r+0x2dc>)
 8004d24:	e022      	b.n	8004d6c <_dtoa_r+0xdc>
 8004d26:	4b92      	ldr	r3, [pc, #584]	; (8004f70 <_dtoa_r+0x2e0>)
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	9801      	ldr	r0, [sp, #4]
 8004d32:	b013      	add	sp, #76	; 0x4c
 8004d34:	ecbd 8b04 	vpop	{d8-d9}
 8004d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d3c:	4b8b      	ldr	r3, [pc, #556]	; (8004f6c <_dtoa_r+0x2dc>)
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	3303      	adds	r3, #3
 8004d42:	e7f3      	b.n	8004d2c <_dtoa_r+0x9c>
 8004d44:	2200      	movs	r2, #0
 8004d46:	2300      	movs	r3, #0
 8004d48:	4650      	mov	r0, sl
 8004d4a:	4659      	mov	r1, fp
 8004d4c:	f7fb febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d50:	ec4b ab19 	vmov	d9, sl, fp
 8004d54:	4680      	mov	r8, r0
 8004d56:	b158      	cbz	r0, 8004d70 <_dtoa_r+0xe0>
 8004d58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 856b 	beq.w	800583c <_dtoa_r+0xbac>
 8004d66:	4883      	ldr	r0, [pc, #524]	; (8004f74 <_dtoa_r+0x2e4>)
 8004d68:	6018      	str	r0, [r3, #0]
 8004d6a:	1e43      	subs	r3, r0, #1
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	e7df      	b.n	8004d30 <_dtoa_r+0xa0>
 8004d70:	ec4b ab10 	vmov	d0, sl, fp
 8004d74:	aa10      	add	r2, sp, #64	; 0x40
 8004d76:	a911      	add	r1, sp, #68	; 0x44
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f001 f9b3 	bl	80060e4 <__d2b>
 8004d7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004d82:	ee08 0a10 	vmov	s16, r0
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	f000 8084 	beq.w	8004e94 <_dtoa_r+0x204>
 8004d8c:	ee19 3a90 	vmov	r3, s19
 8004d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d98:	4656      	mov	r6, sl
 8004d9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004da2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <_dtoa_r+0x2e8>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	4639      	mov	r1, r7
 8004dae:	f7fb fa6b 	bl	8000288 <__aeabi_dsub>
 8004db2:	a365      	add	r3, pc, #404	; (adr r3, 8004f48 <_dtoa_r+0x2b8>)
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f7fb fc1e 	bl	80005f8 <__aeabi_dmul>
 8004dbc:	a364      	add	r3, pc, #400	; (adr r3, 8004f50 <_dtoa_r+0x2c0>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fa63 	bl	800028c <__adddf3>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	4628      	mov	r0, r5
 8004dca:	460f      	mov	r7, r1
 8004dcc:	f7fb fbaa 	bl	8000524 <__aeabi_i2d>
 8004dd0:	a361      	add	r3, pc, #388	; (adr r3, 8004f58 <_dtoa_r+0x2c8>)
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	f7fb fc0f 	bl	80005f8 <__aeabi_dmul>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4630      	mov	r0, r6
 8004de0:	4639      	mov	r1, r7
 8004de2:	f7fb fa53 	bl	800028c <__adddf3>
 8004de6:	4606      	mov	r6, r0
 8004de8:	460f      	mov	r7, r1
 8004dea:	f7fb feb5 	bl	8000b58 <__aeabi_d2iz>
 8004dee:	2200      	movs	r2, #0
 8004df0:	9000      	str	r0, [sp, #0]
 8004df2:	2300      	movs	r3, #0
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fe70 	bl	8000adc <__aeabi_dcmplt>
 8004dfc:	b150      	cbz	r0, 8004e14 <_dtoa_r+0x184>
 8004dfe:	9800      	ldr	r0, [sp, #0]
 8004e00:	f7fb fb90 	bl	8000524 <__aeabi_i2d>
 8004e04:	4632      	mov	r2, r6
 8004e06:	463b      	mov	r3, r7
 8004e08:	f7fb fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e0c:	b910      	cbnz	r0, 8004e14 <_dtoa_r+0x184>
 8004e0e:	9b00      	ldr	r3, [sp, #0]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	9b00      	ldr	r3, [sp, #0]
 8004e16:	2b16      	cmp	r3, #22
 8004e18:	d85a      	bhi.n	8004ed0 <_dtoa_r+0x240>
 8004e1a:	9a00      	ldr	r2, [sp, #0]
 8004e1c:	4b57      	ldr	r3, [pc, #348]	; (8004f7c <_dtoa_r+0x2ec>)
 8004e1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	ec51 0b19 	vmov	r0, r1, d9
 8004e2a:	f7fb fe57 	bl	8000adc <__aeabi_dcmplt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d050      	beq.n	8004ed4 <_dtoa_r+0x244>
 8004e32:	9b00      	ldr	r3, [sp, #0]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e3e:	1b5d      	subs	r5, r3, r5
 8004e40:	1e6b      	subs	r3, r5, #1
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	bf45      	ittet	mi
 8004e46:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e4a:	9304      	strmi	r3, [sp, #16]
 8004e4c:	2300      	movpl	r3, #0
 8004e4e:	2300      	movmi	r3, #0
 8004e50:	bf4c      	ite	mi
 8004e52:	9305      	strmi	r3, [sp, #20]
 8004e54:	9304      	strpl	r3, [sp, #16]
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	db3d      	blt.n	8004ed8 <_dtoa_r+0x248>
 8004e5c:	9b05      	ldr	r3, [sp, #20]
 8004e5e:	9a00      	ldr	r2, [sp, #0]
 8004e60:	920a      	str	r2, [sp, #40]	; 0x28
 8004e62:	4413      	add	r3, r2
 8004e64:	9305      	str	r3, [sp, #20]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9307      	str	r3, [sp, #28]
 8004e6a:	9b06      	ldr	r3, [sp, #24]
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	f200 8089 	bhi.w	8004f84 <_dtoa_r+0x2f4>
 8004e72:	2b05      	cmp	r3, #5
 8004e74:	bfc4      	itt	gt
 8004e76:	3b04      	subgt	r3, #4
 8004e78:	9306      	strgt	r3, [sp, #24]
 8004e7a:	9b06      	ldr	r3, [sp, #24]
 8004e7c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e80:	bfcc      	ite	gt
 8004e82:	2500      	movgt	r5, #0
 8004e84:	2501      	movle	r5, #1
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	f200 8087 	bhi.w	8004f9a <_dtoa_r+0x30a>
 8004e8c:	e8df f003 	tbb	[pc, r3]
 8004e90:	59383a2d 	.word	0x59383a2d
 8004e94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e98:	441d      	add	r5, r3
 8004e9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e9e:	2b20      	cmp	r3, #32
 8004ea0:	bfc1      	itttt	gt
 8004ea2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ea6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004eaa:	fa0b f303 	lslgt.w	r3, fp, r3
 8004eae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004eb2:	bfda      	itte	le
 8004eb4:	f1c3 0320 	rsble	r3, r3, #32
 8004eb8:	fa06 f003 	lslle.w	r0, r6, r3
 8004ebc:	4318      	orrgt	r0, r3
 8004ebe:	f7fb fb21 	bl	8000504 <__aeabi_ui2d>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004eca:	3d01      	subs	r5, #1
 8004ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8004ece:	e76a      	b.n	8004da6 <_dtoa_r+0x116>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e7b2      	b.n	8004e3a <_dtoa_r+0x1aa>
 8004ed4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ed6:	e7b1      	b.n	8004e3c <_dtoa_r+0x1ac>
 8004ed8:	9b04      	ldr	r3, [sp, #16]
 8004eda:	9a00      	ldr	r2, [sp, #0]
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	4253      	negs	r3, r2
 8004ee2:	9307      	str	r3, [sp, #28]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ee8:	e7bf      	b.n	8004e6a <_dtoa_r+0x1da>
 8004eea:	2300      	movs	r3, #0
 8004eec:	9308      	str	r3, [sp, #32]
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc55      	bgt.n	8004fa0 <_dtoa_r+0x310>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004efa:	461a      	mov	r2, r3
 8004efc:	9209      	str	r2, [sp, #36]	; 0x24
 8004efe:	e00c      	b.n	8004f1a <_dtoa_r+0x28a>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e7f3      	b.n	8004eec <_dtoa_r+0x25c>
 8004f04:	2300      	movs	r3, #0
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	9308      	str	r3, [sp, #32]
 8004f0a:	9b00      	ldr	r3, [sp, #0]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	9302      	str	r3, [sp, #8]
 8004f10:	3301      	adds	r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	bfb8      	it	lt
 8004f18:	2301      	movlt	r3, #1
 8004f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6042      	str	r2, [r0, #4]
 8004f20:	2204      	movs	r2, #4
 8004f22:	f102 0614 	add.w	r6, r2, #20
 8004f26:	429e      	cmp	r6, r3
 8004f28:	6841      	ldr	r1, [r0, #4]
 8004f2a:	d93d      	bls.n	8004fa8 <_dtoa_r+0x318>
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 fdb1 	bl	8005a94 <_Balloc>
 8004f32:	9001      	str	r0, [sp, #4]
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d13b      	bne.n	8004fb0 <_dtoa_r+0x320>
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <_dtoa_r+0x2f0>)
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f40:	e6c0      	b.n	8004cc4 <_dtoa_r+0x34>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e7df      	b.n	8004f06 <_dtoa_r+0x276>
 8004f46:	bf00      	nop
 8004f48:	636f4361 	.word	0x636f4361
 8004f4c:	3fd287a7 	.word	0x3fd287a7
 8004f50:	8b60c8b3 	.word	0x8b60c8b3
 8004f54:	3fc68a28 	.word	0x3fc68a28
 8004f58:	509f79fb 	.word	0x509f79fb
 8004f5c:	3fd34413 	.word	0x3fd34413
 8004f60:	08006e49 	.word	0x08006e49
 8004f64:	08006e60 	.word	0x08006e60
 8004f68:	7ff00000 	.word	0x7ff00000
 8004f6c:	08006e45 	.word	0x08006e45
 8004f70:	08006e3c 	.word	0x08006e3c
 8004f74:	08006e19 	.word	0x08006e19
 8004f78:	3ff80000 	.word	0x3ff80000
 8004f7c:	08006fb0 	.word	0x08006fb0
 8004f80:	08006ebb 	.word	0x08006ebb
 8004f84:	2501      	movs	r5, #1
 8004f86:	2300      	movs	r3, #0
 8004f88:	9306      	str	r3, [sp, #24]
 8004f8a:	9508      	str	r5, [sp, #32]
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2312      	movs	r3, #18
 8004f98:	e7b0      	b.n	8004efc <_dtoa_r+0x26c>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	9308      	str	r3, [sp, #32]
 8004f9e:	e7f5      	b.n	8004f8c <_dtoa_r+0x2fc>
 8004fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004fa6:	e7b8      	b.n	8004f1a <_dtoa_r+0x28a>
 8004fa8:	3101      	adds	r1, #1
 8004faa:	6041      	str	r1, [r0, #4]
 8004fac:	0052      	lsls	r2, r2, #1
 8004fae:	e7b8      	b.n	8004f22 <_dtoa_r+0x292>
 8004fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb2:	9a01      	ldr	r2, [sp, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	2b0e      	cmp	r3, #14
 8004fba:	f200 809d 	bhi.w	80050f8 <_dtoa_r+0x468>
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	f000 809a 	beq.w	80050f8 <_dtoa_r+0x468>
 8004fc4:	9b00      	ldr	r3, [sp, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dd32      	ble.n	8005030 <_dtoa_r+0x3a0>
 8004fca:	4ab7      	ldr	r2, [pc, #732]	; (80052a8 <_dtoa_r+0x618>)
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fd8:	9b00      	ldr	r3, [sp, #0]
 8004fda:	05d8      	lsls	r0, r3, #23
 8004fdc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004fe0:	d516      	bpl.n	8005010 <_dtoa_r+0x380>
 8004fe2:	4bb2      	ldr	r3, [pc, #712]	; (80052ac <_dtoa_r+0x61c>)
 8004fe4:	ec51 0b19 	vmov	r0, r1, d9
 8004fe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fec:	f7fb fc2e 	bl	800084c <__aeabi_ddiv>
 8004ff0:	f007 070f 	and.w	r7, r7, #15
 8004ff4:	4682      	mov	sl, r0
 8004ff6:	468b      	mov	fp, r1
 8004ff8:	2503      	movs	r5, #3
 8004ffa:	4eac      	ldr	r6, [pc, #688]	; (80052ac <_dtoa_r+0x61c>)
 8004ffc:	b957      	cbnz	r7, 8005014 <_dtoa_r+0x384>
 8004ffe:	4642      	mov	r2, r8
 8005000:	464b      	mov	r3, r9
 8005002:	4650      	mov	r0, sl
 8005004:	4659      	mov	r1, fp
 8005006:	f7fb fc21 	bl	800084c <__aeabi_ddiv>
 800500a:	4682      	mov	sl, r0
 800500c:	468b      	mov	fp, r1
 800500e:	e028      	b.n	8005062 <_dtoa_r+0x3d2>
 8005010:	2502      	movs	r5, #2
 8005012:	e7f2      	b.n	8004ffa <_dtoa_r+0x36a>
 8005014:	07f9      	lsls	r1, r7, #31
 8005016:	d508      	bpl.n	800502a <_dtoa_r+0x39a>
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005020:	f7fb faea 	bl	80005f8 <__aeabi_dmul>
 8005024:	3501      	adds	r5, #1
 8005026:	4680      	mov	r8, r0
 8005028:	4689      	mov	r9, r1
 800502a:	107f      	asrs	r7, r7, #1
 800502c:	3608      	adds	r6, #8
 800502e:	e7e5      	b.n	8004ffc <_dtoa_r+0x36c>
 8005030:	f000 809b 	beq.w	800516a <_dtoa_r+0x4da>
 8005034:	9b00      	ldr	r3, [sp, #0]
 8005036:	4f9d      	ldr	r7, [pc, #628]	; (80052ac <_dtoa_r+0x61c>)
 8005038:	425e      	negs	r6, r3
 800503a:	4b9b      	ldr	r3, [pc, #620]	; (80052a8 <_dtoa_r+0x618>)
 800503c:	f006 020f 	and.w	r2, r6, #15
 8005040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	ec51 0b19 	vmov	r0, r1, d9
 800504c:	f7fb fad4 	bl	80005f8 <__aeabi_dmul>
 8005050:	1136      	asrs	r6, r6, #4
 8005052:	4682      	mov	sl, r0
 8005054:	468b      	mov	fp, r1
 8005056:	2300      	movs	r3, #0
 8005058:	2502      	movs	r5, #2
 800505a:	2e00      	cmp	r6, #0
 800505c:	d17a      	bne.n	8005154 <_dtoa_r+0x4c4>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1d3      	bne.n	800500a <_dtoa_r+0x37a>
 8005062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8082 	beq.w	800516e <_dtoa_r+0x4de>
 800506a:	4b91      	ldr	r3, [pc, #580]	; (80052b0 <_dtoa_r+0x620>)
 800506c:	2200      	movs	r2, #0
 800506e:	4650      	mov	r0, sl
 8005070:	4659      	mov	r1, fp
 8005072:	f7fb fd33 	bl	8000adc <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	d079      	beq.n	800516e <_dtoa_r+0x4de>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d076      	beq.n	800516e <_dtoa_r+0x4de>
 8005080:	9b02      	ldr	r3, [sp, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	dd36      	ble.n	80050f4 <_dtoa_r+0x464>
 8005086:	9b00      	ldr	r3, [sp, #0]
 8005088:	4650      	mov	r0, sl
 800508a:	4659      	mov	r1, fp
 800508c:	1e5f      	subs	r7, r3, #1
 800508e:	2200      	movs	r2, #0
 8005090:	4b88      	ldr	r3, [pc, #544]	; (80052b4 <_dtoa_r+0x624>)
 8005092:	f7fb fab1 	bl	80005f8 <__aeabi_dmul>
 8005096:	9e02      	ldr	r6, [sp, #8]
 8005098:	4682      	mov	sl, r0
 800509a:	468b      	mov	fp, r1
 800509c:	3501      	adds	r5, #1
 800509e:	4628      	mov	r0, r5
 80050a0:	f7fb fa40 	bl	8000524 <__aeabi_i2d>
 80050a4:	4652      	mov	r2, sl
 80050a6:	465b      	mov	r3, fp
 80050a8:	f7fb faa6 	bl	80005f8 <__aeabi_dmul>
 80050ac:	4b82      	ldr	r3, [pc, #520]	; (80052b8 <_dtoa_r+0x628>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	f7fb f8ec 	bl	800028c <__adddf3>
 80050b4:	46d0      	mov	r8, sl
 80050b6:	46d9      	mov	r9, fp
 80050b8:	4682      	mov	sl, r0
 80050ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d158      	bne.n	8005174 <_dtoa_r+0x4e4>
 80050c2:	4b7e      	ldr	r3, [pc, #504]	; (80052bc <_dtoa_r+0x62c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	4640      	mov	r0, r8
 80050c8:	4649      	mov	r1, r9
 80050ca:	f7fb f8dd 	bl	8000288 <__aeabi_dsub>
 80050ce:	4652      	mov	r2, sl
 80050d0:	465b      	mov	r3, fp
 80050d2:	4680      	mov	r8, r0
 80050d4:	4689      	mov	r9, r1
 80050d6:	f7fb fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 8295 	bne.w	800560a <_dtoa_r+0x97a>
 80050e0:	4652      	mov	r2, sl
 80050e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80050e6:	4640      	mov	r0, r8
 80050e8:	4649      	mov	r1, r9
 80050ea:	f7fb fcf7 	bl	8000adc <__aeabi_dcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f040 8289 	bne.w	8005606 <_dtoa_r+0x976>
 80050f4:	ec5b ab19 	vmov	sl, fp, d9
 80050f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f2c0 8148 	blt.w	8005390 <_dtoa_r+0x700>
 8005100:	9a00      	ldr	r2, [sp, #0]
 8005102:	2a0e      	cmp	r2, #14
 8005104:	f300 8144 	bgt.w	8005390 <_dtoa_r+0x700>
 8005108:	4b67      	ldr	r3, [pc, #412]	; (80052a8 <_dtoa_r+0x618>)
 800510a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800510e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	f280 80d5 	bge.w	80052c4 <_dtoa_r+0x634>
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f300 80d1 	bgt.w	80052c4 <_dtoa_r+0x634>
 8005122:	f040 826f 	bne.w	8005604 <_dtoa_r+0x974>
 8005126:	4b65      	ldr	r3, [pc, #404]	; (80052bc <_dtoa_r+0x62c>)
 8005128:	2200      	movs	r2, #0
 800512a:	4640      	mov	r0, r8
 800512c:	4649      	mov	r1, r9
 800512e:	f7fb fa63 	bl	80005f8 <__aeabi_dmul>
 8005132:	4652      	mov	r2, sl
 8005134:	465b      	mov	r3, fp
 8005136:	f7fb fce5 	bl	8000b04 <__aeabi_dcmpge>
 800513a:	9e03      	ldr	r6, [sp, #12]
 800513c:	4637      	mov	r7, r6
 800513e:	2800      	cmp	r0, #0
 8005140:	f040 8245 	bne.w	80055ce <_dtoa_r+0x93e>
 8005144:	9d01      	ldr	r5, [sp, #4]
 8005146:	2331      	movs	r3, #49	; 0x31
 8005148:	f805 3b01 	strb.w	r3, [r5], #1
 800514c:	9b00      	ldr	r3, [sp, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	e240      	b.n	80055d6 <_dtoa_r+0x946>
 8005154:	07f2      	lsls	r2, r6, #31
 8005156:	d505      	bpl.n	8005164 <_dtoa_r+0x4d4>
 8005158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800515c:	f7fb fa4c 	bl	80005f8 <__aeabi_dmul>
 8005160:	3501      	adds	r5, #1
 8005162:	2301      	movs	r3, #1
 8005164:	1076      	asrs	r6, r6, #1
 8005166:	3708      	adds	r7, #8
 8005168:	e777      	b.n	800505a <_dtoa_r+0x3ca>
 800516a:	2502      	movs	r5, #2
 800516c:	e779      	b.n	8005062 <_dtoa_r+0x3d2>
 800516e:	9f00      	ldr	r7, [sp, #0]
 8005170:	9e03      	ldr	r6, [sp, #12]
 8005172:	e794      	b.n	800509e <_dtoa_r+0x40e>
 8005174:	9901      	ldr	r1, [sp, #4]
 8005176:	4b4c      	ldr	r3, [pc, #304]	; (80052a8 <_dtoa_r+0x618>)
 8005178:	4431      	add	r1, r6
 800517a:	910d      	str	r1, [sp, #52]	; 0x34
 800517c:	9908      	ldr	r1, [sp, #32]
 800517e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005186:	2900      	cmp	r1, #0
 8005188:	d043      	beq.n	8005212 <_dtoa_r+0x582>
 800518a:	494d      	ldr	r1, [pc, #308]	; (80052c0 <_dtoa_r+0x630>)
 800518c:	2000      	movs	r0, #0
 800518e:	f7fb fb5d 	bl	800084c <__aeabi_ddiv>
 8005192:	4652      	mov	r2, sl
 8005194:	465b      	mov	r3, fp
 8005196:	f7fb f877 	bl	8000288 <__aeabi_dsub>
 800519a:	9d01      	ldr	r5, [sp, #4]
 800519c:	4682      	mov	sl, r0
 800519e:	468b      	mov	fp, r1
 80051a0:	4649      	mov	r1, r9
 80051a2:	4640      	mov	r0, r8
 80051a4:	f7fb fcd8 	bl	8000b58 <__aeabi_d2iz>
 80051a8:	4606      	mov	r6, r0
 80051aa:	f7fb f9bb 	bl	8000524 <__aeabi_i2d>
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb f867 	bl	8000288 <__aeabi_dsub>
 80051ba:	3630      	adds	r6, #48	; 0x30
 80051bc:	f805 6b01 	strb.w	r6, [r5], #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	465b      	mov	r3, fp
 80051c4:	4680      	mov	r8, r0
 80051c6:	4689      	mov	r9, r1
 80051c8:	f7fb fc88 	bl	8000adc <__aeabi_dcmplt>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d163      	bne.n	8005298 <_dtoa_r+0x608>
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	4936      	ldr	r1, [pc, #216]	; (80052b0 <_dtoa_r+0x620>)
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fb f856 	bl	8000288 <__aeabi_dsub>
 80051dc:	4652      	mov	r2, sl
 80051de:	465b      	mov	r3, fp
 80051e0:	f7fb fc7c 	bl	8000adc <__aeabi_dcmplt>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f040 80b5 	bne.w	8005354 <_dtoa_r+0x6c4>
 80051ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ec:	429d      	cmp	r5, r3
 80051ee:	d081      	beq.n	80050f4 <_dtoa_r+0x464>
 80051f0:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <_dtoa_r+0x624>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	4650      	mov	r0, sl
 80051f6:	4659      	mov	r1, fp
 80051f8:	f7fb f9fe 	bl	80005f8 <__aeabi_dmul>
 80051fc:	4b2d      	ldr	r3, [pc, #180]	; (80052b4 <_dtoa_r+0x624>)
 80051fe:	4682      	mov	sl, r0
 8005200:	468b      	mov	fp, r1
 8005202:	4640      	mov	r0, r8
 8005204:	4649      	mov	r1, r9
 8005206:	2200      	movs	r2, #0
 8005208:	f7fb f9f6 	bl	80005f8 <__aeabi_dmul>
 800520c:	4680      	mov	r8, r0
 800520e:	4689      	mov	r9, r1
 8005210:	e7c6      	b.n	80051a0 <_dtoa_r+0x510>
 8005212:	4650      	mov	r0, sl
 8005214:	4659      	mov	r1, fp
 8005216:	f7fb f9ef 	bl	80005f8 <__aeabi_dmul>
 800521a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800521c:	9d01      	ldr	r5, [sp, #4]
 800521e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005220:	4682      	mov	sl, r0
 8005222:	468b      	mov	fp, r1
 8005224:	4649      	mov	r1, r9
 8005226:	4640      	mov	r0, r8
 8005228:	f7fb fc96 	bl	8000b58 <__aeabi_d2iz>
 800522c:	4606      	mov	r6, r0
 800522e:	f7fb f979 	bl	8000524 <__aeabi_i2d>
 8005232:	3630      	adds	r6, #48	; 0x30
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb f824 	bl	8000288 <__aeabi_dsub>
 8005240:	f805 6b01 	strb.w	r6, [r5], #1
 8005244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005246:	429d      	cmp	r5, r3
 8005248:	4680      	mov	r8, r0
 800524a:	4689      	mov	r9, r1
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	d124      	bne.n	800529c <_dtoa_r+0x60c>
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <_dtoa_r+0x630>)
 8005254:	4650      	mov	r0, sl
 8005256:	4659      	mov	r1, fp
 8005258:	f7fb f818 	bl	800028c <__adddf3>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4640      	mov	r0, r8
 8005262:	4649      	mov	r1, r9
 8005264:	f7fb fc58 	bl	8000b18 <__aeabi_dcmpgt>
 8005268:	2800      	cmp	r0, #0
 800526a:	d173      	bne.n	8005354 <_dtoa_r+0x6c4>
 800526c:	4652      	mov	r2, sl
 800526e:	465b      	mov	r3, fp
 8005270:	4913      	ldr	r1, [pc, #76]	; (80052c0 <_dtoa_r+0x630>)
 8005272:	2000      	movs	r0, #0
 8005274:	f7fb f808 	bl	8000288 <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4640      	mov	r0, r8
 800527e:	4649      	mov	r1, r9
 8005280:	f7fb fc2c 	bl	8000adc <__aeabi_dcmplt>
 8005284:	2800      	cmp	r0, #0
 8005286:	f43f af35 	beq.w	80050f4 <_dtoa_r+0x464>
 800528a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800528c:	1e6b      	subs	r3, r5, #1
 800528e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005290:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d0f8      	beq.n	800528a <_dtoa_r+0x5fa>
 8005298:	9700      	str	r7, [sp, #0]
 800529a:	e049      	b.n	8005330 <_dtoa_r+0x6a0>
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <_dtoa_r+0x624>)
 800529e:	f7fb f9ab 	bl	80005f8 <__aeabi_dmul>
 80052a2:	4680      	mov	r8, r0
 80052a4:	4689      	mov	r9, r1
 80052a6:	e7bd      	b.n	8005224 <_dtoa_r+0x594>
 80052a8:	08006fb0 	.word	0x08006fb0
 80052ac:	08006f88 	.word	0x08006f88
 80052b0:	3ff00000 	.word	0x3ff00000
 80052b4:	40240000 	.word	0x40240000
 80052b8:	401c0000 	.word	0x401c0000
 80052bc:	40140000 	.word	0x40140000
 80052c0:	3fe00000 	.word	0x3fe00000
 80052c4:	9d01      	ldr	r5, [sp, #4]
 80052c6:	4656      	mov	r6, sl
 80052c8:	465f      	mov	r7, fp
 80052ca:	4642      	mov	r2, r8
 80052cc:	464b      	mov	r3, r9
 80052ce:	4630      	mov	r0, r6
 80052d0:	4639      	mov	r1, r7
 80052d2:	f7fb fabb 	bl	800084c <__aeabi_ddiv>
 80052d6:	f7fb fc3f 	bl	8000b58 <__aeabi_d2iz>
 80052da:	4682      	mov	sl, r0
 80052dc:	f7fb f922 	bl	8000524 <__aeabi_i2d>
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	f7fb f988 	bl	80005f8 <__aeabi_dmul>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4630      	mov	r0, r6
 80052ee:	4639      	mov	r1, r7
 80052f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80052f4:	f7fa ffc8 	bl	8000288 <__aeabi_dsub>
 80052f8:	f805 6b01 	strb.w	r6, [r5], #1
 80052fc:	9e01      	ldr	r6, [sp, #4]
 80052fe:	9f03      	ldr	r7, [sp, #12]
 8005300:	1bae      	subs	r6, r5, r6
 8005302:	42b7      	cmp	r7, r6
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	d135      	bne.n	8005376 <_dtoa_r+0x6e6>
 800530a:	f7fa ffbf 	bl	800028c <__adddf3>
 800530e:	4642      	mov	r2, r8
 8005310:	464b      	mov	r3, r9
 8005312:	4606      	mov	r6, r0
 8005314:	460f      	mov	r7, r1
 8005316:	f7fb fbff 	bl	8000b18 <__aeabi_dcmpgt>
 800531a:	b9d0      	cbnz	r0, 8005352 <_dtoa_r+0x6c2>
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005328:	b110      	cbz	r0, 8005330 <_dtoa_r+0x6a0>
 800532a:	f01a 0f01 	tst.w	sl, #1
 800532e:	d110      	bne.n	8005352 <_dtoa_r+0x6c2>
 8005330:	4620      	mov	r0, r4
 8005332:	ee18 1a10 	vmov	r1, s16
 8005336:	f000 fbed 	bl	8005b14 <_Bfree>
 800533a:	2300      	movs	r3, #0
 800533c:	9800      	ldr	r0, [sp, #0]
 800533e:	702b      	strb	r3, [r5, #0]
 8005340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005342:	3001      	adds	r0, #1
 8005344:	6018      	str	r0, [r3, #0]
 8005346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005348:	2b00      	cmp	r3, #0
 800534a:	f43f acf1 	beq.w	8004d30 <_dtoa_r+0xa0>
 800534e:	601d      	str	r5, [r3, #0]
 8005350:	e4ee      	b.n	8004d30 <_dtoa_r+0xa0>
 8005352:	9f00      	ldr	r7, [sp, #0]
 8005354:	462b      	mov	r3, r5
 8005356:	461d      	mov	r5, r3
 8005358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800535c:	2a39      	cmp	r2, #57	; 0x39
 800535e:	d106      	bne.n	800536e <_dtoa_r+0x6de>
 8005360:	9a01      	ldr	r2, [sp, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d1f7      	bne.n	8005356 <_dtoa_r+0x6c6>
 8005366:	9901      	ldr	r1, [sp, #4]
 8005368:	2230      	movs	r2, #48	; 0x30
 800536a:	3701      	adds	r7, #1
 800536c:	700a      	strb	r2, [r1, #0]
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	3201      	adds	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e790      	b.n	8005298 <_dtoa_r+0x608>
 8005376:	4ba6      	ldr	r3, [pc, #664]	; (8005610 <_dtoa_r+0x980>)
 8005378:	2200      	movs	r2, #0
 800537a:	f7fb f93d 	bl	80005f8 <__aeabi_dmul>
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	4606      	mov	r6, r0
 8005384:	460f      	mov	r7, r1
 8005386:	f7fb fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800538a:	2800      	cmp	r0, #0
 800538c:	d09d      	beq.n	80052ca <_dtoa_r+0x63a>
 800538e:	e7cf      	b.n	8005330 <_dtoa_r+0x6a0>
 8005390:	9a08      	ldr	r2, [sp, #32]
 8005392:	2a00      	cmp	r2, #0
 8005394:	f000 80d7 	beq.w	8005546 <_dtoa_r+0x8b6>
 8005398:	9a06      	ldr	r2, [sp, #24]
 800539a:	2a01      	cmp	r2, #1
 800539c:	f300 80ba 	bgt.w	8005514 <_dtoa_r+0x884>
 80053a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	f000 80b2 	beq.w	800550c <_dtoa_r+0x87c>
 80053a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ac:	9e07      	ldr	r6, [sp, #28]
 80053ae:	9d04      	ldr	r5, [sp, #16]
 80053b0:	9a04      	ldr	r2, [sp, #16]
 80053b2:	441a      	add	r2, r3
 80053b4:	9204      	str	r2, [sp, #16]
 80053b6:	9a05      	ldr	r2, [sp, #20]
 80053b8:	2101      	movs	r1, #1
 80053ba:	441a      	add	r2, r3
 80053bc:	4620      	mov	r0, r4
 80053be:	9205      	str	r2, [sp, #20]
 80053c0:	f000 fc60 	bl	8005c84 <__i2b>
 80053c4:	4607      	mov	r7, r0
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	dd0c      	ble.n	80053e4 <_dtoa_r+0x754>
 80053ca:	9b05      	ldr	r3, [sp, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dd09      	ble.n	80053e4 <_dtoa_r+0x754>
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	9a04      	ldr	r2, [sp, #16]
 80053d4:	bfa8      	it	ge
 80053d6:	462b      	movge	r3, r5
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	9204      	str	r2, [sp, #16]
 80053dc:	9a05      	ldr	r2, [sp, #20]
 80053de:	1aed      	subs	r5, r5, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	9b07      	ldr	r3, [sp, #28]
 80053e6:	b31b      	cbz	r3, 8005430 <_dtoa_r+0x7a0>
 80053e8:	9b08      	ldr	r3, [sp, #32]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80af 	beq.w	800554e <_dtoa_r+0x8be>
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	dd13      	ble.n	800541c <_dtoa_r+0x78c>
 80053f4:	4639      	mov	r1, r7
 80053f6:	4632      	mov	r2, r6
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fd03 	bl	8005e04 <__pow5mult>
 80053fe:	ee18 2a10 	vmov	r2, s16
 8005402:	4601      	mov	r1, r0
 8005404:	4607      	mov	r7, r0
 8005406:	4620      	mov	r0, r4
 8005408:	f000 fc52 	bl	8005cb0 <__multiply>
 800540c:	ee18 1a10 	vmov	r1, s16
 8005410:	4680      	mov	r8, r0
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fb7e 	bl	8005b14 <_Bfree>
 8005418:	ee08 8a10 	vmov	s16, r8
 800541c:	9b07      	ldr	r3, [sp, #28]
 800541e:	1b9a      	subs	r2, r3, r6
 8005420:	d006      	beq.n	8005430 <_dtoa_r+0x7a0>
 8005422:	ee18 1a10 	vmov	r1, s16
 8005426:	4620      	mov	r0, r4
 8005428:	f000 fcec 	bl	8005e04 <__pow5mult>
 800542c:	ee08 0a10 	vmov	s16, r0
 8005430:	2101      	movs	r1, #1
 8005432:	4620      	mov	r0, r4
 8005434:	f000 fc26 	bl	8005c84 <__i2b>
 8005438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	4606      	mov	r6, r0
 800543e:	f340 8088 	ble.w	8005552 <_dtoa_r+0x8c2>
 8005442:	461a      	mov	r2, r3
 8005444:	4601      	mov	r1, r0
 8005446:	4620      	mov	r0, r4
 8005448:	f000 fcdc 	bl	8005e04 <__pow5mult>
 800544c:	9b06      	ldr	r3, [sp, #24]
 800544e:	2b01      	cmp	r3, #1
 8005450:	4606      	mov	r6, r0
 8005452:	f340 8081 	ble.w	8005558 <_dtoa_r+0x8c8>
 8005456:	f04f 0800 	mov.w	r8, #0
 800545a:	6933      	ldr	r3, [r6, #16]
 800545c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005460:	6918      	ldr	r0, [r3, #16]
 8005462:	f000 fbbf 	bl	8005be4 <__hi0bits>
 8005466:	f1c0 0020 	rsb	r0, r0, #32
 800546a:	9b05      	ldr	r3, [sp, #20]
 800546c:	4418      	add	r0, r3
 800546e:	f010 001f 	ands.w	r0, r0, #31
 8005472:	f000 8092 	beq.w	800559a <_dtoa_r+0x90a>
 8005476:	f1c0 0320 	rsb	r3, r0, #32
 800547a:	2b04      	cmp	r3, #4
 800547c:	f340 808a 	ble.w	8005594 <_dtoa_r+0x904>
 8005480:	f1c0 001c 	rsb	r0, r0, #28
 8005484:	9b04      	ldr	r3, [sp, #16]
 8005486:	4403      	add	r3, r0
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	9b05      	ldr	r3, [sp, #20]
 800548c:	4403      	add	r3, r0
 800548e:	4405      	add	r5, r0
 8005490:	9305      	str	r3, [sp, #20]
 8005492:	9b04      	ldr	r3, [sp, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	dd07      	ble.n	80054a8 <_dtoa_r+0x818>
 8005498:	ee18 1a10 	vmov	r1, s16
 800549c:	461a      	mov	r2, r3
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 fd0a 	bl	8005eb8 <__lshift>
 80054a4:	ee08 0a10 	vmov	s16, r0
 80054a8:	9b05      	ldr	r3, [sp, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dd05      	ble.n	80054ba <_dtoa_r+0x82a>
 80054ae:	4631      	mov	r1, r6
 80054b0:	461a      	mov	r2, r3
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fd00 	bl	8005eb8 <__lshift>
 80054b8:	4606      	mov	r6, r0
 80054ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d06e      	beq.n	800559e <_dtoa_r+0x90e>
 80054c0:	ee18 0a10 	vmov	r0, s16
 80054c4:	4631      	mov	r1, r6
 80054c6:	f000 fd67 	bl	8005f98 <__mcmp>
 80054ca:	2800      	cmp	r0, #0
 80054cc:	da67      	bge.n	800559e <_dtoa_r+0x90e>
 80054ce:	9b00      	ldr	r3, [sp, #0]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	ee18 1a10 	vmov	r1, s16
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	220a      	movs	r2, #10
 80054da:	2300      	movs	r3, #0
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 fb3b 	bl	8005b58 <__multadd>
 80054e2:	9b08      	ldr	r3, [sp, #32]
 80054e4:	ee08 0a10 	vmov	s16, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 81b1 	beq.w	8005850 <_dtoa_r+0xbc0>
 80054ee:	2300      	movs	r3, #0
 80054f0:	4639      	mov	r1, r7
 80054f2:	220a      	movs	r2, #10
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fb2f 	bl	8005b58 <__multadd>
 80054fa:	9b02      	ldr	r3, [sp, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	4607      	mov	r7, r0
 8005500:	f300 808e 	bgt.w	8005620 <_dtoa_r+0x990>
 8005504:	9b06      	ldr	r3, [sp, #24]
 8005506:	2b02      	cmp	r3, #2
 8005508:	dc51      	bgt.n	80055ae <_dtoa_r+0x91e>
 800550a:	e089      	b.n	8005620 <_dtoa_r+0x990>
 800550c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800550e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005512:	e74b      	b.n	80053ac <_dtoa_r+0x71c>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	1e5e      	subs	r6, r3, #1
 8005518:	9b07      	ldr	r3, [sp, #28]
 800551a:	42b3      	cmp	r3, r6
 800551c:	bfbf      	itttt	lt
 800551e:	9b07      	ldrlt	r3, [sp, #28]
 8005520:	9607      	strlt	r6, [sp, #28]
 8005522:	1af2      	sublt	r2, r6, r3
 8005524:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005526:	bfb6      	itet	lt
 8005528:	189b      	addlt	r3, r3, r2
 800552a:	1b9e      	subge	r6, r3, r6
 800552c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	bfb8      	it	lt
 8005532:	2600      	movlt	r6, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfb7      	itett	lt
 8005538:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800553c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005540:	1a9d      	sublt	r5, r3, r2
 8005542:	2300      	movlt	r3, #0
 8005544:	e734      	b.n	80053b0 <_dtoa_r+0x720>
 8005546:	9e07      	ldr	r6, [sp, #28]
 8005548:	9d04      	ldr	r5, [sp, #16]
 800554a:	9f08      	ldr	r7, [sp, #32]
 800554c:	e73b      	b.n	80053c6 <_dtoa_r+0x736>
 800554e:	9a07      	ldr	r2, [sp, #28]
 8005550:	e767      	b.n	8005422 <_dtoa_r+0x792>
 8005552:	9b06      	ldr	r3, [sp, #24]
 8005554:	2b01      	cmp	r3, #1
 8005556:	dc18      	bgt.n	800558a <_dtoa_r+0x8fa>
 8005558:	f1ba 0f00 	cmp.w	sl, #0
 800555c:	d115      	bne.n	800558a <_dtoa_r+0x8fa>
 800555e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005562:	b993      	cbnz	r3, 800558a <_dtoa_r+0x8fa>
 8005564:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005568:	0d1b      	lsrs	r3, r3, #20
 800556a:	051b      	lsls	r3, r3, #20
 800556c:	b183      	cbz	r3, 8005590 <_dtoa_r+0x900>
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	3301      	adds	r3, #1
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	9b05      	ldr	r3, [sp, #20]
 8005576:	3301      	adds	r3, #1
 8005578:	9305      	str	r3, [sp, #20]
 800557a:	f04f 0801 	mov.w	r8, #1
 800557e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	f47f af6a 	bne.w	800545a <_dtoa_r+0x7ca>
 8005586:	2001      	movs	r0, #1
 8005588:	e76f      	b.n	800546a <_dtoa_r+0x7da>
 800558a:	f04f 0800 	mov.w	r8, #0
 800558e:	e7f6      	b.n	800557e <_dtoa_r+0x8ee>
 8005590:	4698      	mov	r8, r3
 8005592:	e7f4      	b.n	800557e <_dtoa_r+0x8ee>
 8005594:	f43f af7d 	beq.w	8005492 <_dtoa_r+0x802>
 8005598:	4618      	mov	r0, r3
 800559a:	301c      	adds	r0, #28
 800559c:	e772      	b.n	8005484 <_dtoa_r+0x7f4>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	dc37      	bgt.n	8005614 <_dtoa_r+0x984>
 80055a4:	9b06      	ldr	r3, [sp, #24]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	dd34      	ble.n	8005614 <_dtoa_r+0x984>
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	9302      	str	r3, [sp, #8]
 80055ae:	9b02      	ldr	r3, [sp, #8]
 80055b0:	b96b      	cbnz	r3, 80055ce <_dtoa_r+0x93e>
 80055b2:	4631      	mov	r1, r6
 80055b4:	2205      	movs	r2, #5
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 face 	bl	8005b58 <__multadd>
 80055bc:	4601      	mov	r1, r0
 80055be:	4606      	mov	r6, r0
 80055c0:	ee18 0a10 	vmov	r0, s16
 80055c4:	f000 fce8 	bl	8005f98 <__mcmp>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	f73f adbb 	bgt.w	8005144 <_dtoa_r+0x4b4>
 80055ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d0:	9d01      	ldr	r5, [sp, #4]
 80055d2:	43db      	mvns	r3, r3
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	f04f 0800 	mov.w	r8, #0
 80055da:	4631      	mov	r1, r6
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fa99 	bl	8005b14 <_Bfree>
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	f43f aea4 	beq.w	8005330 <_dtoa_r+0x6a0>
 80055e8:	f1b8 0f00 	cmp.w	r8, #0
 80055ec:	d005      	beq.n	80055fa <_dtoa_r+0x96a>
 80055ee:	45b8      	cmp	r8, r7
 80055f0:	d003      	beq.n	80055fa <_dtoa_r+0x96a>
 80055f2:	4641      	mov	r1, r8
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fa8d 	bl	8005b14 <_Bfree>
 80055fa:	4639      	mov	r1, r7
 80055fc:	4620      	mov	r0, r4
 80055fe:	f000 fa89 	bl	8005b14 <_Bfree>
 8005602:	e695      	b.n	8005330 <_dtoa_r+0x6a0>
 8005604:	2600      	movs	r6, #0
 8005606:	4637      	mov	r7, r6
 8005608:	e7e1      	b.n	80055ce <_dtoa_r+0x93e>
 800560a:	9700      	str	r7, [sp, #0]
 800560c:	4637      	mov	r7, r6
 800560e:	e599      	b.n	8005144 <_dtoa_r+0x4b4>
 8005610:	40240000 	.word	0x40240000
 8005614:	9b08      	ldr	r3, [sp, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80ca 	beq.w	80057b0 <_dtoa_r+0xb20>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	2d00      	cmp	r5, #0
 8005622:	dd05      	ble.n	8005630 <_dtoa_r+0x9a0>
 8005624:	4639      	mov	r1, r7
 8005626:	462a      	mov	r2, r5
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fc45 	bl	8005eb8 <__lshift>
 800562e:	4607      	mov	r7, r0
 8005630:	f1b8 0f00 	cmp.w	r8, #0
 8005634:	d05b      	beq.n	80056ee <_dtoa_r+0xa5e>
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4620      	mov	r0, r4
 800563a:	f000 fa2b 	bl	8005a94 <_Balloc>
 800563e:	4605      	mov	r5, r0
 8005640:	b928      	cbnz	r0, 800564e <_dtoa_r+0x9be>
 8005642:	4b87      	ldr	r3, [pc, #540]	; (8005860 <_dtoa_r+0xbd0>)
 8005644:	4602      	mov	r2, r0
 8005646:	f240 21ea 	movw	r1, #746	; 0x2ea
 800564a:	f7ff bb3b 	b.w	8004cc4 <_dtoa_r+0x34>
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	3202      	adds	r2, #2
 8005652:	0092      	lsls	r2, r2, #2
 8005654:	f107 010c 	add.w	r1, r7, #12
 8005658:	300c      	adds	r0, #12
 800565a:	f000 fa0d 	bl	8005a78 <memcpy>
 800565e:	2201      	movs	r2, #1
 8005660:	4629      	mov	r1, r5
 8005662:	4620      	mov	r0, r4
 8005664:	f000 fc28 	bl	8005eb8 <__lshift>
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	f103 0901 	add.w	r9, r3, #1
 800566e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005672:	4413      	add	r3, r2
 8005674:	9305      	str	r3, [sp, #20]
 8005676:	f00a 0301 	and.w	r3, sl, #1
 800567a:	46b8      	mov	r8, r7
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	4607      	mov	r7, r0
 8005680:	4631      	mov	r1, r6
 8005682:	ee18 0a10 	vmov	r0, s16
 8005686:	f7ff fa75 	bl	8004b74 <quorem>
 800568a:	4641      	mov	r1, r8
 800568c:	9002      	str	r0, [sp, #8]
 800568e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005692:	ee18 0a10 	vmov	r0, s16
 8005696:	f000 fc7f 	bl	8005f98 <__mcmp>
 800569a:	463a      	mov	r2, r7
 800569c:	9003      	str	r0, [sp, #12]
 800569e:	4631      	mov	r1, r6
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fc95 	bl	8005fd0 <__mdiff>
 80056a6:	68c2      	ldr	r2, [r0, #12]
 80056a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80056ac:	4605      	mov	r5, r0
 80056ae:	bb02      	cbnz	r2, 80056f2 <_dtoa_r+0xa62>
 80056b0:	4601      	mov	r1, r0
 80056b2:	ee18 0a10 	vmov	r0, s16
 80056b6:	f000 fc6f 	bl	8005f98 <__mcmp>
 80056ba:	4602      	mov	r2, r0
 80056bc:	4629      	mov	r1, r5
 80056be:	4620      	mov	r0, r4
 80056c0:	9207      	str	r2, [sp, #28]
 80056c2:	f000 fa27 	bl	8005b14 <_Bfree>
 80056c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80056ca:	ea43 0102 	orr.w	r1, r3, r2
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	464d      	mov	r5, r9
 80056d4:	d10f      	bne.n	80056f6 <_dtoa_r+0xa66>
 80056d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056da:	d02a      	beq.n	8005732 <_dtoa_r+0xaa2>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dd02      	ble.n	80056e8 <_dtoa_r+0xa58>
 80056e2:	9b02      	ldr	r3, [sp, #8]
 80056e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80056e8:	f88b a000 	strb.w	sl, [fp]
 80056ec:	e775      	b.n	80055da <_dtoa_r+0x94a>
 80056ee:	4638      	mov	r0, r7
 80056f0:	e7ba      	b.n	8005668 <_dtoa_r+0x9d8>
 80056f2:	2201      	movs	r2, #1
 80056f4:	e7e2      	b.n	80056bc <_dtoa_r+0xa2c>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db04      	blt.n	8005706 <_dtoa_r+0xa76>
 80056fc:	9906      	ldr	r1, [sp, #24]
 80056fe:	430b      	orrs	r3, r1
 8005700:	9904      	ldr	r1, [sp, #16]
 8005702:	430b      	orrs	r3, r1
 8005704:	d122      	bne.n	800574c <_dtoa_r+0xabc>
 8005706:	2a00      	cmp	r2, #0
 8005708:	ddee      	ble.n	80056e8 <_dtoa_r+0xa58>
 800570a:	ee18 1a10 	vmov	r1, s16
 800570e:	2201      	movs	r2, #1
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fbd1 	bl	8005eb8 <__lshift>
 8005716:	4631      	mov	r1, r6
 8005718:	ee08 0a10 	vmov	s16, r0
 800571c:	f000 fc3c 	bl	8005f98 <__mcmp>
 8005720:	2800      	cmp	r0, #0
 8005722:	dc03      	bgt.n	800572c <_dtoa_r+0xa9c>
 8005724:	d1e0      	bne.n	80056e8 <_dtoa_r+0xa58>
 8005726:	f01a 0f01 	tst.w	sl, #1
 800572a:	d0dd      	beq.n	80056e8 <_dtoa_r+0xa58>
 800572c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005730:	d1d7      	bne.n	80056e2 <_dtoa_r+0xa52>
 8005732:	2339      	movs	r3, #57	; 0x39
 8005734:	f88b 3000 	strb.w	r3, [fp]
 8005738:	462b      	mov	r3, r5
 800573a:	461d      	mov	r5, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005742:	2a39      	cmp	r2, #57	; 0x39
 8005744:	d071      	beq.n	800582a <_dtoa_r+0xb9a>
 8005746:	3201      	adds	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e746      	b.n	80055da <_dtoa_r+0x94a>
 800574c:	2a00      	cmp	r2, #0
 800574e:	dd07      	ble.n	8005760 <_dtoa_r+0xad0>
 8005750:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005754:	d0ed      	beq.n	8005732 <_dtoa_r+0xaa2>
 8005756:	f10a 0301 	add.w	r3, sl, #1
 800575a:	f88b 3000 	strb.w	r3, [fp]
 800575e:	e73c      	b.n	80055da <_dtoa_r+0x94a>
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005766:	4599      	cmp	r9, r3
 8005768:	d047      	beq.n	80057fa <_dtoa_r+0xb6a>
 800576a:	ee18 1a10 	vmov	r1, s16
 800576e:	2300      	movs	r3, #0
 8005770:	220a      	movs	r2, #10
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f9f0 	bl	8005b58 <__multadd>
 8005778:	45b8      	cmp	r8, r7
 800577a:	ee08 0a10 	vmov	s16, r0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	f04f 020a 	mov.w	r2, #10
 8005786:	4641      	mov	r1, r8
 8005788:	4620      	mov	r0, r4
 800578a:	d106      	bne.n	800579a <_dtoa_r+0xb0a>
 800578c:	f000 f9e4 	bl	8005b58 <__multadd>
 8005790:	4680      	mov	r8, r0
 8005792:	4607      	mov	r7, r0
 8005794:	f109 0901 	add.w	r9, r9, #1
 8005798:	e772      	b.n	8005680 <_dtoa_r+0x9f0>
 800579a:	f000 f9dd 	bl	8005b58 <__multadd>
 800579e:	4639      	mov	r1, r7
 80057a0:	4680      	mov	r8, r0
 80057a2:	2300      	movs	r3, #0
 80057a4:	220a      	movs	r2, #10
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 f9d6 	bl	8005b58 <__multadd>
 80057ac:	4607      	mov	r7, r0
 80057ae:	e7f1      	b.n	8005794 <_dtoa_r+0xb04>
 80057b0:	9b03      	ldr	r3, [sp, #12]
 80057b2:	9302      	str	r3, [sp, #8]
 80057b4:	9d01      	ldr	r5, [sp, #4]
 80057b6:	ee18 0a10 	vmov	r0, s16
 80057ba:	4631      	mov	r1, r6
 80057bc:	f7ff f9da 	bl	8004b74 <quorem>
 80057c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80057c4:	9b01      	ldr	r3, [sp, #4]
 80057c6:	f805 ab01 	strb.w	sl, [r5], #1
 80057ca:	1aea      	subs	r2, r5, r3
 80057cc:	9b02      	ldr	r3, [sp, #8]
 80057ce:	4293      	cmp	r3, r2
 80057d0:	dd09      	ble.n	80057e6 <_dtoa_r+0xb56>
 80057d2:	ee18 1a10 	vmov	r1, s16
 80057d6:	2300      	movs	r3, #0
 80057d8:	220a      	movs	r2, #10
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f9bc 	bl	8005b58 <__multadd>
 80057e0:	ee08 0a10 	vmov	s16, r0
 80057e4:	e7e7      	b.n	80057b6 <_dtoa_r+0xb26>
 80057e6:	9b02      	ldr	r3, [sp, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bfc8      	it	gt
 80057ec:	461d      	movgt	r5, r3
 80057ee:	9b01      	ldr	r3, [sp, #4]
 80057f0:	bfd8      	it	le
 80057f2:	2501      	movle	r5, #1
 80057f4:	441d      	add	r5, r3
 80057f6:	f04f 0800 	mov.w	r8, #0
 80057fa:	ee18 1a10 	vmov	r1, s16
 80057fe:	2201      	movs	r2, #1
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fb59 	bl	8005eb8 <__lshift>
 8005806:	4631      	mov	r1, r6
 8005808:	ee08 0a10 	vmov	s16, r0
 800580c:	f000 fbc4 	bl	8005f98 <__mcmp>
 8005810:	2800      	cmp	r0, #0
 8005812:	dc91      	bgt.n	8005738 <_dtoa_r+0xaa8>
 8005814:	d102      	bne.n	800581c <_dtoa_r+0xb8c>
 8005816:	f01a 0f01 	tst.w	sl, #1
 800581a:	d18d      	bne.n	8005738 <_dtoa_r+0xaa8>
 800581c:	462b      	mov	r3, r5
 800581e:	461d      	mov	r5, r3
 8005820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005824:	2a30      	cmp	r2, #48	; 0x30
 8005826:	d0fa      	beq.n	800581e <_dtoa_r+0xb8e>
 8005828:	e6d7      	b.n	80055da <_dtoa_r+0x94a>
 800582a:	9a01      	ldr	r2, [sp, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d184      	bne.n	800573a <_dtoa_r+0xaaa>
 8005830:	9b00      	ldr	r3, [sp, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	2331      	movs	r3, #49	; 0x31
 8005838:	7013      	strb	r3, [r2, #0]
 800583a:	e6ce      	b.n	80055da <_dtoa_r+0x94a>
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <_dtoa_r+0xbd4>)
 800583e:	f7ff ba95 	b.w	8004d6c <_dtoa_r+0xdc>
 8005842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005844:	2b00      	cmp	r3, #0
 8005846:	f47f aa6e 	bne.w	8004d26 <_dtoa_r+0x96>
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_dtoa_r+0xbd8>)
 800584c:	f7ff ba8e 	b.w	8004d6c <_dtoa_r+0xdc>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	dcae      	bgt.n	80057b4 <_dtoa_r+0xb24>
 8005856:	9b06      	ldr	r3, [sp, #24]
 8005858:	2b02      	cmp	r3, #2
 800585a:	f73f aea8 	bgt.w	80055ae <_dtoa_r+0x91e>
 800585e:	e7a9      	b.n	80057b4 <_dtoa_r+0xb24>
 8005860:	08006ebb 	.word	0x08006ebb
 8005864:	08006e18 	.word	0x08006e18
 8005868:	08006e3c 	.word	0x08006e3c

0800586c <std>:
 800586c:	2300      	movs	r3, #0
 800586e:	b510      	push	{r4, lr}
 8005870:	4604      	mov	r4, r0
 8005872:	e9c0 3300 	strd	r3, r3, [r0]
 8005876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800587a:	6083      	str	r3, [r0, #8]
 800587c:	8181      	strh	r1, [r0, #12]
 800587e:	6643      	str	r3, [r0, #100]	; 0x64
 8005880:	81c2      	strh	r2, [r0, #14]
 8005882:	6183      	str	r3, [r0, #24]
 8005884:	4619      	mov	r1, r3
 8005886:	2208      	movs	r2, #8
 8005888:	305c      	adds	r0, #92	; 0x5c
 800588a:	f7fe fcd3 	bl	8004234 <memset>
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <std+0x38>)
 8005890:	6263      	str	r3, [r4, #36]	; 0x24
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <std+0x3c>)
 8005894:	62a3      	str	r3, [r4, #40]	; 0x28
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <std+0x40>)
 8005898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <std+0x44>)
 800589c:	6224      	str	r4, [r4, #32]
 800589e:	6323      	str	r3, [r4, #48]	; 0x30
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	080066ed 	.word	0x080066ed
 80058a8:	0800670f 	.word	0x0800670f
 80058ac:	08006747 	.word	0x08006747
 80058b0:	0800676b 	.word	0x0800676b

080058b4 <_cleanup_r>:
 80058b4:	4901      	ldr	r1, [pc, #4]	; (80058bc <_cleanup_r+0x8>)
 80058b6:	f000 b8af 	b.w	8005a18 <_fwalk_reent>
 80058ba:	bf00      	nop
 80058bc:	08006a81 	.word	0x08006a81

080058c0 <__sfmoreglue>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	2268      	movs	r2, #104	; 0x68
 80058c4:	1e4d      	subs	r5, r1, #1
 80058c6:	4355      	muls	r5, r2
 80058c8:	460e      	mov	r6, r1
 80058ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058ce:	f000 fce7 	bl	80062a0 <_malloc_r>
 80058d2:	4604      	mov	r4, r0
 80058d4:	b140      	cbz	r0, 80058e8 <__sfmoreglue+0x28>
 80058d6:	2100      	movs	r1, #0
 80058d8:	e9c0 1600 	strd	r1, r6, [r0]
 80058dc:	300c      	adds	r0, #12
 80058de:	60a0      	str	r0, [r4, #8]
 80058e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058e4:	f7fe fca6 	bl	8004234 <memset>
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}

080058ec <__sfp_lock_acquire>:
 80058ec:	4801      	ldr	r0, [pc, #4]	; (80058f4 <__sfp_lock_acquire+0x8>)
 80058ee:	f000 b8b8 	b.w	8005a62 <__retarget_lock_acquire_recursive>
 80058f2:	bf00      	nop
 80058f4:	20000309 	.word	0x20000309

080058f8 <__sfp_lock_release>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__sfp_lock_release+0x8>)
 80058fa:	f000 b8b3 	b.w	8005a64 <__retarget_lock_release_recursive>
 80058fe:	bf00      	nop
 8005900:	20000309 	.word	0x20000309

08005904 <__sinit_lock_acquire>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sinit_lock_acquire+0x8>)
 8005906:	f000 b8ac 	b.w	8005a62 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	2000030a 	.word	0x2000030a

08005910 <__sinit_lock_release>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sinit_lock_release+0x8>)
 8005912:	f000 b8a7 	b.w	8005a64 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	2000030a 	.word	0x2000030a

0800591c <__sinit>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4604      	mov	r4, r0
 8005920:	f7ff fff0 	bl	8005904 <__sinit_lock_acquire>
 8005924:	69a3      	ldr	r3, [r4, #24]
 8005926:	b11b      	cbz	r3, 8005930 <__sinit+0x14>
 8005928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800592c:	f7ff bff0 	b.w	8005910 <__sinit_lock_release>
 8005930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005934:	6523      	str	r3, [r4, #80]	; 0x50
 8005936:	4b13      	ldr	r3, [pc, #76]	; (8005984 <__sinit+0x68>)
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <__sinit+0x6c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	62a2      	str	r2, [r4, #40]	; 0x28
 800593e:	42a3      	cmp	r3, r4
 8005940:	bf04      	itt	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	61a3      	streq	r3, [r4, #24]
 8005946:	4620      	mov	r0, r4
 8005948:	f000 f820 	bl	800598c <__sfp>
 800594c:	6060      	str	r0, [r4, #4]
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f81c 	bl	800598c <__sfp>
 8005954:	60a0      	str	r0, [r4, #8]
 8005956:	4620      	mov	r0, r4
 8005958:	f000 f818 	bl	800598c <__sfp>
 800595c:	2200      	movs	r2, #0
 800595e:	60e0      	str	r0, [r4, #12]
 8005960:	2104      	movs	r1, #4
 8005962:	6860      	ldr	r0, [r4, #4]
 8005964:	f7ff ff82 	bl	800586c <std>
 8005968:	68a0      	ldr	r0, [r4, #8]
 800596a:	2201      	movs	r2, #1
 800596c:	2109      	movs	r1, #9
 800596e:	f7ff ff7d 	bl	800586c <std>
 8005972:	68e0      	ldr	r0, [r4, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	2112      	movs	r1, #18
 8005978:	f7ff ff78 	bl	800586c <std>
 800597c:	2301      	movs	r3, #1
 800597e:	61a3      	str	r3, [r4, #24]
 8005980:	e7d2      	b.n	8005928 <__sinit+0xc>
 8005982:	bf00      	nop
 8005984:	08006e04 	.word	0x08006e04
 8005988:	080058b5 	.word	0x080058b5

0800598c <__sfp>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	4607      	mov	r7, r0
 8005990:	f7ff ffac 	bl	80058ec <__sfp_lock_acquire>
 8005994:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <__sfp+0x84>)
 8005996:	681e      	ldr	r6, [r3, #0]
 8005998:	69b3      	ldr	r3, [r6, #24]
 800599a:	b913      	cbnz	r3, 80059a2 <__sfp+0x16>
 800599c:	4630      	mov	r0, r6
 800599e:	f7ff ffbd 	bl	800591c <__sinit>
 80059a2:	3648      	adds	r6, #72	; 0x48
 80059a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	d503      	bpl.n	80059b4 <__sfp+0x28>
 80059ac:	6833      	ldr	r3, [r6, #0]
 80059ae:	b30b      	cbz	r3, 80059f4 <__sfp+0x68>
 80059b0:	6836      	ldr	r6, [r6, #0]
 80059b2:	e7f7      	b.n	80059a4 <__sfp+0x18>
 80059b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059b8:	b9d5      	cbnz	r5, 80059f0 <__sfp+0x64>
 80059ba:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <__sfp+0x88>)
 80059bc:	60e3      	str	r3, [r4, #12]
 80059be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059c2:	6665      	str	r5, [r4, #100]	; 0x64
 80059c4:	f000 f84c 	bl	8005a60 <__retarget_lock_init_recursive>
 80059c8:	f7ff ff96 	bl	80058f8 <__sfp_lock_release>
 80059cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059d4:	6025      	str	r5, [r4, #0]
 80059d6:	61a5      	str	r5, [r4, #24]
 80059d8:	2208      	movs	r2, #8
 80059da:	4629      	mov	r1, r5
 80059dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059e0:	f7fe fc28 	bl	8004234 <memset>
 80059e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059ec:	4620      	mov	r0, r4
 80059ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f0:	3468      	adds	r4, #104	; 0x68
 80059f2:	e7d9      	b.n	80059a8 <__sfp+0x1c>
 80059f4:	2104      	movs	r1, #4
 80059f6:	4638      	mov	r0, r7
 80059f8:	f7ff ff62 	bl	80058c0 <__sfmoreglue>
 80059fc:	4604      	mov	r4, r0
 80059fe:	6030      	str	r0, [r6, #0]
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d1d5      	bne.n	80059b0 <__sfp+0x24>
 8005a04:	f7ff ff78 	bl	80058f8 <__sfp_lock_release>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	e7ee      	b.n	80059ec <__sfp+0x60>
 8005a0e:	bf00      	nop
 8005a10:	08006e04 	.word	0x08006e04
 8005a14:	ffff0001 	.word	0xffff0001

08005a18 <_fwalk_reent>:
 8005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	4688      	mov	r8, r1
 8005a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a24:	2700      	movs	r7, #0
 8005a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a2e:	d505      	bpl.n	8005a3c <_fwalk_reent+0x24>
 8005a30:	6824      	ldr	r4, [r4, #0]
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	d1f7      	bne.n	8005a26 <_fwalk_reent+0xe>
 8005a36:	4638      	mov	r0, r7
 8005a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3c:	89ab      	ldrh	r3, [r5, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d907      	bls.n	8005a52 <_fwalk_reent+0x3a>
 8005a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a46:	3301      	adds	r3, #1
 8005a48:	d003      	beq.n	8005a52 <_fwalk_reent+0x3a>
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	47c0      	blx	r8
 8005a50:	4307      	orrs	r7, r0
 8005a52:	3568      	adds	r5, #104	; 0x68
 8005a54:	e7e9      	b.n	8005a2a <_fwalk_reent+0x12>
	...

08005a58 <_localeconv_r>:
 8005a58:	4800      	ldr	r0, [pc, #0]	; (8005a5c <_localeconv_r+0x4>)
 8005a5a:	4770      	bx	lr
 8005a5c:	20000160 	.word	0x20000160

08005a60 <__retarget_lock_init_recursive>:
 8005a60:	4770      	bx	lr

08005a62 <__retarget_lock_acquire_recursive>:
 8005a62:	4770      	bx	lr

08005a64 <__retarget_lock_release_recursive>:
 8005a64:	4770      	bx	lr
	...

08005a68 <malloc>:
 8005a68:	4b02      	ldr	r3, [pc, #8]	; (8005a74 <malloc+0xc>)
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	f000 bc17 	b.w	80062a0 <_malloc_r>
 8005a72:	bf00      	nop
 8005a74:	2000000c 	.word	0x2000000c

08005a78 <memcpy>:
 8005a78:	440a      	add	r2, r1
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a80:	d100      	bne.n	8005a84 <memcpy+0xc>
 8005a82:	4770      	bx	lr
 8005a84:	b510      	push	{r4, lr}
 8005a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a8e:	4291      	cmp	r1, r2
 8005a90:	d1f9      	bne.n	8005a86 <memcpy+0xe>
 8005a92:	bd10      	pop	{r4, pc}

08005a94 <_Balloc>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	b976      	cbnz	r6, 8005abc <_Balloc+0x28>
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff ffe2 	bl	8005a68 <malloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6260      	str	r0, [r4, #36]	; 0x24
 8005aa8:	b920      	cbnz	r0, 8005ab4 <_Balloc+0x20>
 8005aaa:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <_Balloc+0x78>)
 8005aac:	4818      	ldr	r0, [pc, #96]	; (8005b10 <_Balloc+0x7c>)
 8005aae:	2166      	movs	r1, #102	; 0x66
 8005ab0:	f000 ff32 	bl	8006918 <__assert_func>
 8005ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab8:	6006      	str	r6, [r0, #0]
 8005aba:	60c6      	str	r6, [r0, #12]
 8005abc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005abe:	68f3      	ldr	r3, [r6, #12]
 8005ac0:	b183      	cbz	r3, 8005ae4 <_Balloc+0x50>
 8005ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aca:	b9b8      	cbnz	r0, 8005afc <_Balloc+0x68>
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f605 	lsl.w	r6, r1, r5
 8005ad2:	1d72      	adds	r2, r6, #5
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 fb60 	bl	800619c <_calloc_r>
 8005adc:	b160      	cbz	r0, 8005af8 <_Balloc+0x64>
 8005ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ae2:	e00e      	b.n	8005b02 <_Balloc+0x6e>
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fb57 	bl	800619c <_calloc_r>
 8005aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af0:	60f0      	str	r0, [r6, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e4      	bne.n	8005ac2 <_Balloc+0x2e>
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b02:	2300      	movs	r3, #0
 8005b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b08:	e7f7      	b.n	8005afa <_Balloc+0x66>
 8005b0a:	bf00      	nop
 8005b0c:	08006e49 	.word	0x08006e49
 8005b10:	08006f2c 	.word	0x08006f2c

08005b14 <_Bfree>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b976      	cbnz	r6, 8005b3c <_Bfree+0x28>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f7ff ffa2 	bl	8005a68 <malloc>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6268      	str	r0, [r5, #36]	; 0x24
 8005b28:	b920      	cbnz	r0, 8005b34 <_Bfree+0x20>
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <_Bfree+0x3c>)
 8005b2c:	4809      	ldr	r0, [pc, #36]	; (8005b54 <_Bfree+0x40>)
 8005b2e:	218a      	movs	r1, #138	; 0x8a
 8005b30:	f000 fef2 	bl	8006918 <__assert_func>
 8005b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b38:	6006      	str	r6, [r0, #0]
 8005b3a:	60c6      	str	r6, [r0, #12]
 8005b3c:	b13c      	cbz	r4, 8005b4e <_Bfree+0x3a>
 8005b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b48:	6021      	str	r1, [r4, #0]
 8005b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	08006e49 	.word	0x08006e49
 8005b54:	08006f2c 	.word	0x08006f2c

08005b58 <__multadd>:
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	690d      	ldr	r5, [r1, #16]
 8005b5e:	4607      	mov	r7, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	461e      	mov	r6, r3
 8005b64:	f101 0c14 	add.w	ip, r1, #20
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	fb02 6101 	mla	r1, r2, r1, r6
 8005b74:	0c1e      	lsrs	r6, r3, #16
 8005b76:	0c0b      	lsrs	r3, r1, #16
 8005b78:	fb02 3306 	mla	r3, r2, r6, r3
 8005b7c:	b289      	uxth	r1, r1
 8005b7e:	3001      	adds	r0, #1
 8005b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b84:	4285      	cmp	r5, r0
 8005b86:	f84c 1b04 	str.w	r1, [ip], #4
 8005b8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b8e:	dcec      	bgt.n	8005b6a <__multadd+0x12>
 8005b90:	b30e      	cbz	r6, 8005bd6 <__multadd+0x7e>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc19      	bgt.n	8005bcc <__multadd+0x74>
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	f7ff ff79 	bl	8005a94 <_Balloc>
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__multadd+0x5a>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <__multadd+0x84>)
 8005baa:	480d      	ldr	r0, [pc, #52]	; (8005be0 <__multadd+0x88>)
 8005bac:	21b5      	movs	r1, #181	; 0xb5
 8005bae:	f000 feb3 	bl	8006918 <__assert_func>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	f104 010c 	add.w	r1, r4, #12
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f7ff ff5b 	bl	8005a78 <memcpy>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ffa5 	bl	8005b14 <_Bfree>
 8005bca:	4644      	mov	r4, r8
 8005bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	615e      	str	r6, [r3, #20]
 8005bd4:	6125      	str	r5, [r4, #16]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	08006ebb 	.word	0x08006ebb
 8005be0:	08006f2c 	.word	0x08006f2c

08005be4 <__hi0bits>:
 8005be4:	0c03      	lsrs	r3, r0, #16
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	b9d3      	cbnz	r3, 8005c20 <__hi0bits+0x3c>
 8005bea:	0400      	lsls	r0, r0, #16
 8005bec:	2310      	movs	r3, #16
 8005bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bf2:	bf04      	itt	eq
 8005bf4:	0200      	lsleq	r0, r0, #8
 8005bf6:	3308      	addeq	r3, #8
 8005bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bfc:	bf04      	itt	eq
 8005bfe:	0100      	lsleq	r0, r0, #4
 8005c00:	3304      	addeq	r3, #4
 8005c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c06:	bf04      	itt	eq
 8005c08:	0080      	lsleq	r0, r0, #2
 8005c0a:	3302      	addeq	r3, #2
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	db05      	blt.n	8005c1c <__hi0bits+0x38>
 8005c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c14:	f103 0301 	add.w	r3, r3, #1
 8005c18:	bf08      	it	eq
 8005c1a:	2320      	moveq	r3, #32
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	4770      	bx	lr
 8005c20:	2300      	movs	r3, #0
 8005c22:	e7e4      	b.n	8005bee <__hi0bits+0xa>

08005c24 <__lo0bits>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	f013 0207 	ands.w	r2, r3, #7
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	d00b      	beq.n	8005c46 <__lo0bits+0x22>
 8005c2e:	07da      	lsls	r2, r3, #31
 8005c30:	d423      	bmi.n	8005c7a <__lo0bits+0x56>
 8005c32:	0798      	lsls	r0, r3, #30
 8005c34:	bf49      	itett	mi
 8005c36:	085b      	lsrmi	r3, r3, #1
 8005c38:	089b      	lsrpl	r3, r3, #2
 8005c3a:	2001      	movmi	r0, #1
 8005c3c:	600b      	strmi	r3, [r1, #0]
 8005c3e:	bf5c      	itt	pl
 8005c40:	600b      	strpl	r3, [r1, #0]
 8005c42:	2002      	movpl	r0, #2
 8005c44:	4770      	bx	lr
 8005c46:	b298      	uxth	r0, r3
 8005c48:	b9a8      	cbnz	r0, 8005c76 <__lo0bits+0x52>
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	b90a      	cbnz	r2, 8005c56 <__lo0bits+0x32>
 8005c52:	3008      	adds	r0, #8
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	071a      	lsls	r2, r3, #28
 8005c58:	bf04      	itt	eq
 8005c5a:	091b      	lsreq	r3, r3, #4
 8005c5c:	3004      	addeq	r0, #4
 8005c5e:	079a      	lsls	r2, r3, #30
 8005c60:	bf04      	itt	eq
 8005c62:	089b      	lsreq	r3, r3, #2
 8005c64:	3002      	addeq	r0, #2
 8005c66:	07da      	lsls	r2, r3, #31
 8005c68:	d403      	bmi.n	8005c72 <__lo0bits+0x4e>
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f100 0001 	add.w	r0, r0, #1
 8005c70:	d005      	beq.n	8005c7e <__lo0bits+0x5a>
 8005c72:	600b      	str	r3, [r1, #0]
 8005c74:	4770      	bx	lr
 8005c76:	4610      	mov	r0, r2
 8005c78:	e7e9      	b.n	8005c4e <__lo0bits+0x2a>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	4770      	bx	lr
 8005c7e:	2020      	movs	r0, #32
 8005c80:	4770      	bx	lr
	...

08005c84 <__i2b>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	2101      	movs	r1, #1
 8005c8a:	f7ff ff03 	bl	8005a94 <_Balloc>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	b928      	cbnz	r0, 8005c9e <__i2b+0x1a>
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <__i2b+0x24>)
 8005c94:	4805      	ldr	r0, [pc, #20]	; (8005cac <__i2b+0x28>)
 8005c96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c9a:	f000 fe3d 	bl	8006918 <__assert_func>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	6144      	str	r4, [r0, #20]
 8005ca2:	6103      	str	r3, [r0, #16]
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	bf00      	nop
 8005ca8:	08006ebb 	.word	0x08006ebb
 8005cac:	08006f2c 	.word	0x08006f2c

08005cb0 <__multiply>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4691      	mov	r9, r2
 8005cb6:	690a      	ldr	r2, [r1, #16]
 8005cb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bfb8      	it	lt
 8005cc0:	460b      	movlt	r3, r1
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	bfbc      	itt	lt
 8005cc6:	464c      	movlt	r4, r9
 8005cc8:	4699      	movlt	r9, r3
 8005cca:	6927      	ldr	r7, [r4, #16]
 8005ccc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cd0:	68a3      	ldr	r3, [r4, #8]
 8005cd2:	6861      	ldr	r1, [r4, #4]
 8005cd4:	eb07 060a 	add.w	r6, r7, sl
 8005cd8:	42b3      	cmp	r3, r6
 8005cda:	b085      	sub	sp, #20
 8005cdc:	bfb8      	it	lt
 8005cde:	3101      	addlt	r1, #1
 8005ce0:	f7ff fed8 	bl	8005a94 <_Balloc>
 8005ce4:	b930      	cbnz	r0, 8005cf4 <__multiply+0x44>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b44      	ldr	r3, [pc, #272]	; (8005dfc <__multiply+0x14c>)
 8005cea:	4845      	ldr	r0, [pc, #276]	; (8005e00 <__multiply+0x150>)
 8005cec:	f240 115d 	movw	r1, #349	; 0x15d
 8005cf0:	f000 fe12 	bl	8006918 <__assert_func>
 8005cf4:	f100 0514 	add.w	r5, r0, #20
 8005cf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4543      	cmp	r3, r8
 8005d02:	d321      	bcc.n	8005d48 <__multiply+0x98>
 8005d04:	f104 0314 	add.w	r3, r4, #20
 8005d08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d0c:	f109 0314 	add.w	r3, r9, #20
 8005d10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d14:	9202      	str	r2, [sp, #8]
 8005d16:	1b3a      	subs	r2, r7, r4
 8005d18:	3a15      	subs	r2, #21
 8005d1a:	f022 0203 	bic.w	r2, r2, #3
 8005d1e:	3204      	adds	r2, #4
 8005d20:	f104 0115 	add.w	r1, r4, #21
 8005d24:	428f      	cmp	r7, r1
 8005d26:	bf38      	it	cc
 8005d28:	2204      	movcc	r2, #4
 8005d2a:	9201      	str	r2, [sp, #4]
 8005d2c:	9a02      	ldr	r2, [sp, #8]
 8005d2e:	9303      	str	r3, [sp, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d80c      	bhi.n	8005d4e <__multiply+0x9e>
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	dd03      	ble.n	8005d40 <__multiply+0x90>
 8005d38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d05a      	beq.n	8005df6 <__multiply+0x146>
 8005d40:	6106      	str	r6, [r0, #16]
 8005d42:	b005      	add	sp, #20
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	f843 2b04 	str.w	r2, [r3], #4
 8005d4c:	e7d8      	b.n	8005d00 <__multiply+0x50>
 8005d4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d52:	f1ba 0f00 	cmp.w	sl, #0
 8005d56:	d024      	beq.n	8005da2 <__multiply+0xf2>
 8005d58:	f104 0e14 	add.w	lr, r4, #20
 8005d5c:	46a9      	mov	r9, r5
 8005d5e:	f04f 0c00 	mov.w	ip, #0
 8005d62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d66:	f8d9 1000 	ldr.w	r1, [r9]
 8005d6a:	fa1f fb82 	uxth.w	fp, r2
 8005d6e:	b289      	uxth	r1, r1
 8005d70:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d78:	f8d9 2000 	ldr.w	r2, [r9]
 8005d7c:	4461      	add	r1, ip
 8005d7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d82:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d8a:	b289      	uxth	r1, r1
 8005d8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d90:	4577      	cmp	r7, lr
 8005d92:	f849 1b04 	str.w	r1, [r9], #4
 8005d96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d9a:	d8e2      	bhi.n	8005d62 <__multiply+0xb2>
 8005d9c:	9a01      	ldr	r2, [sp, #4]
 8005d9e:	f845 c002 	str.w	ip, [r5, r2]
 8005da2:	9a03      	ldr	r2, [sp, #12]
 8005da4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005da8:	3304      	adds	r3, #4
 8005daa:	f1b9 0f00 	cmp.w	r9, #0
 8005dae:	d020      	beq.n	8005df2 <__multiply+0x142>
 8005db0:	6829      	ldr	r1, [r5, #0]
 8005db2:	f104 0c14 	add.w	ip, r4, #20
 8005db6:	46ae      	mov	lr, r5
 8005db8:	f04f 0a00 	mov.w	sl, #0
 8005dbc:	f8bc b000 	ldrh.w	fp, [ip]
 8005dc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dc4:	fb09 220b 	mla	r2, r9, fp, r2
 8005dc8:	4492      	add	sl, r2
 8005dca:	b289      	uxth	r1, r1
 8005dcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005dd0:	f84e 1b04 	str.w	r1, [lr], #4
 8005dd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005dd8:	f8be 1000 	ldrh.w	r1, [lr]
 8005ddc:	0c12      	lsrs	r2, r2, #16
 8005dde:	fb09 1102 	mla	r1, r9, r2, r1
 8005de2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005de6:	4567      	cmp	r7, ip
 8005de8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dec:	d8e6      	bhi.n	8005dbc <__multiply+0x10c>
 8005dee:	9a01      	ldr	r2, [sp, #4]
 8005df0:	50a9      	str	r1, [r5, r2]
 8005df2:	3504      	adds	r5, #4
 8005df4:	e79a      	b.n	8005d2c <__multiply+0x7c>
 8005df6:	3e01      	subs	r6, #1
 8005df8:	e79c      	b.n	8005d34 <__multiply+0x84>
 8005dfa:	bf00      	nop
 8005dfc:	08006ebb 	.word	0x08006ebb
 8005e00:	08006f2c 	.word	0x08006f2c

08005e04 <__pow5mult>:
 8005e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e08:	4615      	mov	r5, r2
 8005e0a:	f012 0203 	ands.w	r2, r2, #3
 8005e0e:	4606      	mov	r6, r0
 8005e10:	460f      	mov	r7, r1
 8005e12:	d007      	beq.n	8005e24 <__pow5mult+0x20>
 8005e14:	4c25      	ldr	r4, [pc, #148]	; (8005eac <__pow5mult+0xa8>)
 8005e16:	3a01      	subs	r2, #1
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e1e:	f7ff fe9b 	bl	8005b58 <__multadd>
 8005e22:	4607      	mov	r7, r0
 8005e24:	10ad      	asrs	r5, r5, #2
 8005e26:	d03d      	beq.n	8005ea4 <__pow5mult+0xa0>
 8005e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e2a:	b97c      	cbnz	r4, 8005e4c <__pow5mult+0x48>
 8005e2c:	2010      	movs	r0, #16
 8005e2e:	f7ff fe1b 	bl	8005a68 <malloc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	6270      	str	r0, [r6, #36]	; 0x24
 8005e36:	b928      	cbnz	r0, 8005e44 <__pow5mult+0x40>
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <__pow5mult+0xac>)
 8005e3a:	481e      	ldr	r0, [pc, #120]	; (8005eb4 <__pow5mult+0xb0>)
 8005e3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e40:	f000 fd6a 	bl	8006918 <__assert_func>
 8005e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e48:	6004      	str	r4, [r0, #0]
 8005e4a:	60c4      	str	r4, [r0, #12]
 8005e4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e54:	b94c      	cbnz	r4, 8005e6a <__pow5mult+0x66>
 8005e56:	f240 2171 	movw	r1, #625	; 0x271
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7ff ff12 	bl	8005c84 <__i2b>
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e66:	4604      	mov	r4, r0
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	f04f 0900 	mov.w	r9, #0
 8005e6e:	07eb      	lsls	r3, r5, #31
 8005e70:	d50a      	bpl.n	8005e88 <__pow5mult+0x84>
 8005e72:	4639      	mov	r1, r7
 8005e74:	4622      	mov	r2, r4
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff ff1a 	bl	8005cb0 <__multiply>
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4680      	mov	r8, r0
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff fe47 	bl	8005b14 <_Bfree>
 8005e86:	4647      	mov	r7, r8
 8005e88:	106d      	asrs	r5, r5, #1
 8005e8a:	d00b      	beq.n	8005ea4 <__pow5mult+0xa0>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	b938      	cbnz	r0, 8005ea0 <__pow5mult+0x9c>
 8005e90:	4622      	mov	r2, r4
 8005e92:	4621      	mov	r1, r4
 8005e94:	4630      	mov	r0, r6
 8005e96:	f7ff ff0b 	bl	8005cb0 <__multiply>
 8005e9a:	6020      	str	r0, [r4, #0]
 8005e9c:	f8c0 9000 	str.w	r9, [r0]
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	e7e4      	b.n	8005e6e <__pow5mult+0x6a>
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	bf00      	nop
 8005eac:	08007078 	.word	0x08007078
 8005eb0:	08006e49 	.word	0x08006e49
 8005eb4:	08006f2c 	.word	0x08006f2c

08005eb8 <__lshift>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	6849      	ldr	r1, [r1, #4]
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	4607      	mov	r7, r0
 8005eca:	4691      	mov	r9, r2
 8005ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ed0:	f108 0601 	add.w	r6, r8, #1
 8005ed4:	42b3      	cmp	r3, r6
 8005ed6:	db0b      	blt.n	8005ef0 <__lshift+0x38>
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff fddb 	bl	8005a94 <_Balloc>
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b948      	cbnz	r0, 8005ef6 <__lshift+0x3e>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <__lshift+0xd8>)
 8005ee6:	482b      	ldr	r0, [pc, #172]	; (8005f94 <__lshift+0xdc>)
 8005ee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005eec:	f000 fd14 	bl	8006918 <__assert_func>
 8005ef0:	3101      	adds	r1, #1
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__lshift+0x1c>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f100 0114 	add.w	r1, r0, #20
 8005efc:	f100 0210 	add.w	r2, r0, #16
 8005f00:	4618      	mov	r0, r3
 8005f02:	4553      	cmp	r3, sl
 8005f04:	db37      	blt.n	8005f76 <__lshift+0xbe>
 8005f06:	6920      	ldr	r0, [r4, #16]
 8005f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f0c:	f104 0314 	add.w	r3, r4, #20
 8005f10:	f019 091f 	ands.w	r9, r9, #31
 8005f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f1c:	d02f      	beq.n	8005f7e <__lshift+0xc6>
 8005f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8005f22:	468a      	mov	sl, r1
 8005f24:	f04f 0c00 	mov.w	ip, #0
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	fa02 f209 	lsl.w	r2, r2, r9
 8005f2e:	ea42 020c 	orr.w	r2, r2, ip
 8005f32:	f84a 2b04 	str.w	r2, [sl], #4
 8005f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f40:	d8f2      	bhi.n	8005f28 <__lshift+0x70>
 8005f42:	1b03      	subs	r3, r0, r4
 8005f44:	3b15      	subs	r3, #21
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	f104 0215 	add.w	r2, r4, #21
 8005f50:	4290      	cmp	r0, r2
 8005f52:	bf38      	it	cc
 8005f54:	2304      	movcc	r3, #4
 8005f56:	f841 c003 	str.w	ip, [r1, r3]
 8005f5a:	f1bc 0f00 	cmp.w	ip, #0
 8005f5e:	d001      	beq.n	8005f64 <__lshift+0xac>
 8005f60:	f108 0602 	add.w	r6, r8, #2
 8005f64:	3e01      	subs	r6, #1
 8005f66:	4638      	mov	r0, r7
 8005f68:	612e      	str	r6, [r5, #16]
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	f7ff fdd2 	bl	8005b14 <_Bfree>
 8005f70:	4628      	mov	r0, r5
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	e7c1      	b.n	8005f02 <__lshift+0x4a>
 8005f7e:	3904      	subs	r1, #4
 8005f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f88:	4298      	cmp	r0, r3
 8005f8a:	d8f9      	bhi.n	8005f80 <__lshift+0xc8>
 8005f8c:	e7ea      	b.n	8005f64 <__lshift+0xac>
 8005f8e:	bf00      	nop
 8005f90:	08006ebb 	.word	0x08006ebb
 8005f94:	08006f2c 	.word	0x08006f2c

08005f98 <__mcmp>:
 8005f98:	b530      	push	{r4, r5, lr}
 8005f9a:	6902      	ldr	r2, [r0, #16]
 8005f9c:	690c      	ldr	r4, [r1, #16]
 8005f9e:	1b12      	subs	r2, r2, r4
 8005fa0:	d10e      	bne.n	8005fc0 <__mcmp+0x28>
 8005fa2:	f100 0314 	add.w	r3, r0, #20
 8005fa6:	3114      	adds	r1, #20
 8005fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d003      	beq.n	8005fc4 <__mcmp+0x2c>
 8005fbc:	d305      	bcc.n	8005fca <__mcmp+0x32>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	bd30      	pop	{r4, r5, pc}
 8005fc4:	4283      	cmp	r3, r0
 8005fc6:	d3f3      	bcc.n	8005fb0 <__mcmp+0x18>
 8005fc8:	e7fa      	b.n	8005fc0 <__mcmp+0x28>
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	e7f7      	b.n	8005fc0 <__mcmp+0x28>

08005fd0 <__mdiff>:
 8005fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4690      	mov	r8, r2
 8005fde:	f7ff ffdb 	bl	8005f98 <__mcmp>
 8005fe2:	1e05      	subs	r5, r0, #0
 8005fe4:	d110      	bne.n	8006008 <__mdiff+0x38>
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff fd53 	bl	8005a94 <_Balloc>
 8005fee:	b930      	cbnz	r0, 8005ffe <__mdiff+0x2e>
 8005ff0:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <__mdiff+0x10c>)
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	f240 2132 	movw	r1, #562	; 0x232
 8005ff8:	4839      	ldr	r0, [pc, #228]	; (80060e0 <__mdiff+0x110>)
 8005ffa:	f000 fc8d 	bl	8006918 <__assert_func>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	bfa4      	itt	ge
 800600a:	4643      	movge	r3, r8
 800600c:	46a0      	movge	r8, r4
 800600e:	4630      	mov	r0, r6
 8006010:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006014:	bfa6      	itte	ge
 8006016:	461c      	movge	r4, r3
 8006018:	2500      	movge	r5, #0
 800601a:	2501      	movlt	r5, #1
 800601c:	f7ff fd3a 	bl	8005a94 <_Balloc>
 8006020:	b920      	cbnz	r0, 800602c <__mdiff+0x5c>
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <__mdiff+0x10c>)
 8006024:	4602      	mov	r2, r0
 8006026:	f44f 7110 	mov.w	r1, #576	; 0x240
 800602a:	e7e5      	b.n	8005ff8 <__mdiff+0x28>
 800602c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006030:	6926      	ldr	r6, [r4, #16]
 8006032:	60c5      	str	r5, [r0, #12]
 8006034:	f104 0914 	add.w	r9, r4, #20
 8006038:	f108 0514 	add.w	r5, r8, #20
 800603c:	f100 0e14 	add.w	lr, r0, #20
 8006040:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006044:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006048:	f108 0210 	add.w	r2, r8, #16
 800604c:	46f2      	mov	sl, lr
 800604e:	2100      	movs	r1, #0
 8006050:	f859 3b04 	ldr.w	r3, [r9], #4
 8006054:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006058:	fa1f f883 	uxth.w	r8, r3
 800605c:	fa11 f18b 	uxtah	r1, r1, fp
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	eba1 0808 	sub.w	r8, r1, r8
 8006066:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800606a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800606e:	fa1f f888 	uxth.w	r8, r8
 8006072:	1419      	asrs	r1, r3, #16
 8006074:	454e      	cmp	r6, r9
 8006076:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800607a:	f84a 3b04 	str.w	r3, [sl], #4
 800607e:	d8e7      	bhi.n	8006050 <__mdiff+0x80>
 8006080:	1b33      	subs	r3, r6, r4
 8006082:	3b15      	subs	r3, #21
 8006084:	f023 0303 	bic.w	r3, r3, #3
 8006088:	3304      	adds	r3, #4
 800608a:	3415      	adds	r4, #21
 800608c:	42a6      	cmp	r6, r4
 800608e:	bf38      	it	cc
 8006090:	2304      	movcc	r3, #4
 8006092:	441d      	add	r5, r3
 8006094:	4473      	add	r3, lr
 8006096:	469e      	mov	lr, r3
 8006098:	462e      	mov	r6, r5
 800609a:	4566      	cmp	r6, ip
 800609c:	d30e      	bcc.n	80060bc <__mdiff+0xec>
 800609e:	f10c 0203 	add.w	r2, ip, #3
 80060a2:	1b52      	subs	r2, r2, r5
 80060a4:	f022 0203 	bic.w	r2, r2, #3
 80060a8:	3d03      	subs	r5, #3
 80060aa:	45ac      	cmp	ip, r5
 80060ac:	bf38      	it	cc
 80060ae:	2200      	movcc	r2, #0
 80060b0:	441a      	add	r2, r3
 80060b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80060b6:	b17b      	cbz	r3, 80060d8 <__mdiff+0x108>
 80060b8:	6107      	str	r7, [r0, #16]
 80060ba:	e7a3      	b.n	8006004 <__mdiff+0x34>
 80060bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80060c0:	fa11 f288 	uxtah	r2, r1, r8
 80060c4:	1414      	asrs	r4, r2, #16
 80060c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060ca:	b292      	uxth	r2, r2
 80060cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060d0:	f84e 2b04 	str.w	r2, [lr], #4
 80060d4:	1421      	asrs	r1, r4, #16
 80060d6:	e7e0      	b.n	800609a <__mdiff+0xca>
 80060d8:	3f01      	subs	r7, #1
 80060da:	e7ea      	b.n	80060b2 <__mdiff+0xe2>
 80060dc:	08006ebb 	.word	0x08006ebb
 80060e0:	08006f2c 	.word	0x08006f2c

080060e4 <__d2b>:
 80060e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	4689      	mov	r9, r1
 80060ea:	2101      	movs	r1, #1
 80060ec:	ec57 6b10 	vmov	r6, r7, d0
 80060f0:	4690      	mov	r8, r2
 80060f2:	f7ff fccf 	bl	8005a94 <_Balloc>
 80060f6:	4604      	mov	r4, r0
 80060f8:	b930      	cbnz	r0, 8006108 <__d2b+0x24>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <__d2b+0xb0>)
 80060fe:	4826      	ldr	r0, [pc, #152]	; (8006198 <__d2b+0xb4>)
 8006100:	f240 310a 	movw	r1, #778	; 0x30a
 8006104:	f000 fc08 	bl	8006918 <__assert_func>
 8006108:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800610c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006110:	bb35      	cbnz	r5, 8006160 <__d2b+0x7c>
 8006112:	2e00      	cmp	r6, #0
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	d028      	beq.n	800616a <__d2b+0x86>
 8006118:	4668      	mov	r0, sp
 800611a:	9600      	str	r6, [sp, #0]
 800611c:	f7ff fd82 	bl	8005c24 <__lo0bits>
 8006120:	9900      	ldr	r1, [sp, #0]
 8006122:	b300      	cbz	r0, 8006166 <__d2b+0x82>
 8006124:	9a01      	ldr	r2, [sp, #4]
 8006126:	f1c0 0320 	rsb	r3, r0, #32
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	430b      	orrs	r3, r1
 8006130:	40c2      	lsrs	r2, r0
 8006132:	6163      	str	r3, [r4, #20]
 8006134:	9201      	str	r2, [sp, #4]
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	61a3      	str	r3, [r4, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf14      	ite	ne
 800613e:	2202      	movne	r2, #2
 8006140:	2201      	moveq	r2, #1
 8006142:	6122      	str	r2, [r4, #16]
 8006144:	b1d5      	cbz	r5, 800617c <__d2b+0x98>
 8006146:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800614a:	4405      	add	r5, r0
 800614c:	f8c9 5000 	str.w	r5, [r9]
 8006150:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006154:	f8c8 0000 	str.w	r0, [r8]
 8006158:	4620      	mov	r0, r4
 800615a:	b003      	add	sp, #12
 800615c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006164:	e7d5      	b.n	8006112 <__d2b+0x2e>
 8006166:	6161      	str	r1, [r4, #20]
 8006168:	e7e5      	b.n	8006136 <__d2b+0x52>
 800616a:	a801      	add	r0, sp, #4
 800616c:	f7ff fd5a 	bl	8005c24 <__lo0bits>
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	6163      	str	r3, [r4, #20]
 8006174:	2201      	movs	r2, #1
 8006176:	6122      	str	r2, [r4, #16]
 8006178:	3020      	adds	r0, #32
 800617a:	e7e3      	b.n	8006144 <__d2b+0x60>
 800617c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006184:	f8c9 0000 	str.w	r0, [r9]
 8006188:	6918      	ldr	r0, [r3, #16]
 800618a:	f7ff fd2b 	bl	8005be4 <__hi0bits>
 800618e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006192:	e7df      	b.n	8006154 <__d2b+0x70>
 8006194:	08006ebb 	.word	0x08006ebb
 8006198:	08006f2c 	.word	0x08006f2c

0800619c <_calloc_r>:
 800619c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800619e:	fba1 2402 	umull	r2, r4, r1, r2
 80061a2:	b94c      	cbnz	r4, 80061b8 <_calloc_r+0x1c>
 80061a4:	4611      	mov	r1, r2
 80061a6:	9201      	str	r2, [sp, #4]
 80061a8:	f000 f87a 	bl	80062a0 <_malloc_r>
 80061ac:	9a01      	ldr	r2, [sp, #4]
 80061ae:	4605      	mov	r5, r0
 80061b0:	b930      	cbnz	r0, 80061c0 <_calloc_r+0x24>
 80061b2:	4628      	mov	r0, r5
 80061b4:	b003      	add	sp, #12
 80061b6:	bd30      	pop	{r4, r5, pc}
 80061b8:	220c      	movs	r2, #12
 80061ba:	6002      	str	r2, [r0, #0]
 80061bc:	2500      	movs	r5, #0
 80061be:	e7f8      	b.n	80061b2 <_calloc_r+0x16>
 80061c0:	4621      	mov	r1, r4
 80061c2:	f7fe f837 	bl	8004234 <memset>
 80061c6:	e7f4      	b.n	80061b2 <_calloc_r+0x16>

080061c8 <_free_r>:
 80061c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061ca:	2900      	cmp	r1, #0
 80061cc:	d044      	beq.n	8006258 <_free_r+0x90>
 80061ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d2:	9001      	str	r0, [sp, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f1a1 0404 	sub.w	r4, r1, #4
 80061da:	bfb8      	it	lt
 80061dc:	18e4      	addlt	r4, r4, r3
 80061de:	f000 fd27 	bl	8006c30 <__malloc_lock>
 80061e2:	4a1e      	ldr	r2, [pc, #120]	; (800625c <_free_r+0x94>)
 80061e4:	9801      	ldr	r0, [sp, #4]
 80061e6:	6813      	ldr	r3, [r2, #0]
 80061e8:	b933      	cbnz	r3, 80061f8 <_free_r+0x30>
 80061ea:	6063      	str	r3, [r4, #4]
 80061ec:	6014      	str	r4, [r2, #0]
 80061ee:	b003      	add	sp, #12
 80061f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f4:	f000 bd22 	b.w	8006c3c <__malloc_unlock>
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d908      	bls.n	800620e <_free_r+0x46>
 80061fc:	6825      	ldr	r5, [r4, #0]
 80061fe:	1961      	adds	r1, r4, r5
 8006200:	428b      	cmp	r3, r1
 8006202:	bf01      	itttt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	1949      	addeq	r1, r1, r5
 800620a:	6021      	streq	r1, [r4, #0]
 800620c:	e7ed      	b.n	80061ea <_free_r+0x22>
 800620e:	461a      	mov	r2, r3
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	b10b      	cbz	r3, 8006218 <_free_r+0x50>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d9fa      	bls.n	800620e <_free_r+0x46>
 8006218:	6811      	ldr	r1, [r2, #0]
 800621a:	1855      	adds	r5, r2, r1
 800621c:	42a5      	cmp	r5, r4
 800621e:	d10b      	bne.n	8006238 <_free_r+0x70>
 8006220:	6824      	ldr	r4, [r4, #0]
 8006222:	4421      	add	r1, r4
 8006224:	1854      	adds	r4, r2, r1
 8006226:	42a3      	cmp	r3, r4
 8006228:	6011      	str	r1, [r2, #0]
 800622a:	d1e0      	bne.n	80061ee <_free_r+0x26>
 800622c:	681c      	ldr	r4, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	6053      	str	r3, [r2, #4]
 8006232:	4421      	add	r1, r4
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	e7da      	b.n	80061ee <_free_r+0x26>
 8006238:	d902      	bls.n	8006240 <_free_r+0x78>
 800623a:	230c      	movs	r3, #12
 800623c:	6003      	str	r3, [r0, #0]
 800623e:	e7d6      	b.n	80061ee <_free_r+0x26>
 8006240:	6825      	ldr	r5, [r4, #0]
 8006242:	1961      	adds	r1, r4, r5
 8006244:	428b      	cmp	r3, r1
 8006246:	bf04      	itt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	6063      	str	r3, [r4, #4]
 800624e:	bf04      	itt	eq
 8006250:	1949      	addeq	r1, r1, r5
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	6054      	str	r4, [r2, #4]
 8006256:	e7ca      	b.n	80061ee <_free_r+0x26>
 8006258:	b003      	add	sp, #12
 800625a:	bd30      	pop	{r4, r5, pc}
 800625c:	2000030c 	.word	0x2000030c

08006260 <sbrk_aligned>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4e0e      	ldr	r6, [pc, #56]	; (800629c <sbrk_aligned+0x3c>)
 8006264:	460c      	mov	r4, r1
 8006266:	6831      	ldr	r1, [r6, #0]
 8006268:	4605      	mov	r5, r0
 800626a:	b911      	cbnz	r1, 8006272 <sbrk_aligned+0x12>
 800626c:	f000 fa2e 	bl	80066cc <_sbrk_r>
 8006270:	6030      	str	r0, [r6, #0]
 8006272:	4621      	mov	r1, r4
 8006274:	4628      	mov	r0, r5
 8006276:	f000 fa29 	bl	80066cc <_sbrk_r>
 800627a:	1c43      	adds	r3, r0, #1
 800627c:	d00a      	beq.n	8006294 <sbrk_aligned+0x34>
 800627e:	1cc4      	adds	r4, r0, #3
 8006280:	f024 0403 	bic.w	r4, r4, #3
 8006284:	42a0      	cmp	r0, r4
 8006286:	d007      	beq.n	8006298 <sbrk_aligned+0x38>
 8006288:	1a21      	subs	r1, r4, r0
 800628a:	4628      	mov	r0, r5
 800628c:	f000 fa1e 	bl	80066cc <_sbrk_r>
 8006290:	3001      	adds	r0, #1
 8006292:	d101      	bne.n	8006298 <sbrk_aligned+0x38>
 8006294:	f04f 34ff 	mov.w	r4, #4294967295
 8006298:	4620      	mov	r0, r4
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	20000310 	.word	0x20000310

080062a0 <_malloc_r>:
 80062a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a4:	1ccd      	adds	r5, r1, #3
 80062a6:	f025 0503 	bic.w	r5, r5, #3
 80062aa:	3508      	adds	r5, #8
 80062ac:	2d0c      	cmp	r5, #12
 80062ae:	bf38      	it	cc
 80062b0:	250c      	movcc	r5, #12
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	4607      	mov	r7, r0
 80062b6:	db01      	blt.n	80062bc <_malloc_r+0x1c>
 80062b8:	42a9      	cmp	r1, r5
 80062ba:	d905      	bls.n	80062c8 <_malloc_r+0x28>
 80062bc:	230c      	movs	r3, #12
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	2600      	movs	r6, #0
 80062c2:	4630      	mov	r0, r6
 80062c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c8:	4e2e      	ldr	r6, [pc, #184]	; (8006384 <_malloc_r+0xe4>)
 80062ca:	f000 fcb1 	bl	8006c30 <__malloc_lock>
 80062ce:	6833      	ldr	r3, [r6, #0]
 80062d0:	461c      	mov	r4, r3
 80062d2:	bb34      	cbnz	r4, 8006322 <_malloc_r+0x82>
 80062d4:	4629      	mov	r1, r5
 80062d6:	4638      	mov	r0, r7
 80062d8:	f7ff ffc2 	bl	8006260 <sbrk_aligned>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	4604      	mov	r4, r0
 80062e0:	d14d      	bne.n	800637e <_malloc_r+0xde>
 80062e2:	6834      	ldr	r4, [r6, #0]
 80062e4:	4626      	mov	r6, r4
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	d140      	bne.n	800636c <_malloc_r+0xcc>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	4631      	mov	r1, r6
 80062ee:	4638      	mov	r0, r7
 80062f0:	eb04 0803 	add.w	r8, r4, r3
 80062f4:	f000 f9ea 	bl	80066cc <_sbrk_r>
 80062f8:	4580      	cmp	r8, r0
 80062fa:	d13a      	bne.n	8006372 <_malloc_r+0xd2>
 80062fc:	6821      	ldr	r1, [r4, #0]
 80062fe:	3503      	adds	r5, #3
 8006300:	1a6d      	subs	r5, r5, r1
 8006302:	f025 0503 	bic.w	r5, r5, #3
 8006306:	3508      	adds	r5, #8
 8006308:	2d0c      	cmp	r5, #12
 800630a:	bf38      	it	cc
 800630c:	250c      	movcc	r5, #12
 800630e:	4629      	mov	r1, r5
 8006310:	4638      	mov	r0, r7
 8006312:	f7ff ffa5 	bl	8006260 <sbrk_aligned>
 8006316:	3001      	adds	r0, #1
 8006318:	d02b      	beq.n	8006372 <_malloc_r+0xd2>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	442b      	add	r3, r5
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	e00e      	b.n	8006340 <_malloc_r+0xa0>
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	1b52      	subs	r2, r2, r5
 8006326:	d41e      	bmi.n	8006366 <_malloc_r+0xc6>
 8006328:	2a0b      	cmp	r2, #11
 800632a:	d916      	bls.n	800635a <_malloc_r+0xba>
 800632c:	1961      	adds	r1, r4, r5
 800632e:	42a3      	cmp	r3, r4
 8006330:	6025      	str	r5, [r4, #0]
 8006332:	bf18      	it	ne
 8006334:	6059      	strne	r1, [r3, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	bf08      	it	eq
 800633a:	6031      	streq	r1, [r6, #0]
 800633c:	5162      	str	r2, [r4, r5]
 800633e:	604b      	str	r3, [r1, #4]
 8006340:	4638      	mov	r0, r7
 8006342:	f104 060b 	add.w	r6, r4, #11
 8006346:	f000 fc79 	bl	8006c3c <__malloc_unlock>
 800634a:	f026 0607 	bic.w	r6, r6, #7
 800634e:	1d23      	adds	r3, r4, #4
 8006350:	1af2      	subs	r2, r6, r3
 8006352:	d0b6      	beq.n	80062c2 <_malloc_r+0x22>
 8006354:	1b9b      	subs	r3, r3, r6
 8006356:	50a3      	str	r3, [r4, r2]
 8006358:	e7b3      	b.n	80062c2 <_malloc_r+0x22>
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	42a3      	cmp	r3, r4
 800635e:	bf0c      	ite	eq
 8006360:	6032      	streq	r2, [r6, #0]
 8006362:	605a      	strne	r2, [r3, #4]
 8006364:	e7ec      	b.n	8006340 <_malloc_r+0xa0>
 8006366:	4623      	mov	r3, r4
 8006368:	6864      	ldr	r4, [r4, #4]
 800636a:	e7b2      	b.n	80062d2 <_malloc_r+0x32>
 800636c:	4634      	mov	r4, r6
 800636e:	6876      	ldr	r6, [r6, #4]
 8006370:	e7b9      	b.n	80062e6 <_malloc_r+0x46>
 8006372:	230c      	movs	r3, #12
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4638      	mov	r0, r7
 8006378:	f000 fc60 	bl	8006c3c <__malloc_unlock>
 800637c:	e7a1      	b.n	80062c2 <_malloc_r+0x22>
 800637e:	6025      	str	r5, [r4, #0]
 8006380:	e7de      	b.n	8006340 <_malloc_r+0xa0>
 8006382:	bf00      	nop
 8006384:	2000030c 	.word	0x2000030c

08006388 <__sfputc_r>:
 8006388:	6893      	ldr	r3, [r2, #8]
 800638a:	3b01      	subs	r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	b410      	push	{r4}
 8006390:	6093      	str	r3, [r2, #8]
 8006392:	da08      	bge.n	80063a6 <__sfputc_r+0x1e>
 8006394:	6994      	ldr	r4, [r2, #24]
 8006396:	42a3      	cmp	r3, r4
 8006398:	db01      	blt.n	800639e <__sfputc_r+0x16>
 800639a:	290a      	cmp	r1, #10
 800639c:	d103      	bne.n	80063a6 <__sfputc_r+0x1e>
 800639e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a2:	f000 b9e7 	b.w	8006774 <__swbuf_r>
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	1c58      	adds	r0, r3, #1
 80063aa:	6010      	str	r0, [r2, #0]
 80063ac:	7019      	strb	r1, [r3, #0]
 80063ae:	4608      	mov	r0, r1
 80063b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <__sfputs_r>:
 80063b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b8:	4606      	mov	r6, r0
 80063ba:	460f      	mov	r7, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	18d5      	adds	r5, r2, r3
 80063c0:	42ac      	cmp	r4, r5
 80063c2:	d101      	bne.n	80063c8 <__sfputs_r+0x12>
 80063c4:	2000      	movs	r0, #0
 80063c6:	e007      	b.n	80063d8 <__sfputs_r+0x22>
 80063c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063cc:	463a      	mov	r2, r7
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7ff ffda 	bl	8006388 <__sfputc_r>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d1f3      	bne.n	80063c0 <__sfputs_r+0xa>
 80063d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063dc <_vfiprintf_r>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	460d      	mov	r5, r1
 80063e2:	b09d      	sub	sp, #116	; 0x74
 80063e4:	4614      	mov	r4, r2
 80063e6:	4698      	mov	r8, r3
 80063e8:	4606      	mov	r6, r0
 80063ea:	b118      	cbz	r0, 80063f4 <_vfiprintf_r+0x18>
 80063ec:	6983      	ldr	r3, [r0, #24]
 80063ee:	b90b      	cbnz	r3, 80063f4 <_vfiprintf_r+0x18>
 80063f0:	f7ff fa94 	bl	800591c <__sinit>
 80063f4:	4b89      	ldr	r3, [pc, #548]	; (800661c <_vfiprintf_r+0x240>)
 80063f6:	429d      	cmp	r5, r3
 80063f8:	d11b      	bne.n	8006432 <_vfiprintf_r+0x56>
 80063fa:	6875      	ldr	r5, [r6, #4]
 80063fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	d405      	bmi.n	800640e <_vfiprintf_r+0x32>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	059a      	lsls	r2, r3, #22
 8006406:	d402      	bmi.n	800640e <_vfiprintf_r+0x32>
 8006408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800640a:	f7ff fb2a 	bl	8005a62 <__retarget_lock_acquire_recursive>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	071b      	lsls	r3, r3, #28
 8006412:	d501      	bpl.n	8006418 <_vfiprintf_r+0x3c>
 8006414:	692b      	ldr	r3, [r5, #16]
 8006416:	b9eb      	cbnz	r3, 8006454 <_vfiprintf_r+0x78>
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f000 fa0e 	bl	800683c <__swsetup_r>
 8006420:	b1c0      	cbz	r0, 8006454 <_vfiprintf_r+0x78>
 8006422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006424:	07dc      	lsls	r4, r3, #31
 8006426:	d50e      	bpl.n	8006446 <_vfiprintf_r+0x6a>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	b01d      	add	sp, #116	; 0x74
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <_vfiprintf_r+0x244>)
 8006434:	429d      	cmp	r5, r3
 8006436:	d101      	bne.n	800643c <_vfiprintf_r+0x60>
 8006438:	68b5      	ldr	r5, [r6, #8]
 800643a:	e7df      	b.n	80063fc <_vfiprintf_r+0x20>
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <_vfiprintf_r+0x248>)
 800643e:	429d      	cmp	r5, r3
 8006440:	bf08      	it	eq
 8006442:	68f5      	ldreq	r5, [r6, #12]
 8006444:	e7da      	b.n	80063fc <_vfiprintf_r+0x20>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d4ed      	bmi.n	8006428 <_vfiprintf_r+0x4c>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f7ff fb09 	bl	8005a64 <__retarget_lock_release_recursive>
 8006452:	e7e9      	b.n	8006428 <_vfiprintf_r+0x4c>
 8006454:	2300      	movs	r3, #0
 8006456:	9309      	str	r3, [sp, #36]	; 0x24
 8006458:	2320      	movs	r3, #32
 800645a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800645e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006462:	2330      	movs	r3, #48	; 0x30
 8006464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006628 <_vfiprintf_r+0x24c>
 8006468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800646c:	f04f 0901 	mov.w	r9, #1
 8006470:	4623      	mov	r3, r4
 8006472:	469a      	mov	sl, r3
 8006474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006478:	b10a      	cbz	r2, 800647e <_vfiprintf_r+0xa2>
 800647a:	2a25      	cmp	r2, #37	; 0x25
 800647c:	d1f9      	bne.n	8006472 <_vfiprintf_r+0x96>
 800647e:	ebba 0b04 	subs.w	fp, sl, r4
 8006482:	d00b      	beq.n	800649c <_vfiprintf_r+0xc0>
 8006484:	465b      	mov	r3, fp
 8006486:	4622      	mov	r2, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ff93 	bl	80063b6 <__sfputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	f000 80aa 	beq.w	80065ea <_vfiprintf_r+0x20e>
 8006496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006498:	445a      	add	r2, fp
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a2 	beq.w	80065ea <_vfiprintf_r+0x20e>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064bc:	931a      	str	r3, [sp, #104]	; 0x68
 80064be:	4654      	mov	r4, sl
 80064c0:	2205      	movs	r2, #5
 80064c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c6:	4858      	ldr	r0, [pc, #352]	; (8006628 <_vfiprintf_r+0x24c>)
 80064c8:	f7f9 fe8a 	bl	80001e0 <memchr>
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	b9d8      	cbnz	r0, 8006508 <_vfiprintf_r+0x12c>
 80064d0:	06d1      	lsls	r1, r2, #27
 80064d2:	bf44      	itt	mi
 80064d4:	2320      	movmi	r3, #32
 80064d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064da:	0713      	lsls	r3, r2, #28
 80064dc:	bf44      	itt	mi
 80064de:	232b      	movmi	r3, #43	; 0x2b
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e4:	f89a 3000 	ldrb.w	r3, [sl]
 80064e8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ea:	d015      	beq.n	8006518 <_vfiprintf_r+0x13c>
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	4654      	mov	r4, sl
 80064f0:	2000      	movs	r0, #0
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d94e      	bls.n	80065a0 <_vfiprintf_r+0x1c4>
 8006502:	b1b0      	cbz	r0, 8006532 <_vfiprintf_r+0x156>
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	e014      	b.n	8006532 <_vfiprintf_r+0x156>
 8006508:	eba0 0308 	sub.w	r3, r0, r8
 800650c:	fa09 f303 	lsl.w	r3, r9, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	46a2      	mov	sl, r4
 8006516:	e7d2      	b.n	80064be <_vfiprintf_r+0xe2>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbb      	ittet	lt
 8006524:	425b      	neglt	r3, r3
 8006526:	f042 0202 	orrlt.w	r2, r2, #2
 800652a:	9307      	strge	r3, [sp, #28]
 800652c:	9307      	strlt	r3, [sp, #28]
 800652e:	bfb8      	it	lt
 8006530:	9204      	strlt	r2, [sp, #16]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	2b2e      	cmp	r3, #46	; 0x2e
 8006536:	d10c      	bne.n	8006552 <_vfiprintf_r+0x176>
 8006538:	7863      	ldrb	r3, [r4, #1]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d135      	bne.n	80065aa <_vfiprintf_r+0x1ce>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d1a      	adds	r2, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9203      	str	r2, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfb8      	it	lt
 800654a:	f04f 33ff 	movlt.w	r3, #4294967295
 800654e:	3402      	adds	r4, #2
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006638 <_vfiprintf_r+0x25c>
 8006556:	7821      	ldrb	r1, [r4, #0]
 8006558:	2203      	movs	r2, #3
 800655a:	4650      	mov	r0, sl
 800655c:	f7f9 fe40 	bl	80001e0 <memchr>
 8006560:	b140      	cbz	r0, 8006574 <_vfiprintf_r+0x198>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	eba0 000a 	sub.w	r0, r0, sl
 8006568:	fa03 f000 	lsl.w	r0, r3, r0
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	4303      	orrs	r3, r0
 8006570:	3401      	adds	r4, #1
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006578:	482c      	ldr	r0, [pc, #176]	; (800662c <_vfiprintf_r+0x250>)
 800657a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800657e:	2206      	movs	r2, #6
 8006580:	f7f9 fe2e 	bl	80001e0 <memchr>
 8006584:	2800      	cmp	r0, #0
 8006586:	d03f      	beq.n	8006608 <_vfiprintf_r+0x22c>
 8006588:	4b29      	ldr	r3, [pc, #164]	; (8006630 <_vfiprintf_r+0x254>)
 800658a:	bb1b      	cbnz	r3, 80065d4 <_vfiprintf_r+0x1f8>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	3307      	adds	r3, #7
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	3308      	adds	r3, #8
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659a:	443b      	add	r3, r7
 800659c:	9309      	str	r3, [sp, #36]	; 0x24
 800659e:	e767      	b.n	8006470 <_vfiprintf_r+0x94>
 80065a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a4:	460c      	mov	r4, r1
 80065a6:	2001      	movs	r0, #1
 80065a8:	e7a5      	b.n	80064f6 <_vfiprintf_r+0x11a>
 80065aa:	2300      	movs	r3, #0
 80065ac:	3401      	adds	r4, #1
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f04f 0c0a 	mov.w	ip, #10
 80065b6:	4620      	mov	r0, r4
 80065b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065bc:	3a30      	subs	r2, #48	; 0x30
 80065be:	2a09      	cmp	r2, #9
 80065c0:	d903      	bls.n	80065ca <_vfiprintf_r+0x1ee>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0c5      	beq.n	8006552 <_vfiprintf_r+0x176>
 80065c6:	9105      	str	r1, [sp, #20]
 80065c8:	e7c3      	b.n	8006552 <_vfiprintf_r+0x176>
 80065ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ce:	4604      	mov	r4, r0
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7f0      	b.n	80065b6 <_vfiprintf_r+0x1da>
 80065d4:	ab03      	add	r3, sp, #12
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	462a      	mov	r2, r5
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <_vfiprintf_r+0x258>)
 80065dc:	a904      	add	r1, sp, #16
 80065de:	4630      	mov	r0, r6
 80065e0:	f7fd fed0 	bl	8004384 <_printf_float>
 80065e4:	4607      	mov	r7, r0
 80065e6:	1c78      	adds	r0, r7, #1
 80065e8:	d1d6      	bne.n	8006598 <_vfiprintf_r+0x1bc>
 80065ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d405      	bmi.n	80065fc <_vfiprintf_r+0x220>
 80065f0:	89ab      	ldrh	r3, [r5, #12]
 80065f2:	059a      	lsls	r2, r3, #22
 80065f4:	d402      	bmi.n	80065fc <_vfiprintf_r+0x220>
 80065f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f8:	f7ff fa34 	bl	8005a64 <__retarget_lock_release_recursive>
 80065fc:	89ab      	ldrh	r3, [r5, #12]
 80065fe:	065b      	lsls	r3, r3, #25
 8006600:	f53f af12 	bmi.w	8006428 <_vfiprintf_r+0x4c>
 8006604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006606:	e711      	b.n	800642c <_vfiprintf_r+0x50>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	462a      	mov	r2, r5
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <_vfiprintf_r+0x258>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	4630      	mov	r0, r6
 8006614:	f7fe f95a 	bl	80048cc <_printf_i>
 8006618:	e7e4      	b.n	80065e4 <_vfiprintf_r+0x208>
 800661a:	bf00      	nop
 800661c:	08006eec 	.word	0x08006eec
 8006620:	08006f0c 	.word	0x08006f0c
 8006624:	08006ecc 	.word	0x08006ecc
 8006628:	08007084 	.word	0x08007084
 800662c:	0800708e 	.word	0x0800708e
 8006630:	08004385 	.word	0x08004385
 8006634:	080063b7 	.word	0x080063b7
 8006638:	0800708a 	.word	0x0800708a

0800663c <_putc_r>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	460d      	mov	r5, r1
 8006640:	4614      	mov	r4, r2
 8006642:	4606      	mov	r6, r0
 8006644:	b118      	cbz	r0, 800664e <_putc_r+0x12>
 8006646:	6983      	ldr	r3, [r0, #24]
 8006648:	b90b      	cbnz	r3, 800664e <_putc_r+0x12>
 800664a:	f7ff f967 	bl	800591c <__sinit>
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <_putc_r+0x84>)
 8006650:	429c      	cmp	r4, r3
 8006652:	d124      	bne.n	800669e <_putc_r+0x62>
 8006654:	6874      	ldr	r4, [r6, #4]
 8006656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006658:	07d8      	lsls	r0, r3, #31
 800665a:	d405      	bmi.n	8006668 <_putc_r+0x2c>
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	0599      	lsls	r1, r3, #22
 8006660:	d402      	bmi.n	8006668 <_putc_r+0x2c>
 8006662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006664:	f7ff f9fd 	bl	8005a62 <__retarget_lock_acquire_recursive>
 8006668:	68a3      	ldr	r3, [r4, #8]
 800666a:	3b01      	subs	r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	60a3      	str	r3, [r4, #8]
 8006670:	da05      	bge.n	800667e <_putc_r+0x42>
 8006672:	69a2      	ldr	r2, [r4, #24]
 8006674:	4293      	cmp	r3, r2
 8006676:	db1c      	blt.n	80066b2 <_putc_r+0x76>
 8006678:	b2eb      	uxtb	r3, r5
 800667a:	2b0a      	cmp	r3, #10
 800667c:	d019      	beq.n	80066b2 <_putc_r+0x76>
 800667e:	6823      	ldr	r3, [r4, #0]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	6022      	str	r2, [r4, #0]
 8006684:	701d      	strb	r5, [r3, #0]
 8006686:	b2ed      	uxtb	r5, r5
 8006688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800668a:	07da      	lsls	r2, r3, #31
 800668c:	d405      	bmi.n	800669a <_putc_r+0x5e>
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	059b      	lsls	r3, r3, #22
 8006692:	d402      	bmi.n	800669a <_putc_r+0x5e>
 8006694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006696:	f7ff f9e5 	bl	8005a64 <__retarget_lock_release_recursive>
 800669a:	4628      	mov	r0, r5
 800669c:	bd70      	pop	{r4, r5, r6, pc}
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <_putc_r+0x88>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	d101      	bne.n	80066a8 <_putc_r+0x6c>
 80066a4:	68b4      	ldr	r4, [r6, #8]
 80066a6:	e7d6      	b.n	8006656 <_putc_r+0x1a>
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <_putc_r+0x8c>)
 80066aa:	429c      	cmp	r4, r3
 80066ac:	bf08      	it	eq
 80066ae:	68f4      	ldreq	r4, [r6, #12]
 80066b0:	e7d1      	b.n	8006656 <_putc_r+0x1a>
 80066b2:	4629      	mov	r1, r5
 80066b4:	4622      	mov	r2, r4
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 f85c 	bl	8006774 <__swbuf_r>
 80066bc:	4605      	mov	r5, r0
 80066be:	e7e3      	b.n	8006688 <_putc_r+0x4c>
 80066c0:	08006eec 	.word	0x08006eec
 80066c4:	08006f0c 	.word	0x08006f0c
 80066c8:	08006ecc 	.word	0x08006ecc

080066cc <_sbrk_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d06      	ldr	r5, [pc, #24]	; (80066e8 <_sbrk_r+0x1c>)
 80066d0:	2300      	movs	r3, #0
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa fec8 	bl	800146c <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_sbrk_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_sbrk_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20000314 	.word	0x20000314

080066ec <__sread>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	460c      	mov	r4, r1
 80066f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f4:	f000 faa8 	bl	8006c48 <_read_r>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	bfab      	itete	ge
 80066fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006700:	181b      	addge	r3, r3, r0
 8006702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006706:	bfac      	ite	ge
 8006708:	6563      	strge	r3, [r4, #84]	; 0x54
 800670a:	81a3      	strhlt	r3, [r4, #12]
 800670c:	bd10      	pop	{r4, pc}

0800670e <__swrite>:
 800670e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006712:	461f      	mov	r7, r3
 8006714:	898b      	ldrh	r3, [r1, #12]
 8006716:	05db      	lsls	r3, r3, #23
 8006718:	4605      	mov	r5, r0
 800671a:	460c      	mov	r4, r1
 800671c:	4616      	mov	r6, r2
 800671e:	d505      	bpl.n	800672c <__swrite+0x1e>
 8006720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006724:	2302      	movs	r3, #2
 8006726:	2200      	movs	r2, #0
 8006728:	f000 f9f8 	bl	8006b1c <_lseek_r>
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	4632      	mov	r2, r6
 800673a:	463b      	mov	r3, r7
 800673c:	4628      	mov	r0, r5
 800673e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006742:	f000 b869 	b.w	8006818 <_write_r>

08006746 <__sseek>:
 8006746:	b510      	push	{r4, lr}
 8006748:	460c      	mov	r4, r1
 800674a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674e:	f000 f9e5 	bl	8006b1c <_lseek_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	bf15      	itete	ne
 8006758:	6560      	strne	r0, [r4, #84]	; 0x54
 800675a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800675e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006762:	81a3      	strheq	r3, [r4, #12]
 8006764:	bf18      	it	ne
 8006766:	81a3      	strhne	r3, [r4, #12]
 8006768:	bd10      	pop	{r4, pc}

0800676a <__sclose>:
 800676a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800676e:	f000 b8f1 	b.w	8006954 <_close_r>
	...

08006774 <__swbuf_r>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	460e      	mov	r6, r1
 8006778:	4614      	mov	r4, r2
 800677a:	4605      	mov	r5, r0
 800677c:	b118      	cbz	r0, 8006786 <__swbuf_r+0x12>
 800677e:	6983      	ldr	r3, [r0, #24]
 8006780:	b90b      	cbnz	r3, 8006786 <__swbuf_r+0x12>
 8006782:	f7ff f8cb 	bl	800591c <__sinit>
 8006786:	4b21      	ldr	r3, [pc, #132]	; (800680c <__swbuf_r+0x98>)
 8006788:	429c      	cmp	r4, r3
 800678a:	d12b      	bne.n	80067e4 <__swbuf_r+0x70>
 800678c:	686c      	ldr	r4, [r5, #4]
 800678e:	69a3      	ldr	r3, [r4, #24]
 8006790:	60a3      	str	r3, [r4, #8]
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	071a      	lsls	r2, r3, #28
 8006796:	d52f      	bpl.n	80067f8 <__swbuf_r+0x84>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	b36b      	cbz	r3, 80067f8 <__swbuf_r+0x84>
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	6820      	ldr	r0, [r4, #0]
 80067a0:	1ac0      	subs	r0, r0, r3
 80067a2:	6963      	ldr	r3, [r4, #20]
 80067a4:	b2f6      	uxtb	r6, r6
 80067a6:	4283      	cmp	r3, r0
 80067a8:	4637      	mov	r7, r6
 80067aa:	dc04      	bgt.n	80067b6 <__swbuf_r+0x42>
 80067ac:	4621      	mov	r1, r4
 80067ae:	4628      	mov	r0, r5
 80067b0:	f000 f966 	bl	8006a80 <_fflush_r>
 80067b4:	bb30      	cbnz	r0, 8006804 <__swbuf_r+0x90>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	60a3      	str	r3, [r4, #8]
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	701e      	strb	r6, [r3, #0]
 80067c4:	6963      	ldr	r3, [r4, #20]
 80067c6:	3001      	adds	r0, #1
 80067c8:	4283      	cmp	r3, r0
 80067ca:	d004      	beq.n	80067d6 <__swbuf_r+0x62>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	07db      	lsls	r3, r3, #31
 80067d0:	d506      	bpl.n	80067e0 <__swbuf_r+0x6c>
 80067d2:	2e0a      	cmp	r6, #10
 80067d4:	d104      	bne.n	80067e0 <__swbuf_r+0x6c>
 80067d6:	4621      	mov	r1, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 f951 	bl	8006a80 <_fflush_r>
 80067de:	b988      	cbnz	r0, 8006804 <__swbuf_r+0x90>
 80067e0:	4638      	mov	r0, r7
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e4:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <__swbuf_r+0x9c>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d101      	bne.n	80067ee <__swbuf_r+0x7a>
 80067ea:	68ac      	ldr	r4, [r5, #8]
 80067ec:	e7cf      	b.n	800678e <__swbuf_r+0x1a>
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <__swbuf_r+0xa0>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	bf08      	it	eq
 80067f4:	68ec      	ldreq	r4, [r5, #12]
 80067f6:	e7ca      	b.n	800678e <__swbuf_r+0x1a>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f000 f81e 	bl	800683c <__swsetup_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	d0cb      	beq.n	800679c <__swbuf_r+0x28>
 8006804:	f04f 37ff 	mov.w	r7, #4294967295
 8006808:	e7ea      	b.n	80067e0 <__swbuf_r+0x6c>
 800680a:	bf00      	nop
 800680c:	08006eec 	.word	0x08006eec
 8006810:	08006f0c 	.word	0x08006f0c
 8006814:	08006ecc 	.word	0x08006ecc

08006818 <_write_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d07      	ldr	r5, [pc, #28]	; (8006838 <_write_r+0x20>)
 800681c:	4604      	mov	r4, r0
 800681e:	4608      	mov	r0, r1
 8006820:	4611      	mov	r1, r2
 8006822:	2200      	movs	r2, #0
 8006824:	602a      	str	r2, [r5, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	f7fa fdcf 	bl	80013ca <_write>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d102      	bne.n	8006836 <_write_r+0x1e>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	b103      	cbz	r3, 8006836 <_write_r+0x1e>
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	bd38      	pop	{r3, r4, r5, pc}
 8006838:	20000314 	.word	0x20000314

0800683c <__swsetup_r>:
 800683c:	4b32      	ldr	r3, [pc, #200]	; (8006908 <__swsetup_r+0xcc>)
 800683e:	b570      	push	{r4, r5, r6, lr}
 8006840:	681d      	ldr	r5, [r3, #0]
 8006842:	4606      	mov	r6, r0
 8006844:	460c      	mov	r4, r1
 8006846:	b125      	cbz	r5, 8006852 <__swsetup_r+0x16>
 8006848:	69ab      	ldr	r3, [r5, #24]
 800684a:	b913      	cbnz	r3, 8006852 <__swsetup_r+0x16>
 800684c:	4628      	mov	r0, r5
 800684e:	f7ff f865 	bl	800591c <__sinit>
 8006852:	4b2e      	ldr	r3, [pc, #184]	; (800690c <__swsetup_r+0xd0>)
 8006854:	429c      	cmp	r4, r3
 8006856:	d10f      	bne.n	8006878 <__swsetup_r+0x3c>
 8006858:	686c      	ldr	r4, [r5, #4]
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006860:	0719      	lsls	r1, r3, #28
 8006862:	d42c      	bmi.n	80068be <__swsetup_r+0x82>
 8006864:	06dd      	lsls	r5, r3, #27
 8006866:	d411      	bmi.n	800688c <__swsetup_r+0x50>
 8006868:	2309      	movs	r3, #9
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	e03e      	b.n	80068f6 <__swsetup_r+0xba>
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <__swsetup_r+0xd4>)
 800687a:	429c      	cmp	r4, r3
 800687c:	d101      	bne.n	8006882 <__swsetup_r+0x46>
 800687e:	68ac      	ldr	r4, [r5, #8]
 8006880:	e7eb      	b.n	800685a <__swsetup_r+0x1e>
 8006882:	4b24      	ldr	r3, [pc, #144]	; (8006914 <__swsetup_r+0xd8>)
 8006884:	429c      	cmp	r4, r3
 8006886:	bf08      	it	eq
 8006888:	68ec      	ldreq	r4, [r5, #12]
 800688a:	e7e6      	b.n	800685a <__swsetup_r+0x1e>
 800688c:	0758      	lsls	r0, r3, #29
 800688e:	d512      	bpl.n	80068b6 <__swsetup_r+0x7a>
 8006890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006892:	b141      	cbz	r1, 80068a6 <__swsetup_r+0x6a>
 8006894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006898:	4299      	cmp	r1, r3
 800689a:	d002      	beq.n	80068a2 <__swsetup_r+0x66>
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff fc93 	bl	80061c8 <_free_r>
 80068a2:	2300      	movs	r3, #0
 80068a4:	6363      	str	r3, [r4, #52]	; 0x34
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	2300      	movs	r3, #0
 80068b0:	6063      	str	r3, [r4, #4]
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	f043 0308 	orr.w	r3, r3, #8
 80068bc:	81a3      	strh	r3, [r4, #12]
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	b94b      	cbnz	r3, 80068d6 <__swsetup_r+0x9a>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d003      	beq.n	80068d6 <__swsetup_r+0x9a>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f95b 	bl	8006b8c <__smakebuf_r>
 80068d6:	89a0      	ldrh	r0, [r4, #12]
 80068d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068dc:	f010 0301 	ands.w	r3, r0, #1
 80068e0:	d00a      	beq.n	80068f8 <__swsetup_r+0xbc>
 80068e2:	2300      	movs	r3, #0
 80068e4:	60a3      	str	r3, [r4, #8]
 80068e6:	6963      	ldr	r3, [r4, #20]
 80068e8:	425b      	negs	r3, r3
 80068ea:	61a3      	str	r3, [r4, #24]
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	b943      	cbnz	r3, 8006902 <__swsetup_r+0xc6>
 80068f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068f4:	d1ba      	bne.n	800686c <__swsetup_r+0x30>
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	0781      	lsls	r1, r0, #30
 80068fa:	bf58      	it	pl
 80068fc:	6963      	ldrpl	r3, [r4, #20]
 80068fe:	60a3      	str	r3, [r4, #8]
 8006900:	e7f4      	b.n	80068ec <__swsetup_r+0xb0>
 8006902:	2000      	movs	r0, #0
 8006904:	e7f7      	b.n	80068f6 <__swsetup_r+0xba>
 8006906:	bf00      	nop
 8006908:	2000000c 	.word	0x2000000c
 800690c:	08006eec 	.word	0x08006eec
 8006910:	08006f0c 	.word	0x08006f0c
 8006914:	08006ecc 	.word	0x08006ecc

08006918 <__assert_func>:
 8006918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800691a:	4614      	mov	r4, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <__assert_func+0x2c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4605      	mov	r5, r0
 8006924:	68d8      	ldr	r0, [r3, #12]
 8006926:	b14c      	cbz	r4, 800693c <__assert_func+0x24>
 8006928:	4b07      	ldr	r3, [pc, #28]	; (8006948 <__assert_func+0x30>)
 800692a:	9100      	str	r1, [sp, #0]
 800692c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006930:	4906      	ldr	r1, [pc, #24]	; (800694c <__assert_func+0x34>)
 8006932:	462b      	mov	r3, r5
 8006934:	f000 f8e0 	bl	8006af8 <fiprintf>
 8006938:	f000 f9a5 	bl	8006c86 <abort>
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <__assert_func+0x38>)
 800693e:	461c      	mov	r4, r3
 8006940:	e7f3      	b.n	800692a <__assert_func+0x12>
 8006942:	bf00      	nop
 8006944:	2000000c 	.word	0x2000000c
 8006948:	08007095 	.word	0x08007095
 800694c:	080070a2 	.word	0x080070a2
 8006950:	080070d0 	.word	0x080070d0

08006954 <_close_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_close_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fa fd4f 	bl	8001402 <_close>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_close_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_close_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000314 	.word	0x20000314

08006974 <__sflush_r>:
 8006974:	898a      	ldrh	r2, [r1, #12]
 8006976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697a:	4605      	mov	r5, r0
 800697c:	0710      	lsls	r0, r2, #28
 800697e:	460c      	mov	r4, r1
 8006980:	d458      	bmi.n	8006a34 <__sflush_r+0xc0>
 8006982:	684b      	ldr	r3, [r1, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	dc05      	bgt.n	8006994 <__sflush_r+0x20>
 8006988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	dc02      	bgt.n	8006994 <__sflush_r+0x20>
 800698e:	2000      	movs	r0, #0
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006996:	2e00      	cmp	r6, #0
 8006998:	d0f9      	beq.n	800698e <__sflush_r+0x1a>
 800699a:	2300      	movs	r3, #0
 800699c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069a0:	682f      	ldr	r7, [r5, #0]
 80069a2:	602b      	str	r3, [r5, #0]
 80069a4:	d032      	beq.n	8006a0c <__sflush_r+0x98>
 80069a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	075a      	lsls	r2, r3, #29
 80069ac:	d505      	bpl.n	80069ba <__sflush_r+0x46>
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	1ac0      	subs	r0, r0, r3
 80069b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069b4:	b10b      	cbz	r3, 80069ba <__sflush_r+0x46>
 80069b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069b8:	1ac0      	subs	r0, r0, r3
 80069ba:	2300      	movs	r3, #0
 80069bc:	4602      	mov	r2, r0
 80069be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069c0:	6a21      	ldr	r1, [r4, #32]
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b0      	blx	r6
 80069c6:	1c43      	adds	r3, r0, #1
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	d106      	bne.n	80069da <__sflush_r+0x66>
 80069cc:	6829      	ldr	r1, [r5, #0]
 80069ce:	291d      	cmp	r1, #29
 80069d0:	d82c      	bhi.n	8006a2c <__sflush_r+0xb8>
 80069d2:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <__sflush_r+0x108>)
 80069d4:	40ca      	lsrs	r2, r1
 80069d6:	07d6      	lsls	r6, r2, #31
 80069d8:	d528      	bpl.n	8006a2c <__sflush_r+0xb8>
 80069da:	2200      	movs	r2, #0
 80069dc:	6062      	str	r2, [r4, #4]
 80069de:	04d9      	lsls	r1, r3, #19
 80069e0:	6922      	ldr	r2, [r4, #16]
 80069e2:	6022      	str	r2, [r4, #0]
 80069e4:	d504      	bpl.n	80069f0 <__sflush_r+0x7c>
 80069e6:	1c42      	adds	r2, r0, #1
 80069e8:	d101      	bne.n	80069ee <__sflush_r+0x7a>
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	b903      	cbnz	r3, 80069f0 <__sflush_r+0x7c>
 80069ee:	6560      	str	r0, [r4, #84]	; 0x54
 80069f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069f2:	602f      	str	r7, [r5, #0]
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d0ca      	beq.n	800698e <__sflush_r+0x1a>
 80069f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069fc:	4299      	cmp	r1, r3
 80069fe:	d002      	beq.n	8006a06 <__sflush_r+0x92>
 8006a00:	4628      	mov	r0, r5
 8006a02:	f7ff fbe1 	bl	80061c8 <_free_r>
 8006a06:	2000      	movs	r0, #0
 8006a08:	6360      	str	r0, [r4, #52]	; 0x34
 8006a0a:	e7c1      	b.n	8006990 <__sflush_r+0x1c>
 8006a0c:	6a21      	ldr	r1, [r4, #32]
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b0      	blx	r6
 8006a14:	1c41      	adds	r1, r0, #1
 8006a16:	d1c7      	bne.n	80069a8 <__sflush_r+0x34>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0c4      	beq.n	80069a8 <__sflush_r+0x34>
 8006a1e:	2b1d      	cmp	r3, #29
 8006a20:	d001      	beq.n	8006a26 <__sflush_r+0xb2>
 8006a22:	2b16      	cmp	r3, #22
 8006a24:	d101      	bne.n	8006a2a <__sflush_r+0xb6>
 8006a26:	602f      	str	r7, [r5, #0]
 8006a28:	e7b1      	b.n	800698e <__sflush_r+0x1a>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a30:	81a3      	strh	r3, [r4, #12]
 8006a32:	e7ad      	b.n	8006990 <__sflush_r+0x1c>
 8006a34:	690f      	ldr	r7, [r1, #16]
 8006a36:	2f00      	cmp	r7, #0
 8006a38:	d0a9      	beq.n	800698e <__sflush_r+0x1a>
 8006a3a:	0793      	lsls	r3, r2, #30
 8006a3c:	680e      	ldr	r6, [r1, #0]
 8006a3e:	bf08      	it	eq
 8006a40:	694b      	ldreq	r3, [r1, #20]
 8006a42:	600f      	str	r7, [r1, #0]
 8006a44:	bf18      	it	ne
 8006a46:	2300      	movne	r3, #0
 8006a48:	eba6 0807 	sub.w	r8, r6, r7
 8006a4c:	608b      	str	r3, [r1, #8]
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	dd9c      	ble.n	800698e <__sflush_r+0x1a>
 8006a54:	6a21      	ldr	r1, [r4, #32]
 8006a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a58:	4643      	mov	r3, r8
 8006a5a:	463a      	mov	r2, r7
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b0      	blx	r6
 8006a60:	2800      	cmp	r0, #0
 8006a62:	dc06      	bgt.n	8006a72 <__sflush_r+0xfe>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	e78e      	b.n	8006990 <__sflush_r+0x1c>
 8006a72:	4407      	add	r7, r0
 8006a74:	eba8 0800 	sub.w	r8, r8, r0
 8006a78:	e7e9      	b.n	8006a4e <__sflush_r+0xda>
 8006a7a:	bf00      	nop
 8006a7c:	20400001 	.word	0x20400001

08006a80 <_fflush_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	690b      	ldr	r3, [r1, #16]
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	b913      	cbnz	r3, 8006a90 <_fflush_r+0x10>
 8006a8a:	2500      	movs	r5, #0
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	b118      	cbz	r0, 8006a9a <_fflush_r+0x1a>
 8006a92:	6983      	ldr	r3, [r0, #24]
 8006a94:	b90b      	cbnz	r3, 8006a9a <_fflush_r+0x1a>
 8006a96:	f7fe ff41 	bl	800591c <__sinit>
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <_fflush_r+0x6c>)
 8006a9c:	429c      	cmp	r4, r3
 8006a9e:	d11b      	bne.n	8006ad8 <_fflush_r+0x58>
 8006aa0:	686c      	ldr	r4, [r5, #4]
 8006aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0ef      	beq.n	8006a8a <_fflush_r+0xa>
 8006aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006aac:	07d0      	lsls	r0, r2, #31
 8006aae:	d404      	bmi.n	8006aba <_fflush_r+0x3a>
 8006ab0:	0599      	lsls	r1, r3, #22
 8006ab2:	d402      	bmi.n	8006aba <_fflush_r+0x3a>
 8006ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ab6:	f7fe ffd4 	bl	8005a62 <__retarget_lock_acquire_recursive>
 8006aba:	4628      	mov	r0, r5
 8006abc:	4621      	mov	r1, r4
 8006abe:	f7ff ff59 	bl	8006974 <__sflush_r>
 8006ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ac4:	07da      	lsls	r2, r3, #31
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	d4e0      	bmi.n	8006a8c <_fflush_r+0xc>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	059b      	lsls	r3, r3, #22
 8006ace:	d4dd      	bmi.n	8006a8c <_fflush_r+0xc>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad2:	f7fe ffc7 	bl	8005a64 <__retarget_lock_release_recursive>
 8006ad6:	e7d9      	b.n	8006a8c <_fflush_r+0xc>
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <_fflush_r+0x70>)
 8006ada:	429c      	cmp	r4, r3
 8006adc:	d101      	bne.n	8006ae2 <_fflush_r+0x62>
 8006ade:	68ac      	ldr	r4, [r5, #8]
 8006ae0:	e7df      	b.n	8006aa2 <_fflush_r+0x22>
 8006ae2:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <_fflush_r+0x74>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	bf08      	it	eq
 8006ae8:	68ec      	ldreq	r4, [r5, #12]
 8006aea:	e7da      	b.n	8006aa2 <_fflush_r+0x22>
 8006aec:	08006eec 	.word	0x08006eec
 8006af0:	08006f0c 	.word	0x08006f0c
 8006af4:	08006ecc 	.word	0x08006ecc

08006af8 <fiprintf>:
 8006af8:	b40e      	push	{r1, r2, r3}
 8006afa:	b503      	push	{r0, r1, lr}
 8006afc:	4601      	mov	r1, r0
 8006afe:	ab03      	add	r3, sp, #12
 8006b00:	4805      	ldr	r0, [pc, #20]	; (8006b18 <fiprintf+0x20>)
 8006b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b06:	6800      	ldr	r0, [r0, #0]
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	f7ff fc67 	bl	80063dc <_vfiprintf_r>
 8006b0e:	b002      	add	sp, #8
 8006b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b14:	b003      	add	sp, #12
 8006b16:	4770      	bx	lr
 8006b18:	2000000c 	.word	0x2000000c

08006b1c <_lseek_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <_lseek_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fa fc90 	bl	8001450 <_lseek>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_lseek_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_lseek_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000314 	.word	0x20000314

08006b40 <__swhatbuf_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	460e      	mov	r6, r1
 8006b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	b096      	sub	sp, #88	; 0x58
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	461d      	mov	r5, r3
 8006b50:	da08      	bge.n	8006b64 <__swhatbuf_r+0x24>
 8006b52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	602a      	str	r2, [r5, #0]
 8006b5a:	061a      	lsls	r2, r3, #24
 8006b5c:	d410      	bmi.n	8006b80 <__swhatbuf_r+0x40>
 8006b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b62:	e00e      	b.n	8006b82 <__swhatbuf_r+0x42>
 8006b64:	466a      	mov	r2, sp
 8006b66:	f000 f895 	bl	8006c94 <_fstat_r>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	dbf1      	blt.n	8006b52 <__swhatbuf_r+0x12>
 8006b6e:	9a01      	ldr	r2, [sp, #4]
 8006b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b78:	425a      	negs	r2, r3
 8006b7a:	415a      	adcs	r2, r3
 8006b7c:	602a      	str	r2, [r5, #0]
 8006b7e:	e7ee      	b.n	8006b5e <__swhatbuf_r+0x1e>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	2000      	movs	r0, #0
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	b016      	add	sp, #88	; 0x58
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b8c <__smakebuf_r>:
 8006b8c:	898b      	ldrh	r3, [r1, #12]
 8006b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b90:	079d      	lsls	r5, r3, #30
 8006b92:	4606      	mov	r6, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	d507      	bpl.n	8006ba8 <__smakebuf_r+0x1c>
 8006b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	6123      	str	r3, [r4, #16]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	6163      	str	r3, [r4, #20]
 8006ba4:	b002      	add	sp, #8
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	ab01      	add	r3, sp, #4
 8006baa:	466a      	mov	r2, sp
 8006bac:	f7ff ffc8 	bl	8006b40 <__swhatbuf_r>
 8006bb0:	9900      	ldr	r1, [sp, #0]
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7ff fb73 	bl	80062a0 <_malloc_r>
 8006bba:	b948      	cbnz	r0, 8006bd0 <__smakebuf_r+0x44>
 8006bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc0:	059a      	lsls	r2, r3, #22
 8006bc2:	d4ef      	bmi.n	8006ba4 <__smakebuf_r+0x18>
 8006bc4:	f023 0303 	bic.w	r3, r3, #3
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	e7e3      	b.n	8006b98 <__smakebuf_r+0xc>
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <__smakebuf_r+0x7c>)
 8006bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	6020      	str	r0, [r4, #0]
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	81a3      	strh	r3, [r4, #12]
 8006bde:	9b00      	ldr	r3, [sp, #0]
 8006be0:	6163      	str	r3, [r4, #20]
 8006be2:	9b01      	ldr	r3, [sp, #4]
 8006be4:	6120      	str	r0, [r4, #16]
 8006be6:	b15b      	cbz	r3, 8006c00 <__smakebuf_r+0x74>
 8006be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 f863 	bl	8006cb8 <_isatty_r>
 8006bf2:	b128      	cbz	r0, 8006c00 <__smakebuf_r+0x74>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	89a0      	ldrh	r0, [r4, #12]
 8006c02:	4305      	orrs	r5, r0
 8006c04:	81a5      	strh	r5, [r4, #12]
 8006c06:	e7cd      	b.n	8006ba4 <__smakebuf_r+0x18>
 8006c08:	080058b5 	.word	0x080058b5

08006c0c <__ascii_mbtowc>:
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	b901      	cbnz	r1, 8006c12 <__ascii_mbtowc+0x6>
 8006c10:	a901      	add	r1, sp, #4
 8006c12:	b142      	cbz	r2, 8006c26 <__ascii_mbtowc+0x1a>
 8006c14:	b14b      	cbz	r3, 8006c2a <__ascii_mbtowc+0x1e>
 8006c16:	7813      	ldrb	r3, [r2, #0]
 8006c18:	600b      	str	r3, [r1, #0]
 8006c1a:	7812      	ldrb	r2, [r2, #0]
 8006c1c:	1e10      	subs	r0, r2, #0
 8006c1e:	bf18      	it	ne
 8006c20:	2001      	movne	r0, #1
 8006c22:	b002      	add	sp, #8
 8006c24:	4770      	bx	lr
 8006c26:	4610      	mov	r0, r2
 8006c28:	e7fb      	b.n	8006c22 <__ascii_mbtowc+0x16>
 8006c2a:	f06f 0001 	mvn.w	r0, #1
 8006c2e:	e7f8      	b.n	8006c22 <__ascii_mbtowc+0x16>

08006c30 <__malloc_lock>:
 8006c30:	4801      	ldr	r0, [pc, #4]	; (8006c38 <__malloc_lock+0x8>)
 8006c32:	f7fe bf16 	b.w	8005a62 <__retarget_lock_acquire_recursive>
 8006c36:	bf00      	nop
 8006c38:	20000308 	.word	0x20000308

08006c3c <__malloc_unlock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	; (8006c44 <__malloc_unlock+0x8>)
 8006c3e:	f7fe bf11 	b.w	8005a64 <__retarget_lock_release_recursive>
 8006c42:	bf00      	nop
 8006c44:	20000308 	.word	0x20000308

08006c48 <_read_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d07      	ldr	r5, [pc, #28]	; (8006c68 <_read_r+0x20>)
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	4608      	mov	r0, r1
 8006c50:	4611      	mov	r1, r2
 8006c52:	2200      	movs	r2, #0
 8006c54:	602a      	str	r2, [r5, #0]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7fa fb9a 	bl	8001390 <_read>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_read_r+0x1e>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_read_r+0x1e>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	20000314 	.word	0x20000314

08006c6c <__ascii_wctomb>:
 8006c6c:	b149      	cbz	r1, 8006c82 <__ascii_wctomb+0x16>
 8006c6e:	2aff      	cmp	r2, #255	; 0xff
 8006c70:	bf85      	ittet	hi
 8006c72:	238a      	movhi	r3, #138	; 0x8a
 8006c74:	6003      	strhi	r3, [r0, #0]
 8006c76:	700a      	strbls	r2, [r1, #0]
 8006c78:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c7c:	bf98      	it	ls
 8006c7e:	2001      	movls	r0, #1
 8006c80:	4770      	bx	lr
 8006c82:	4608      	mov	r0, r1
 8006c84:	4770      	bx	lr

08006c86 <abort>:
 8006c86:	b508      	push	{r3, lr}
 8006c88:	2006      	movs	r0, #6
 8006c8a:	f000 f84d 	bl	8006d28 <raise>
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f7fa fb74 	bl	800137c <_exit>

08006c94 <_fstat_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4d07      	ldr	r5, [pc, #28]	; (8006cb4 <_fstat_r+0x20>)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	602b      	str	r3, [r5, #0]
 8006ca2:	f7fa fbba 	bl	800141a <_fstat>
 8006ca6:	1c43      	adds	r3, r0, #1
 8006ca8:	d102      	bne.n	8006cb0 <_fstat_r+0x1c>
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	b103      	cbz	r3, 8006cb0 <_fstat_r+0x1c>
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000314 	.word	0x20000314

08006cb8 <_isatty_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	; (8006cd4 <_isatty_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7fa fbb9 	bl	800143a <_isatty>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_isatty_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_isatty_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20000314 	.word	0x20000314

08006cd8 <_raise_r>:
 8006cd8:	291f      	cmp	r1, #31
 8006cda:	b538      	push	{r3, r4, r5, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	460d      	mov	r5, r1
 8006ce0:	d904      	bls.n	8006cec <_raise_r+0x14>
 8006ce2:	2316      	movs	r3, #22
 8006ce4:	6003      	str	r3, [r0, #0]
 8006ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cee:	b112      	cbz	r2, 8006cf6 <_raise_r+0x1e>
 8006cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cf4:	b94b      	cbnz	r3, 8006d0a <_raise_r+0x32>
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f830 	bl	8006d5c <_getpid_r>
 8006cfc:	462a      	mov	r2, r5
 8006cfe:	4601      	mov	r1, r0
 8006d00:	4620      	mov	r0, r4
 8006d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d06:	f000 b817 	b.w	8006d38 <_kill_r>
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d00a      	beq.n	8006d24 <_raise_r+0x4c>
 8006d0e:	1c59      	adds	r1, r3, #1
 8006d10:	d103      	bne.n	8006d1a <_raise_r+0x42>
 8006d12:	2316      	movs	r3, #22
 8006d14:	6003      	str	r3, [r0, #0]
 8006d16:	2001      	movs	r0, #1
 8006d18:	e7e7      	b.n	8006cea <_raise_r+0x12>
 8006d1a:	2400      	movs	r4, #0
 8006d1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d20:	4628      	mov	r0, r5
 8006d22:	4798      	blx	r3
 8006d24:	2000      	movs	r0, #0
 8006d26:	e7e0      	b.n	8006cea <_raise_r+0x12>

08006d28 <raise>:
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <raise+0xc>)
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	f7ff bfd3 	b.w	8006cd8 <_raise_r>
 8006d32:	bf00      	nop
 8006d34:	2000000c 	.word	0x2000000c

08006d38 <_kill_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d07      	ldr	r5, [pc, #28]	; (8006d58 <_kill_r+0x20>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	602b      	str	r3, [r5, #0]
 8006d46:	f7fa fb09 	bl	800135c <_kill>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	d102      	bne.n	8006d54 <_kill_r+0x1c>
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	b103      	cbz	r3, 8006d54 <_kill_r+0x1c>
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	bd38      	pop	{r3, r4, r5, pc}
 8006d56:	bf00      	nop
 8006d58:	20000314 	.word	0x20000314

08006d5c <_getpid_r>:
 8006d5c:	f7fa baf6 	b.w	800134c <_getpid>

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
