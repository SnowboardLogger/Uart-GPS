
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006fc8  08006fc8  00016fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ec  080073ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f4  080073f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080073fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  080075d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080075d8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca20  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eac  00000000  00000000  0002cc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d23  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6f4  00000000  00000000  00050bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c26e1  00000000  00000000  0005d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  0011f9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fb0 	.word	0x08006fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006fb0 	.word	0x08006fb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fb32 	bl	800151a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f811 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f8c1 	bl	8001040 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ebe:	f000 f85f 	bl	8000f80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f88d 	bl	8000fe0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t * dataBuffer = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//The last parameter is the number of data elements to be received, this will need to be changed based on the max # bytes the GPS sends
	HAL_UART_Receive_IT(&huart1, dataBuffer, 4);
 8000eca:	2204      	movs	r2, #4
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <main+0x2c>)
 8000ed0:	f002 f910 	bl	80030f4 <HAL_UART_Receive_IT>
 8000ed4:	e7f9      	b.n	8000eca <main+0x1e>
 8000ed6:	bf00      	nop
 8000ed8:	200001f8 	.word	0x200001f8

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	2244      	movs	r2, #68	; 0x44
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fb42 	bl	8004574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000efe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f02:	f000 fe9f 	bl	8001c44 <HAL_PWREx_ControlVoltageScaling>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f0c:	f000 f8f4 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f10:	2310      	movs	r3, #16
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f20:	2302      	movs	r3, #2
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f30:	2307      	movs	r3, #7
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fed5 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f4c:	f000 f8d4 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2303      	movs	r3, #3
 8000f56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	2101      	movs	r1, #1
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 fad5 	bl	8002518 <HAL_RCC_ClockConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f74:	f000 f8c0 	bl	80010f8 <Error_Handler>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3758      	adds	r7, #88	; 0x58
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <MX_USART1_UART_Init+0x5c>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fc4:	f001 ffb4 	bl	8002f30 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fce:	f000 f893 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001f8 	.word	0x200001f8
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART2_UART_Init+0x58>)
 8001024:	f001 ff84 	bl	8002f30 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f000 f863 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000027c 	.word	0x2000027c
 800103c:	40004400 	.word	0x40004400

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_GPIO_Init+0x8c>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_GPIO_Init+0x8c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <MX_GPIO_Init+0x8c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_GPIO_Init+0x8c>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2108      	movs	r1, #8
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <MX_GPIO_Init+0x90>)
 80010a4:	f000 fda8 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80010a8:	2308      	movs	r3, #8
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_GPIO_Init+0x90>)
 80010c0:	f000 fc30 	bl	8001924 <HAL_GPIO_Init>

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80010dc:	1d39      	adds	r1, r7, #4
 80010de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e2:	2201      	movs	r2, #1
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <__io_putchar+0x20>)
 80010e6:	f001 ff71 	bl	8002fcc <HAL_UART_Transmit>
  return ch;
 80010ea:	687b      	ldr	r3, [r7, #4]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000027c 	.word	0x2000027c

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	e7fe      	b.n	8001100 <Error_Handler+0x8>
	...

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_MspInit+0x44>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_MspInit+0x44>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6613      	str	r3, [r2, #96]	; 0x60
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_MspInit+0x44>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x44>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x44>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6593      	str	r3, [r2, #88]	; 0x58
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x44>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0a0      	sub	sp, #128	; 0x80
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	2254      	movs	r2, #84	; 0x54
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fa01 	bl	8004574 <memset>
  if(huart->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a4b      	ldr	r2, [pc, #300]	; (80012a4 <HAL_UART_MspInit+0x158>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d140      	bne.n	80011fe <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fbe9 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001194:	f7ff ffb0 	bl	80010f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a2:	6613      	str	r3, [r2, #96]	; 0x60
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 80011a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a3c      	ldr	r2, [pc, #240]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011da:	2307      	movs	r3, #7
 80011dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 fb9c 	bl	8001924 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2025      	movs	r0, #37	; 0x25
 80011f2:	f000 fae2 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011f6:	2025      	movs	r0, #37	; 0x25
 80011f8:	f000 fafb 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fc:	e04d      	b.n	800129a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2a      	ldr	r2, [pc, #168]	; (80012ac <HAL_UART_MspInit+0x160>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d148      	bne.n	800129a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800120c:	2300      	movs	r3, #0
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fba3 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001220:	f7ff ff6a 	bl	80010f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 800122a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122e:	6593      	str	r3, [r2, #88]	; 0x58
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x15c>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001254:	2304      	movs	r3, #4
 8001256:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001264:	2307      	movs	r3, #7
 8001266:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f000 fb57 	bl	8001924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001288:	2303      	movs	r3, #3
 800128a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 fb45 	bl	8001924 <HAL_GPIO_Init>
}
 800129a:	bf00      	nop
 800129c:	3780      	adds	r7, #128	; 0x80
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40004400 	.word	0x40004400

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f962 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <USART1_IRQHandler+0x10>)
 800130a:	f001 ff49 	bl	80031a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */



  /* USER CODE END USART1_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001f8 	.word	0x200001f8

08001318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_kill>:

int _kill(int pid, int sig)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001332:	f003 f8f5 	bl	8004520 <__errno>
 8001336:	4603      	mov	r3, r0
 8001338:	2216      	movs	r2, #22
 800133a:	601a      	str	r2, [r3, #0]
  return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_exit>:

void _exit (int status)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffe7 	bl	8001328 <_kill>
  while (1) {}    /* Make sure we hang here */
 800135a:	e7fe      	b.n	800135a <_exit+0x12>

0800135c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00a      	b.n	8001384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136e:	f3af 8000 	nop.w
 8001372:	4601      	mov	r1, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf0      	blt.n	800136e <_read+0x12>
  }

  return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe8f 	bl	80010d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <_write+0x12>
  }
  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f6:	605a      	str	r2, [r3, #4]
  return 0;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_isatty>:

int _isatty(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <_sbrk+0x5c>)
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <_sbrk+0x60>)
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <_sbrk+0x64>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <_sbrk+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d207      	bcs.n	8001478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001468:	f003 f85a 	bl	8004520 <__errno>
 800146c:	4603      	mov	r3, r0
 800146e:	220c      	movs	r2, #12
 8001470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e009      	b.n	800148c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <_sbrk+0x64>)
 8001488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148a:	68fb      	ldr	r3, [r7, #12]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20010000 	.word	0x20010000
 8001498:	00000400 	.word	0x00000400
 800149c:	20000300 	.word	0x20000300
 80014a0:	20000318 	.word	0x20000318

080014a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	; (8001508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <LoopForever+0xe>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	; (8001514 <LoopForever+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f003 f819 	bl	800452c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff fcd7 	bl	8000eac <main>

080014fe <LoopForever>:

LoopForever:
    b LoopForever
 80014fe:	e7fe      	b.n	80014fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001500:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800150c:	080073fc 	.word	0x080073fc
  ldr r2, =_sbss
 8001510:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001514:	20000318 	.word	0x20000318

08001518 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_IRQHandler>

0800151a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f93d 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f80e 	bl	800154c <HAL_InitTick>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	e001      	b.n	8001540 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800153c:	f7ff fde2 	bl	8001104 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001540:	79fb      	ldrb	r3, [r7, #7]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_InitTick+0x6c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_InitTick+0x70>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f949 	bl	800180e <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d809      	bhi.n	800159c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 f913 	bl	80017ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_InitTick+0x74>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e007      	b.n	80015ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e004      	b.n	80015ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e001      	b.n	80015ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000304 	.word	0x20000304

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000304 	.word	0x20000304

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d008      	beq.n	8001850 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e022      	b.n	8001896 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020e 	bic.w	r2, r2, #14
 800185e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f003 021c 	and.w	r2, r3, #28
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e029      	b.n	800191a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020e 	bic.w	r2, r2, #14
 80018d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f003 021c 	and.w	r2, r3, #28
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
    }
  }
  return status;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e148      	b.n	8001bc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 813a 	beq.w	8001bc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d005      	beq.n	8001964 <HAL_GPIO_Init+0x40>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d017      	beq.n	8001a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d123      	bne.n	8001a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0203 	and.w	r2, r3, #3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8094 	beq.w	8001bc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a98:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9c:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_GPIO_Init+0x2c4>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1d4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1d0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1cc>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e004      	b.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af0:	2307      	movs	r3, #7
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af8:	2300      	movs	r3, #0
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b0a:	4937      	ldr	r1, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x2c4>)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f aeaf 	bne.w	8001934 <HAL_GPIO_Init+0x10>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	48000400 	.word	0x48000400
 8001bf0:	48000800 	.word	0x48000800
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40007000 	.word	0x40007000

08001c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c52:	d130      	bne.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c60:	d038      	beq.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2232      	movs	r2, #50	; 0x32
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	3301      	adds	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c88:	e002      	b.n	8001c90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9c:	d102      	bne.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f2      	bne.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb0:	d110      	bne.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e00f      	b.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d007      	beq.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	431bde83 	.word	0x431bde83

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f000 bc02 	b.w	8002508 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0e:	4b94      	ldr	r3, [pc, #592]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80e4 	beq.w	8001eee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4c>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	f040 808b 	bne.w	8001e4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	f040 8087 	bne.w	8001e4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3c:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_OscConfig+0x64>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e3d9      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_RCC_OscConfig+0x7e>
 8001d64:	4b7e      	ldr	r3, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	e005      	b.n	8001d7a <HAL_RCC_OscConfig+0x8a>
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d223      	bcs.n	8001dc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd8c 	bl	80028a0 <RCC_SetFlashLatencyFromMSIRange>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e3ba      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d92:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	496d      	ldr	r1, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db0:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	4968      	ldr	r1, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
 8001dc4:	e025      	b.n	8001e12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc6:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4960      	ldr	r1, [pc, #384]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de4:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	495b      	ldr	r1, [pc, #364]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fd4c 	bl	80028a0 <RCC_SetFlashLatencyFromMSIRange>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e37a      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e12:	f000 fc81 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	4950      	ldr	r1, [pc, #320]	; (8001f64 <HAL_RCC_OscConfig+0x274>)
 8001e24:	5ccb      	ldrb	r3, [r1, r3]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a4e      	ldr	r2, [pc, #312]	; (8001f68 <HAL_RCC_OscConfig+0x278>)
 8001e30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e32:	4b4e      	ldr	r3, [pc, #312]	; (8001f6c <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fb88 	bl	800154c <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d052      	beq.n	8001eec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	e35e      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d032      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a42      	ldr	r2, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fbc5 	bl	80015ec <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e66:	f7ff fbc1 	bl	80015ec <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e347      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e84:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a35      	ldr	r2, [pc, #212]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4930      	ldr	r1, [pc, #192]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	492b      	ldr	r1, [pc, #172]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
 8001eb6:	e01a      	b.n	8001eee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fb92 	bl	80015ec <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fb8e 	bl	80015ec <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e314      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1dc>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d073      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x21c>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d10e      	bne.n	8001f24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d063      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2f0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d15f      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e2f1      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCC_OscConfig+0x24c>
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e025      	b.n	8001f88 <HAL_RCC_OscConfig+0x298>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f44:	d114      	bne.n	8001f70 <HAL_RCC_OscConfig+0x280>
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a02      	ldr	r2, [pc, #8]	; (8001f60 <HAL_RCC_OscConfig+0x270>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e013      	b.n	8001f88 <HAL_RCC_OscConfig+0x298>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08006fc8 	.word	0x08006fc8
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	4ba0      	ldr	r3, [pc, #640]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a9f      	ldr	r2, [pc, #636]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b9d      	ldr	r3, [pc, #628]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a9c      	ldr	r2, [pc, #624]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fb2c 	bl	80015ec <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fb28 	bl	80015ec <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e2ae      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001faa:	4b92      	ldr	r3, [pc, #584]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x2a8>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fb18 	bl	80015ec <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fb14 	bl	80015ec <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e29a      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fd2:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2d0>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d060      	beq.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x310>
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d119      	bne.n	800202e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d116      	bne.n	800202e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002000:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_OscConfig+0x328>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e277      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b76      	ldr	r3, [pc, #472]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	4973      	ldr	r1, [pc, #460]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202c:	e040      	b.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d023      	beq.n	800207e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002036:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7ff fad3 	bl	80015ec <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7ff facf 	bl	80015ec <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e255      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205c:	4b65      	ldr	r3, [pc, #404]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	495f      	ldr	r1, [pc, #380]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e018      	b.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a5c      	ldr	r2, [pc, #368]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff faaf 	bl	80015ec <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002092:	f7ff faab 	bl	80015ec <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e231      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d03c      	beq.n	8002136 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01c      	beq.n	80020fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c4:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ca:	4a4a      	ldr	r2, [pc, #296]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d4:	f7ff fa8a 	bl	80015ec <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff fa86 	bl	80015ec <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e20c      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80020f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCC_OscConfig+0x3ec>
 80020fc:	e01b      	b.n	8002136 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	4a3b      	ldr	r2, [pc, #236]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7ff fa6d 	bl	80015ec <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002116:	f7ff fa69 	bl	80015ec <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1ef      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ef      	bne.n	8002116 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a6 	beq.w	8002290 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10d      	bne.n	8002170 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6593      	str	r3, [r2, #88]	; 0x58
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216c:	2301      	movs	r3, #1
 800216e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_OscConfig+0x508>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d118      	bne.n	80021ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_OscConfig+0x508>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x508>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002188:	f7ff fa30 	bl	80015ec <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002190:	f7ff fa2c 	bl	80015ec <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e1b2      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_RCC_OscConfig+0x508>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4d8>
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c6:	e029      	b.n	800221c <HAL_RCC_OscConfig+0x52c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d115      	bne.n	80021fc <HAL_RCC_OscConfig+0x50c>
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_RCC_OscConfig+0x504>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x52c>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
 80021fc:	4b9a      	ldr	r3, [pc, #616]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a99      	ldr	r2, [pc, #612]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220c:	4b96      	ldr	r3, [pc, #600]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a95      	ldr	r2, [pc, #596]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d016      	beq.n	8002252 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff f9e2 	bl	80015ec <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7ff f9de 	bl	80015ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e162      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ed      	beq.n	800222c <HAL_RCC_OscConfig+0x53c>
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff f9cb 	bl	80015ec <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff f9c7 	bl	80015ec <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e14b      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002270:	4b7d      	ldr	r3, [pc, #500]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ed      	bne.n	800225a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a77      	ldr	r2, [pc, #476]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 800228a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03c      	beq.n	8002316 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01c      	beq.n	80022de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022a4:	4b70      	ldr	r3, [pc, #448]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80022a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022aa:	4a6f      	ldr	r2, [pc, #444]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff f99a 	bl	80015ec <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022bc:	f7ff f996 	bl	80015ec <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e11c      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80022d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ef      	beq.n	80022bc <HAL_RCC_OscConfig+0x5cc>
 80022dc:	e01b      	b.n	8002316 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022de:	4b62      	ldr	r3, [pc, #392]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80022e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022e4:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff f97d 	bl	80015ec <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f6:	f7ff f979 	bl	80015ec <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0ff      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002308:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ef      	bne.n	80022f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80f3 	beq.w	8002506 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 80c9 	bne.w	80024bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800232a:	4b4f      	ldr	r3, [pc, #316]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0203 	and.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	429a      	cmp	r2, r3
 800233c:	d12c      	bne.n	8002398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	3b01      	subs	r3, #1
 800234a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d123      	bne.n	8002398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d11b      	bne.n	8002398 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d113      	bne.n	8002398 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	3b01      	subs	r3, #1
 800237e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d109      	bne.n	8002398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d06b      	beq.n	8002470 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d062      	beq.n	8002464 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0ac      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80023b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ba:	f7ff f917 	bl	80015ec <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff f913 	bl	80015ec <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e099      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <HAL_RCC_OscConfig+0x77c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f0:	3a01      	subs	r2, #1
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023fa:	0212      	lsls	r2, r2, #8
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	0552      	lsls	r2, r2, #21
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800240e:	0852      	lsrs	r2, r2, #1
 8002410:	3a01      	subs	r2, #1
 8002412:	0652      	lsls	r2, r2, #25
 8002414:	4311      	orrs	r1, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800241a:	06d2      	lsls	r2, r2, #27
 800241c:	430a      	orrs	r2, r1
 800241e:	4912      	ldr	r1, [pc, #72]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800243c:	f7ff f8d6 	bl	80015ec <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff f8d2 	bl	80015ec <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e058      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <HAL_RCC_OscConfig+0x778>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002462:	e050      	b.n	8002506 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e04f      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
 8002468:	40021000 	.word	0x40021000
 800246c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d144      	bne.n	8002506 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 8002482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a20      	ldr	r2, [pc, #128]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002494:	f7ff f8aa 	bl	80015ec <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7ff f8a6 	bl	80015ec <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e02c      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x7ac>
 80024ba:	e024      	b.n	8002506 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d01f      	beq.n	8002502 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 80024c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7ff f88d 	bl	80015ec <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff f889 	bl	80015ec <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e00f      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f0      	bne.n	80024d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	4905      	ldr	r1, [pc, #20]	; (8002510 <HAL_RCC_OscConfig+0x820>)
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x824>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	60cb      	str	r3, [r1, #12]
 8002500:	e001      	b.n	8002506 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	feeefffc 	.word	0xfeeefffc

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0e7      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b75      	ldr	r3, [pc, #468]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d910      	bls.n	800255c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b72      	ldr	r3, [pc, #456]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	4970      	ldr	r1, [pc, #448]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b6e      	ldr	r3, [pc, #440]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0cf      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002574:	429a      	cmp	r2, r3
 8002576:	d908      	bls.n	800258a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4960      	ldr	r1, [pc, #384]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04c      	beq.n	8002630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d121      	bne.n	80025ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0a6      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b6:	4b54      	ldr	r3, [pc, #336]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d115      	bne.n	80025ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e09a      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ce:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e08e      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e086      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f023 0203 	bic.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4943      	ldr	r1, [pc, #268]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002600:	f7fe fff4 	bl	80015ec <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	e00a      	b.n	800261e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002608:	f7fe fff0 	bl	80015ec <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e06e      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 020c 	and.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	429a      	cmp	r2, r3
 800262e:	d1eb      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002648:	429a      	cmp	r2, r3
 800264a:	d208      	bcs.n	800265e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	492b      	ldr	r1, [pc, #172]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d210      	bcs.n	800268e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 0207 	bic.w	r2, r3, #7
 8002674:	4923      	ldr	r1, [pc, #140]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCC_ClockConfig+0x1ec>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e036      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4918      	ldr	r1, [pc, #96]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4910      	ldr	r1, [pc, #64]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026cc:	f000 f824 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	490b      	ldr	r1, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x1f4>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1f8>)
 80026ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1fc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe ff2b 	bl	800154c <HAL_InitTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80026fa:	7afb      	ldrb	r3, [r7, #11]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	08006fc8 	.word	0x08006fc8
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002726:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002730:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x34>
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d121      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d11e      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002758:	4b31      	ldr	r3, [pc, #196]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275e:	0a1b      	lsrs	r3, r3, #8
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	e005      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d102      	bne.n	8002796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002790:	4b25      	ldr	r3, [pc, #148]	; (8002828 <HAL_RCC_GetSysClockFreq+0x110>)
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	e004      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_RCC_GetSysClockFreq+0x114>)
 800279e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d134      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0xa6>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d003      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0xac>
 80027bc:	e005      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c0:	617b      	str	r3, [r7, #20]
      break;
 80027c2:	e005      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_GetSysClockFreq+0x114>)
 80027c6:	617b      	str	r3, [r7, #20]
      break;
 80027c8:	e002      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	617b      	str	r3, [r7, #20]
      break;
 80027ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	3301      	adds	r3, #1
 80027dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	fb03 f202 	mul.w	r2, r3, r2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	0e5b      	lsrs	r3, r3, #25
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	3301      	adds	r3, #1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002810:	69bb      	ldr	r3, [r7, #24]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	08006fe0 	.word	0x08006fe0
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCC_GetHCLKFreq+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800284c:	f7ff fff0 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08006fd8 	.word	0x08006fd8

08002874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002878:	f7ff ffda 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800287c:	4602      	mov	r2, r0
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	0adb      	lsrs	r3, r3, #11
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	4904      	ldr	r1, [pc, #16]	; (800289c <HAL_RCC_GetPCLK2Freq+0x28>)
 800288a:	5ccb      	ldrb	r3, [r1, r3]
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	08006fd8 	.word	0x08006fd8

080028a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028b8:	f7ff f9b6 	bl	8001c28 <HAL_PWREx_GetVoltageRange>
 80028bc:	6178      	str	r0, [r7, #20]
 80028be:	e014      	b.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ca:	6593      	str	r3, [r2, #88]	; 0x58
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028d8:	f7ff f9a6 	bl	8001c28 <HAL_PWREx_GetVoltageRange>
 80028dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d10b      	bne.n	800290a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d919      	bls.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2ba0      	cmp	r3, #160	; 0xa0
 80028fc:	d902      	bls.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028fe:	2302      	movs	r3, #2
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e013      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002904:	2301      	movs	r3, #1
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	e010      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b80      	cmp	r3, #128	; 0x80
 800290e:	d902      	bls.n	8002916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002910:	2303      	movs	r3, #3
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	e00a      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d102      	bne.n	8002922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800291c:	2302      	movs	r3, #2
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	e004      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b70      	cmp	r3, #112	; 0x70
 8002926:	d101      	bne.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002928:	2301      	movs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f023 0207 	bic.w	r2, r3, #7
 8002934:	4909      	ldr	r1, [pc, #36]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40022000 	.word	0x40022000

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002968:	2300      	movs	r3, #0
 800296a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800296c:	2300      	movs	r3, #0
 800296e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002978:	2b00      	cmp	r3, #0
 800297a:	d031      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002984:	d01a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002986:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800298a:	d814      	bhi.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002994:	d10f      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002996:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a5c      	ldr	r2, [pc, #368]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a2:	e00c      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f9ce 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b4:	e003      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	74fb      	strb	r3, [r7, #19]
      break;
 80029ba:	e000      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80029bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029be:	7cfb      	ldrb	r3, [r7, #19]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029c4:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	494e      	ldr	r1, [pc, #312]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029da:	e001      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 809e 	beq.w	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029f2:	4b46      	ldr	r3, [pc, #280]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00d      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a39      	ldr	r2, [pc, #228]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a30:	f7fe fddc 	bl	80015ec <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a36:	e009      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fe fdd8 	bl	80015ec <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d902      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	74fb      	strb	r3, [r7, #19]
        break;
 8002a4a:	e005      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a4c:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0ef      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d15a      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01e      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d019      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa6:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d016      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fd98 	bl	80015ec <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fd94 	bl	80015ec <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ad6:	e006      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ec      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b02:	e009      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
 8002b08:	e006      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b18:	7c7b      	ldrb	r3, [r7, #17]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d105      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1e:	4b8a      	ldr	r3, [pc, #552]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	4a89      	ldr	r2, [pc, #548]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 0203 	bic.w	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4980      	ldr	r1, [pc, #512]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b58:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 020c 	bic.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	4978      	ldr	r1, [pc, #480]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7a:	4b73      	ldr	r3, [pc, #460]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	496f      	ldr	r1, [pc, #444]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	4967      	ldr	r1, [pc, #412]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bbe:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	495e      	ldr	r1, [pc, #376]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be0:	4b59      	ldr	r3, [pc, #356]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4956      	ldr	r1, [pc, #344]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	494d      	ldr	r1, [pc, #308]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d028      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c24:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4945      	ldr	r1, [pc, #276]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c42:	d106      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a3f      	ldr	r2, [pc, #252]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4e:	60d3      	str	r3, [r2, #12]
 8002c50:	e011      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f872 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	492d      	ldr	r1, [pc, #180]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cac:	60d3      	str	r3, [r2, #12]
 8002cae:	e011      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f843 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002cd0:	7cfb      	ldrb	r3, [r7, #19]
 8002cd2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01c      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce0:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cee:	4916      	ldr	r1, [pc, #88]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	2102      	movs	r1, #2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f820 	bl	8002d4c <RCCEx_PLLSAI1_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d34:	4904      	ldr	r1, [pc, #16]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000

08002d4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d5a:	4b74      	ldr	r3, [pc, #464]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d018      	beq.n	8002d98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d66:	4b71      	ldr	r3, [pc, #452]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0203 	and.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d10d      	bne.n	8002d92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
       ||
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d7e:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d047      	beq.n	8002e22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e044      	b.n	8002e22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d018      	beq.n	8002dd2 <RCCEx_PLLSAI1_Config+0x86>
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d825      	bhi.n	8002df0 <RCCEx_PLLSAI1_Config+0xa4>
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d002      	beq.n	8002dae <RCCEx_PLLSAI1_Config+0x62>
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d009      	beq.n	8002dc0 <RCCEx_PLLSAI1_Config+0x74>
 8002dac:	e020      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dae:	4b5f      	ldr	r3, [pc, #380]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d11d      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dbe:	e01a      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dc0:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d116      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd0:	e013      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dd2:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dde:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dee:	e006      	b.n	8002dfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      break;
 8002df4:	e004      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10d      	bne.n	8002e22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e06:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	4943      	ldr	r1, [pc, #268]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d17c      	bne.n	8002f22 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e28:	4b40      	ldr	r3, [pc, #256]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e34:	f7fe fbda 	bl	80015ec <HAL_GetTick>
 8002e38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e3a:	e009      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e3c:	f7fe fbd6 	bl	80015ec <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d902      	bls.n	8002e50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e4e:	e005      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ef      	bne.n	8002e3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d15f      	bne.n	8002f22 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d110      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	0211      	lsls	r1, r2, #8
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
 8002e7e:	06d2      	lsls	r2, r2, #27
 8002e80:	430a      	orrs	r2, r1
 8002e82:	492a      	ldr	r1, [pc, #168]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	610b      	str	r3, [r1, #16]
 8002e88:	e027      	b.n	8002eda <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d112      	bne.n	8002eb6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6892      	ldr	r2, [r2, #8]
 8002ea0:	0211      	lsls	r1, r2, #8
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6912      	ldr	r2, [r2, #16]
 8002ea6:	0852      	lsrs	r2, r2, #1
 8002ea8:	3a01      	subs	r2, #1
 8002eaa:	0552      	lsls	r2, r2, #21
 8002eac:	430a      	orrs	r2, r1
 8002eae:	491f      	ldr	r1, [pc, #124]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	610b      	str	r3, [r1, #16]
 8002eb4:	e011      	b.n	8002eda <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ebe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6892      	ldr	r2, [r2, #8]
 8002ec6:	0211      	lsls	r1, r2, #8
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6952      	ldr	r2, [r2, #20]
 8002ecc:	0852      	lsrs	r2, r2, #1
 8002ece:	3a01      	subs	r2, #1
 8002ed0:	0652      	lsls	r2, r2, #25
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	4915      	ldr	r1, [pc, #84]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fb81 	bl	80015ec <HAL_GetTick>
 8002eea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eec:	e009      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eee:	f7fe fb7d 	bl	80015ec <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d902      	bls.n	8002f02 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	73fb      	strb	r3, [r7, #15]
          break;
 8002f00:	e005      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0ef      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e040      	b.n	8002fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe f8fa 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fc22 	bl	80037b8 <UART_SetConfig>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e022      	b.n	8002fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fe42 	bl	8003c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fec9 	bl	8003d54 <UART_CheckIdleState>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	f040 8082 	bne.w	80030ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_UART_Transmit+0x26>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07a      	b.n	80030ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x38>
 8003000:	2302      	movs	r3, #2
 8003002:	e073      	b.n	80030ec <HAL_UART_Transmit+0x120>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2221      	movs	r2, #33	; 0x21
 8003018:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fe fae7 	bl	80015ec <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	d108      	bne.n	800304c <HAL_UART_Transmit+0x80>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e003      	b.n	8003054 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800305c:	e02d      	b.n	80030ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 febc 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e039      	b.n	80030ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	881a      	ldrh	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308a:	b292      	uxth	r2, r2
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	3302      	adds	r3, #2
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e008      	b.n	80030a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b292      	uxth	r2, r2
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1cb      	bne.n	800305e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fe88 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e005      	b.n	80030ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003106:	2b20      	cmp	r3, #32
 8003108:	d142      	bne.n	8003190 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_UART_Receive_IT+0x22>
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e03b      	b.n	8003192 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_UART_Receive_IT+0x34>
 8003124:	2302      	movs	r3, #2
 8003126:	e034      	b.n	8003192 <HAL_UART_Receive_IT+0x9e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a18      	ldr	r2, [pc, #96]	; (800319c <HAL_UART_Receive_IT+0xa8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d01f      	beq.n	8003180 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d018      	beq.n	8003180 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	e853 3f00 	ldrex	r3, [r3]
 800315a:	613b      	str	r3, [r7, #16]
   return(result);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	623b      	str	r3, [r7, #32]
 800316e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	69f9      	ldr	r1, [r7, #28]
 8003172:	6a3a      	ldr	r2, [r7, #32]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	61bb      	str	r3, [r7, #24]
   return(result);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e6      	bne.n	800314e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	461a      	mov	r2, r3
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fef2 	bl	8003f70 <UART_Start_Receive_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	e000      	b.n	8003192 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3728      	adds	r7, #40	; 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40008000 	.word	0x40008000

080031a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b0ba      	sub	sp, #232	; 0xe8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80031ce:	4013      	ands	r3, r2
 80031d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d115      	bne.n	8003208 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00f      	beq.n	8003208 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 82a6 	beq.w	800374a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
      }
      return;
 8003206:	e2a0      	b.n	800374a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8117 	beq.w	8003440 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800321e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003222:	4b85      	ldr	r3, [pc, #532]	; (8003438 <HAL_UART_IRQHandler+0x298>)
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 810a 	beq.w	8003440 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800322c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d011      	beq.n	800325c <HAL_UART_IRQHandler+0xbc>
 8003238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d011      	beq.n	800328c <HAL_UART_IRQHandler+0xec>
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2202      	movs	r2, #2
 800327a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003282:	f043 0204 	orr.w	r2, r3, #4
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d011      	beq.n	80032bc <HAL_UART_IRQHandler+0x11c>
 8003298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2204      	movs	r2, #4
 80032aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d017      	beq.n	80032f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2208      	movs	r2, #8
 80032e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_UART_IRQHandler+0x18a>
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003308:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 820c 	beq.w	800374e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d005      	beq.n	8003382 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800337a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04f      	beq.n	8003422 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 febe 	bl	8004104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d141      	bne.n	800341a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3308      	adds	r3, #8
 800339c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d013      	beq.n	8003412 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_UART_IRQHandler+0x29c>)
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fa53 	bl	80018a2 <HAL_DMA_Abort_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d017      	beq.n	8003432 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800340c:	4610      	mov	r0, r2
 800340e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	e00f      	b.n	8003432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9ba 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	e00b      	b.n	8003432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f9b6 	bl	800378c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	e007      	b.n	8003432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9b2 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003430:	e18d      	b.n	800374e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003432:	bf00      	nop
    return;
 8003434:	e18b      	b.n	800374e <HAL_UART_IRQHandler+0x5ae>
 8003436:	bf00      	nop
 8003438:	04000120 	.word	0x04000120
 800343c:	080041cb 	.word	0x080041cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 8146 	bne.w	80036d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 813f 	beq.w	80036d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8138 	beq.w	80036d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	f040 80b4 	bne.w	80035e6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800348a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 815f 	beq.w	8003752 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800349e:	429a      	cmp	r2, r3
 80034a0:	f080 8157 	bcs.w	8003752 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 8085 	bne.w	80035ca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1da      	bne.n	80034c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	3308      	adds	r3, #8
 8003510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800351a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800352e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e1      	bne.n	800350a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800356a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800356c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e3      	bne.n	8003546 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80035ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e4      	bne.n	800358a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe f92e 	bl	8001826 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8de 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035e4:	e0b5      	b.n	8003752 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80a7 	beq.w	8003756 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a2 	beq.w	8003756 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003634:	647b      	str	r3, [r7, #68]	; 0x44
 8003636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800363a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e4      	bne.n	8003612 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	623b      	str	r3, [r7, #32]
   return(result);
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800366c:	633a      	str	r2, [r7, #48]	; 0x30
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e3      	bne.n	8003648 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	60fb      	str	r3, [r7, #12]
   return(result);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0310 	bic.w	r3, r3, #16
 80036a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	69b9      	ldr	r1, [r7, #24]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	617b      	str	r3, [r7, #20]
   return(result);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e4      	bne.n	8003692 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f866 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d4:	e03f      	b.n	8003756 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <HAL_UART_IRQHandler+0x560>
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 ff06 	bl	800450a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036fe:	e02d      	b.n	800375c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01c      	beq.n	800375a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
    }
    return;
 8003728:	e017      	b.n	800375a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_UART_IRQHandler+0x5bc>
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fd57 	bl	80041f6 <UART_EndTransmit_IT>
    return;
 8003748:	e008      	b.n	800375c <HAL_UART_IRQHandler+0x5bc>
      return;
 800374a:	bf00      	nop
 800374c:	e006      	b.n	800375c <HAL_UART_IRQHandler+0x5bc>
    return;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_UART_IRQHandler+0x5bc>
      return;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_UART_IRQHandler+0x5bc>
    return;
 800375a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800375c:	37e8      	adds	r7, #232	; 0xe8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037bc:	b08a      	sub	sp, #40	; 0x28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4313      	orrs	r3, r2
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4bb4      	ldr	r3, [pc, #720]	; (8003ab8 <UART_SetConfig+0x300>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4aa9      	ldr	r2, [pc, #676]	; (8003abc <UART_SetConfig+0x304>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	4313      	orrs	r3, r2
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4aa0      	ldr	r2, [pc, #640]	; (8003ac0 <UART_SetConfig+0x308>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d126      	bne.n	8003890 <UART_SetConfig+0xd8>
 8003842:	4ba0      	ldr	r3, [pc, #640]	; (8003ac4 <UART_SetConfig+0x30c>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d81b      	bhi.n	8003888 <UART_SetConfig+0xd0>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0xa0>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003869 	.word	0x08003869
 800385c:	08003879 	.word	0x08003879
 8003860:	08003871 	.word	0x08003871
 8003864:	08003881 	.word	0x08003881
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e080      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003870:	2302      	movs	r3, #2
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003876:	e07c      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003878:	2304      	movs	r3, #4
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e078      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003880:	2308      	movs	r3, #8
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003886:	e074      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003888:	2310      	movs	r3, #16
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e070      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a8c      	ldr	r2, [pc, #560]	; (8003ac8 <UART_SetConfig+0x310>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d138      	bne.n	800390c <UART_SetConfig+0x154>
 800389a:	4b8a      	ldr	r3, [pc, #552]	; (8003ac4 <UART_SetConfig+0x30c>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d82d      	bhi.n	8003904 <UART_SetConfig+0x14c>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0xf8>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	08003905 	.word	0x08003905
 80038b8:	08003905 	.word	0x08003905
 80038bc:	08003905 	.word	0x08003905
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	08003905 	.word	0x08003905
 80038c8:	08003905 	.word	0x08003905
 80038cc:	08003905 	.word	0x08003905
 80038d0:	080038ed 	.word	0x080038ed
 80038d4:	08003905 	.word	0x08003905
 80038d8:	08003905 	.word	0x08003905
 80038dc:	08003905 	.word	0x08003905
 80038e0:	080038fd 	.word	0x080038fd
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ea:	e042      	b.n	8003972 <UART_SetConfig+0x1ba>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e03e      	b.n	8003972 <UART_SetConfig+0x1ba>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e03a      	b.n	8003972 <UART_SetConfig+0x1ba>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e036      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e032      	b.n	8003972 <UART_SetConfig+0x1ba>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6a      	ldr	r2, [pc, #424]	; (8003abc <UART_SetConfig+0x304>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d12a      	bne.n	800396c <UART_SetConfig+0x1b4>
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <UART_SetConfig+0x30c>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003924:	d01a      	beq.n	800395c <UART_SetConfig+0x1a4>
 8003926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800392a:	d81b      	bhi.n	8003964 <UART_SetConfig+0x1ac>
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003930:	d00c      	beq.n	800394c <UART_SetConfig+0x194>
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d815      	bhi.n	8003964 <UART_SetConfig+0x1ac>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <UART_SetConfig+0x18c>
 800393c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003940:	d008      	beq.n	8003954 <UART_SetConfig+0x19c>
 8003942:	e00f      	b.n	8003964 <UART_SetConfig+0x1ac>
 8003944:	2300      	movs	r3, #0
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394a:	e012      	b.n	8003972 <UART_SetConfig+0x1ba>
 800394c:	2302      	movs	r3, #2
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e00e      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003954:	2304      	movs	r3, #4
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e00a      	b.n	8003972 <UART_SetConfig+0x1ba>
 800395c:	2308      	movs	r3, #8
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e006      	b.n	8003972 <UART_SetConfig+0x1ba>
 8003964:	2310      	movs	r3, #16
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e002      	b.n	8003972 <UART_SetConfig+0x1ba>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a51      	ldr	r2, [pc, #324]	; (8003abc <UART_SetConfig+0x304>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d17a      	bne.n	8003a72 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800397c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003980:	2b08      	cmp	r3, #8
 8003982:	d824      	bhi.n	80039ce <UART_SetConfig+0x216>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x1d4>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039cf 	.word	0x080039cf
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039cf 	.word	0x080039cf
 800399c:	080039bf 	.word	0x080039bf
 80039a0:	080039cf 	.word	0x080039cf
 80039a4:	080039cf 	.word	0x080039cf
 80039a8:	080039cf 	.word	0x080039cf
 80039ac:	080039c7 	.word	0x080039c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7fe ff4a 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 80039b4:	61f8      	str	r0, [r7, #28]
        break;
 80039b6:	e010      	b.n	80039da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b8:	4b44      	ldr	r3, [pc, #272]	; (8003acc <UART_SetConfig+0x314>)
 80039ba:	61fb      	str	r3, [r7, #28]
        break;
 80039bc:	e00d      	b.n	80039da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039be:	f7fe feab 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80039c2:	61f8      	str	r0, [r7, #28]
        break;
 80039c4:	e009      	b.n	80039da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ca:	61fb      	str	r3, [r7, #28]
        break;
 80039cc:	e005      	b.n	80039da <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8107 	beq.w	8003bf0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	4413      	add	r3, r2
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d305      	bcc.n	80039fe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d903      	bls.n	8003a06 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a04:	e0f4      	b.n	8003bf0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	461c      	mov	r4, r3
 8003a0c:	4615      	mov	r5, r2
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	022b      	lsls	r3, r5, #8
 8003a18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a1c:	0222      	lsls	r2, r4, #8
 8003a1e:	68f9      	ldr	r1, [r7, #12]
 8003a20:	6849      	ldr	r1, [r1, #4]
 8003a22:	0849      	lsrs	r1, r1, #1
 8003a24:	2000      	movs	r0, #0
 8003a26:	4688      	mov	r8, r1
 8003a28:	4681      	mov	r9, r0
 8003a2a:	eb12 0a08 	adds.w	sl, r2, r8
 8003a2e:	eb43 0b09 	adc.w	fp, r3, r9
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a40:	4650      	mov	r0, sl
 8003a42:	4659      	mov	r1, fp
 8003a44:	f7fd f8b0 	bl	8000ba8 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a56:	d308      	bcc.n	8003a6a <UART_SetConfig+0x2b2>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d204      	bcs.n	8003a6a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e0c2      	b.n	8003bf0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a70:	e0be      	b.n	8003bf0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7a:	d16a      	bne.n	8003b52 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d834      	bhi.n	8003aee <UART_SetConfig+0x336>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x2d4>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ad1 	.word	0x08003ad1
 8003a94:	08003ad9 	.word	0x08003ad9
 8003a98:	08003aef 	.word	0x08003aef
 8003a9c:	08003adf 	.word	0x08003adf
 8003aa0:	08003aef 	.word	0x08003aef
 8003aa4:	08003aef 	.word	0x08003aef
 8003aa8:	08003aef 	.word	0x08003aef
 8003aac:	08003ae7 	.word	0x08003ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe feca 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	61f8      	str	r0, [r7, #28]
        break;
 8003ab6:	e020      	b.n	8003afa <UART_SetConfig+0x342>
 8003ab8:	efff69f3 	.word	0xefff69f3
 8003abc:	40008000 	.word	0x40008000
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad0:	f7fe fed0 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 8003ad4:	61f8      	str	r0, [r7, #28]
        break;
 8003ad6:	e010      	b.n	8003afa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <UART_SetConfig+0x454>)
 8003ada:	61fb      	str	r3, [r7, #28]
        break;
 8003adc:	e00d      	b.n	8003afa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ade:	f7fe fe1b 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8003ae2:	61f8      	str	r0, [r7, #28]
        break;
 8003ae4:	e009      	b.n	8003afa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aea:	61fb      	str	r3, [r7, #28]
        break;
 8003aec:	e005      	b.n	8003afa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d077      	beq.n	8003bf0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	005a      	lsls	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	441a      	add	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	2b0f      	cmp	r3, #15
 8003b1a:	d916      	bls.n	8003b4a <UART_SetConfig+0x392>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b22:	d212      	bcs.n	8003b4a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f023 030f 	bic.w	r3, r3, #15
 8003b2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	8afb      	ldrh	r3, [r7, #22]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	8afa      	ldrh	r2, [r7, #22]
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	e052      	b.n	8003bf0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b50:	e04e      	b.n	8003bf0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d827      	bhi.n	8003baa <UART_SetConfig+0x3f2>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <UART_SetConfig+0x3a8>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003b8d 	.word	0x08003b8d
 8003b68:	08003b95 	.word	0x08003b95
 8003b6c:	08003bab 	.word	0x08003bab
 8003b70:	08003b9b 	.word	0x08003b9b
 8003b74:	08003bab 	.word	0x08003bab
 8003b78:	08003bab 	.word	0x08003bab
 8003b7c:	08003bab 	.word	0x08003bab
 8003b80:	08003ba3 	.word	0x08003ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7fe fe60 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8003b88:	61f8      	str	r0, [r7, #28]
        break;
 8003b8a:	e014      	b.n	8003bb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b8c:	f7fe fe72 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 8003b90:	61f8      	str	r0, [r7, #28]
        break;
 8003b92:	e010      	b.n	8003bb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <UART_SetConfig+0x454>)
 8003b96:	61fb      	str	r3, [r7, #28]
        break;
 8003b98:	e00d      	b.n	8003bb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9a:	f7fe fdbd 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8003b9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ba0:	e009      	b.n	8003bb6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba6:	61fb      	str	r3, [r7, #28]
        break;
 8003ba8:	e005      	b.n	8003bb6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	085a      	lsrs	r2, r3, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b0f      	cmp	r3, #15
 8003bd4:	d909      	bls.n	8003bea <UART_SetConfig+0x432>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bdc:	d205      	bcs.n	8003bea <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60da      	str	r2, [r3, #12]
 8003be8:	e002      	b.n	8003bf0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003bfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3728      	adds	r7, #40	; 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	00f42400 	.word	0x00f42400

08003c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01a      	beq.n	8003d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0e:	d10a      	bne.n	8003d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d64:	f7fd fc42 	bl	80015ec <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10e      	bne.n	8003d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f82d 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e023      	b.n	8003dde <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d10e      	bne.n	8003dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f817 	bl	8003de6 <UART_WaitOnFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00d      	b.n	8003dde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b09c      	sub	sp, #112	; 0x70
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	e0a5      	b.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	f000 80a1 	beq.w	8003f44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e02:	f7fd fbf3 	bl	80015ec <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d302      	bcc.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d13e      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e6      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	663b      	str	r3, [r7, #96]	; 0x60
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3308      	adds	r3, #8
 8003e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e067      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d04f      	beq.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb2:	d147      	bne.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ebc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	613b      	str	r3, [r7, #16]
   return(result);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f10:	623a      	str	r2, [r7, #32]
 8003f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	69f9      	ldr	r1, [r7, #28]
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e010      	b.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	f43f af4a 	beq.w	8003df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3770      	adds	r7, #112	; 0x70
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b097      	sub	sp, #92	; 0x5c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d10e      	bne.n	8003fc2 <UART_Start_Receive_IT+0x52>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <UART_Start_Receive_IT+0x48>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb6:	e02d      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fc0:	e028      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10d      	bne.n	8003fe6 <UART_Start_Receive_IT+0x76>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <UART_Start_Receive_IT+0x6c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	22ff      	movs	r2, #255	; 0xff
 8003fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fda:	e01b      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	227f      	movs	r2, #127	; 0x7f
 8003fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fe4:	e016      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fee:	d10d      	bne.n	800400c <UART_Start_Receive_IT+0x9c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <UART_Start_Receive_IT+0x92>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	227f      	movs	r2, #127	; 0x7f
 8003ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004000:	e008      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	223f      	movs	r2, #63	; 0x3f
 8004006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400a:	e003      	b.n	8004014 <UART_Start_Receive_IT+0xa4>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2222      	movs	r2, #34	; 0x22
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	657b      	str	r3, [r7, #84]	; 0x54
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004042:	64ba      	str	r2, [r7, #72]	; 0x48
 8004044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d107      	bne.n	8004070 <UART_Start_Receive_IT+0x100>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a24      	ldr	r2, [pc, #144]	; (80040fc <UART_Start_Receive_IT+0x18c>)
 800406c:	665a      	str	r2, [r3, #100]	; 0x64
 800406e:	e002      	b.n	8004076 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a23      	ldr	r2, [pc, #140]	; (8004100 <UART_Start_Receive_IT+0x190>)
 8004074:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d019      	beq.n	80040ba <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	461a      	mov	r2, r3
 80040a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e6      	bne.n	8004086 <UART_Start_Receive_IT+0x116>
 80040b8:	e018      	b.n	80040ec <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	613b      	str	r3, [r7, #16]
   return(result);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f043 0320 	orr.w	r3, r3, #32
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	623b      	str	r3, [r7, #32]
 80040da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	6a3a      	ldr	r2, [r7, #32]
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e6      	bne.n	80040ba <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	375c      	adds	r7, #92	; 0x5c
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	080043ab 	.word	0x080043ab
 8004100:	0800424b 	.word	0x0800424b

08004104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b095      	sub	sp, #84	; 0x54
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e6      	bne.n	800410c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	61fb      	str	r3, [r7, #28]
   return(result);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	2b01      	cmp	r3, #1
 8004178:	d118      	bne.n	80041ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	60bb      	str	r3, [r7, #8]
   return(result);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	613b      	str	r3, [r7, #16]
   return(result);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e6      	bne.n	800417a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041be:	bf00      	nop
 80041c0:	3754      	adds	r7, #84	; 0x54
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff facf 	bl	800378c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b088      	sub	sp, #32
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60bb      	str	r3, [r7, #8]
   return(result);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6979      	ldr	r1, [r7, #20]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	613b      	str	r3, [r7, #16]
   return(result);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fa91 	bl	8003764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b096      	sub	sp, #88	; 0x58
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004260:	2b22      	cmp	r3, #34	; 0x22
 8004262:	f040 8094 	bne.w	800438e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800426c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004270:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004274:	b2d9      	uxtb	r1, r3
 8004276:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800427a:	b2da      	uxtb	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	400a      	ands	r2, r1
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d179      	bne.n	80043a2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c2:	653b      	str	r3, [r7, #80]	; 0x50
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
 80042ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	623b      	str	r3, [r7, #32]
   return(result);
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004300:	633a      	str	r2, [r7, #48]	; 0x30
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004324:	2b01      	cmp	r3, #1
 8004326:	d12e      	bne.n	8004386 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60fb      	str	r3, [r7, #12]
   return(result);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	617b      	str	r3, [r7, #20]
   return(result);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d103      	bne.n	8004376 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2210      	movs	r2, #16
 8004374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fa0e 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004384:	e00d      	b.n	80043a2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff f9f6 	bl	8003778 <HAL_UART_RxCpltCallback>
}
 800438c:	e009      	b.n	80043a2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	8b1b      	ldrh	r3, [r3, #24]
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	b292      	uxth	r2, r2
 80043a0:	831a      	strh	r2, [r3, #24]
}
 80043a2:	bf00      	nop
 80043a4:	3758      	adds	r7, #88	; 0x58
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b096      	sub	sp, #88	; 0x58
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	2b22      	cmp	r3, #34	; 0x22
 80043c2:	f040 8094 	bne.w	80044ee <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80043d6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80043da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043de:	4013      	ands	r3, r2
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d179      	bne.n	8004502 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e5      	bne.n	8004440 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	2b01      	cmp	r3, #1
 8004486:	d12e      	bne.n	80044e6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60bb      	str	r3, [r7, #8]
   return(result);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0310 	bic.w	r3, r3, #16
 80044a2:	647b      	str	r3, [r7, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d103      	bne.n	80044d6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff f95e 	bl	80037a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044e4:	e00d      	b.n	8004502 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff f946 	bl	8003778 <HAL_UART_RxCpltCallback>
}
 80044ec:	e009      	b.n	8004502 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	8b1b      	ldrh	r3, [r3, #24]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	b292      	uxth	r2, r2
 8004500:	831a      	strh	r2, [r3, #24]
}
 8004502:	bf00      	nop
 8004504:	3758      	adds	r7, #88	; 0x58
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <__errno>:
 8004520:	4b01      	ldr	r3, [pc, #4]	; (8004528 <__errno+0x8>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	2000000c 	.word	0x2000000c

0800452c <__libc_init_array>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4d0d      	ldr	r5, [pc, #52]	; (8004564 <__libc_init_array+0x38>)
 8004530:	4c0d      	ldr	r4, [pc, #52]	; (8004568 <__libc_init_array+0x3c>)
 8004532:	1b64      	subs	r4, r4, r5
 8004534:	10a4      	asrs	r4, r4, #2
 8004536:	2600      	movs	r6, #0
 8004538:	42a6      	cmp	r6, r4
 800453a:	d109      	bne.n	8004550 <__libc_init_array+0x24>
 800453c:	4d0b      	ldr	r5, [pc, #44]	; (800456c <__libc_init_array+0x40>)
 800453e:	4c0c      	ldr	r4, [pc, #48]	; (8004570 <__libc_init_array+0x44>)
 8004540:	f002 fd36 	bl	8006fb0 <_init>
 8004544:	1b64      	subs	r4, r4, r5
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	2600      	movs	r6, #0
 800454a:	42a6      	cmp	r6, r4
 800454c:	d105      	bne.n	800455a <__libc_init_array+0x2e>
 800454e:	bd70      	pop	{r4, r5, r6, pc}
 8004550:	f855 3b04 	ldr.w	r3, [r5], #4
 8004554:	4798      	blx	r3
 8004556:	3601      	adds	r6, #1
 8004558:	e7ee      	b.n	8004538 <__libc_init_array+0xc>
 800455a:	f855 3b04 	ldr.w	r3, [r5], #4
 800455e:	4798      	blx	r3
 8004560:	3601      	adds	r6, #1
 8004562:	e7f2      	b.n	800454a <__libc_init_array+0x1e>
 8004564:	080073f4 	.word	0x080073f4
 8004568:	080073f4 	.word	0x080073f4
 800456c:	080073f4 	.word	0x080073f4
 8004570:	080073f8 	.word	0x080073f8

08004574 <memset>:
 8004574:	4402      	add	r2, r0
 8004576:	4603      	mov	r3, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	d100      	bne.n	800457e <memset+0xa>
 800457c:	4770      	bx	lr
 800457e:	f803 1b01 	strb.w	r1, [r3], #1
 8004582:	e7f9      	b.n	8004578 <memset+0x4>

08004584 <__cvt>:
 8004584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	ec55 4b10 	vmov	r4, r5, d0
 800458c:	2d00      	cmp	r5, #0
 800458e:	460e      	mov	r6, r1
 8004590:	4619      	mov	r1, r3
 8004592:	462b      	mov	r3, r5
 8004594:	bfbb      	ittet	lt
 8004596:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800459a:	461d      	movlt	r5, r3
 800459c:	2300      	movge	r3, #0
 800459e:	232d      	movlt	r3, #45	; 0x2d
 80045a0:	700b      	strb	r3, [r1, #0]
 80045a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80045a8:	4691      	mov	r9, r2
 80045aa:	f023 0820 	bic.w	r8, r3, #32
 80045ae:	bfbc      	itt	lt
 80045b0:	4622      	movlt	r2, r4
 80045b2:	4614      	movlt	r4, r2
 80045b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045b8:	d005      	beq.n	80045c6 <__cvt+0x42>
 80045ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045be:	d100      	bne.n	80045c2 <__cvt+0x3e>
 80045c0:	3601      	adds	r6, #1
 80045c2:	2102      	movs	r1, #2
 80045c4:	e000      	b.n	80045c8 <__cvt+0x44>
 80045c6:	2103      	movs	r1, #3
 80045c8:	ab03      	add	r3, sp, #12
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	ab02      	add	r3, sp, #8
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	ec45 4b10 	vmov	d0, r4, r5
 80045d4:	4653      	mov	r3, sl
 80045d6:	4632      	mov	r2, r6
 80045d8:	f000 fcca 	bl	8004f70 <_dtoa_r>
 80045dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045e0:	4607      	mov	r7, r0
 80045e2:	d102      	bne.n	80045ea <__cvt+0x66>
 80045e4:	f019 0f01 	tst.w	r9, #1
 80045e8:	d022      	beq.n	8004630 <__cvt+0xac>
 80045ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045ee:	eb07 0906 	add.w	r9, r7, r6
 80045f2:	d110      	bne.n	8004616 <__cvt+0x92>
 80045f4:	783b      	ldrb	r3, [r7, #0]
 80045f6:	2b30      	cmp	r3, #48	; 0x30
 80045f8:	d10a      	bne.n	8004610 <__cvt+0x8c>
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	4620      	mov	r0, r4
 8004600:	4629      	mov	r1, r5
 8004602:	f7fc fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8004606:	b918      	cbnz	r0, 8004610 <__cvt+0x8c>
 8004608:	f1c6 0601 	rsb	r6, r6, #1
 800460c:	f8ca 6000 	str.w	r6, [sl]
 8004610:	f8da 3000 	ldr.w	r3, [sl]
 8004614:	4499      	add	r9, r3
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f7fc fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8004622:	b108      	cbz	r0, 8004628 <__cvt+0xa4>
 8004624:	f8cd 900c 	str.w	r9, [sp, #12]
 8004628:	2230      	movs	r2, #48	; 0x30
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	454b      	cmp	r3, r9
 800462e:	d307      	bcc.n	8004640 <__cvt+0xbc>
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004634:	1bdb      	subs	r3, r3, r7
 8004636:	4638      	mov	r0, r7
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	b004      	add	sp, #16
 800463c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	9103      	str	r1, [sp, #12]
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e7f0      	b.n	800462a <__cvt+0xa6>

08004648 <__exponent>:
 8004648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800464a:	4603      	mov	r3, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	bfb8      	it	lt
 8004650:	4249      	neglt	r1, r1
 8004652:	f803 2b02 	strb.w	r2, [r3], #2
 8004656:	bfb4      	ite	lt
 8004658:	222d      	movlt	r2, #45	; 0x2d
 800465a:	222b      	movge	r2, #43	; 0x2b
 800465c:	2909      	cmp	r1, #9
 800465e:	7042      	strb	r2, [r0, #1]
 8004660:	dd2a      	ble.n	80046b8 <__exponent+0x70>
 8004662:	f10d 0407 	add.w	r4, sp, #7
 8004666:	46a4      	mov	ip, r4
 8004668:	270a      	movs	r7, #10
 800466a:	46a6      	mov	lr, r4
 800466c:	460a      	mov	r2, r1
 800466e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004672:	fb07 1516 	mls	r5, r7, r6, r1
 8004676:	3530      	adds	r5, #48	; 0x30
 8004678:	2a63      	cmp	r2, #99	; 0x63
 800467a:	f104 34ff 	add.w	r4, r4, #4294967295
 800467e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004682:	4631      	mov	r1, r6
 8004684:	dcf1      	bgt.n	800466a <__exponent+0x22>
 8004686:	3130      	adds	r1, #48	; 0x30
 8004688:	f1ae 0502 	sub.w	r5, lr, #2
 800468c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004690:	1c44      	adds	r4, r0, #1
 8004692:	4629      	mov	r1, r5
 8004694:	4561      	cmp	r1, ip
 8004696:	d30a      	bcc.n	80046ae <__exponent+0x66>
 8004698:	f10d 0209 	add.w	r2, sp, #9
 800469c:	eba2 020e 	sub.w	r2, r2, lr
 80046a0:	4565      	cmp	r5, ip
 80046a2:	bf88      	it	hi
 80046a4:	2200      	movhi	r2, #0
 80046a6:	4413      	add	r3, r2
 80046a8:	1a18      	subs	r0, r3, r0
 80046aa:	b003      	add	sp, #12
 80046ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046b6:	e7ed      	b.n	8004694 <__exponent+0x4c>
 80046b8:	2330      	movs	r3, #48	; 0x30
 80046ba:	3130      	adds	r1, #48	; 0x30
 80046bc:	7083      	strb	r3, [r0, #2]
 80046be:	70c1      	strb	r1, [r0, #3]
 80046c0:	1d03      	adds	r3, r0, #4
 80046c2:	e7f1      	b.n	80046a8 <__exponent+0x60>

080046c4 <_printf_float>:
 80046c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	ed2d 8b02 	vpush	{d8}
 80046cc:	b08d      	sub	sp, #52	; 0x34
 80046ce:	460c      	mov	r4, r1
 80046d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046d4:	4616      	mov	r6, r2
 80046d6:	461f      	mov	r7, r3
 80046d8:	4605      	mov	r5, r0
 80046da:	f001 fa37 	bl	8005b4c <_localeconv_r>
 80046de:	f8d0 a000 	ldr.w	sl, [r0]
 80046e2:	4650      	mov	r0, sl
 80046e4:	f7fb fd74 	bl	80001d0 <strlen>
 80046e8:	2300      	movs	r3, #0
 80046ea:	930a      	str	r3, [sp, #40]	; 0x28
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	f8d8 3000 	ldr.w	r3, [r8]
 80046f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046f8:	3307      	adds	r3, #7
 80046fa:	f023 0307 	bic.w	r3, r3, #7
 80046fe:	f103 0208 	add.w	r2, r3, #8
 8004702:	f8c8 2000 	str.w	r2, [r8]
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800470e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004712:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004716:	9307      	str	r3, [sp, #28]
 8004718:	f8cd 8018 	str.w	r8, [sp, #24]
 800471c:	ee08 0a10 	vmov	s16, r0
 8004720:	4b9f      	ldr	r3, [pc, #636]	; (80049a0 <_printf_float+0x2dc>)
 8004722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	f7fc f9ff 	bl	8000b2c <__aeabi_dcmpun>
 800472e:	bb88      	cbnz	r0, 8004794 <_printf_float+0xd0>
 8004730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004734:	4b9a      	ldr	r3, [pc, #616]	; (80049a0 <_printf_float+0x2dc>)
 8004736:	f04f 32ff 	mov.w	r2, #4294967295
 800473a:	f7fc f9d9 	bl	8000af0 <__aeabi_dcmple>
 800473e:	bb48      	cbnz	r0, 8004794 <_printf_float+0xd0>
 8004740:	2200      	movs	r2, #0
 8004742:	2300      	movs	r3, #0
 8004744:	4640      	mov	r0, r8
 8004746:	4649      	mov	r1, r9
 8004748:	f7fc f9c8 	bl	8000adc <__aeabi_dcmplt>
 800474c:	b110      	cbz	r0, 8004754 <_printf_float+0x90>
 800474e:	232d      	movs	r3, #45	; 0x2d
 8004750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004754:	4b93      	ldr	r3, [pc, #588]	; (80049a4 <_printf_float+0x2e0>)
 8004756:	4894      	ldr	r0, [pc, #592]	; (80049a8 <_printf_float+0x2e4>)
 8004758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800475c:	bf94      	ite	ls
 800475e:	4698      	movls	r8, r3
 8004760:	4680      	movhi	r8, r0
 8004762:	2303      	movs	r3, #3
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	9b05      	ldr	r3, [sp, #20]
 8004768:	f023 0204 	bic.w	r2, r3, #4
 800476c:	6022      	str	r2, [r4, #0]
 800476e:	f04f 0900 	mov.w	r9, #0
 8004772:	9700      	str	r7, [sp, #0]
 8004774:	4633      	mov	r3, r6
 8004776:	aa0b      	add	r2, sp, #44	; 0x2c
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f000 f9d8 	bl	8004b30 <_printf_common>
 8004780:	3001      	adds	r0, #1
 8004782:	f040 8090 	bne.w	80048a6 <_printf_float+0x1e2>
 8004786:	f04f 30ff 	mov.w	r0, #4294967295
 800478a:	b00d      	add	sp, #52	; 0x34
 800478c:	ecbd 8b02 	vpop	{d8}
 8004790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	4640      	mov	r0, r8
 800479a:	4649      	mov	r1, r9
 800479c:	f7fc f9c6 	bl	8000b2c <__aeabi_dcmpun>
 80047a0:	b140      	cbz	r0, 80047b4 <_printf_float+0xf0>
 80047a2:	464b      	mov	r3, r9
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bfbc      	itt	lt
 80047a8:	232d      	movlt	r3, #45	; 0x2d
 80047aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047ae:	487f      	ldr	r0, [pc, #508]	; (80049ac <_printf_float+0x2e8>)
 80047b0:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <_printf_float+0x2ec>)
 80047b2:	e7d1      	b.n	8004758 <_printf_float+0x94>
 80047b4:	6863      	ldr	r3, [r4, #4]
 80047b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80047ba:	9206      	str	r2, [sp, #24]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	d13f      	bne.n	8004840 <_printf_float+0x17c>
 80047c0:	2306      	movs	r3, #6
 80047c2:	6063      	str	r3, [r4, #4]
 80047c4:	9b05      	ldr	r3, [sp, #20]
 80047c6:	6861      	ldr	r1, [r4, #4]
 80047c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047cc:	2300      	movs	r3, #0
 80047ce:	9303      	str	r3, [sp, #12]
 80047d0:	ab0a      	add	r3, sp, #40	; 0x28
 80047d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047d6:	ab09      	add	r3, sp, #36	; 0x24
 80047d8:	ec49 8b10 	vmov	d0, r8, r9
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	6022      	str	r2, [r4, #0]
 80047e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047e4:	4628      	mov	r0, r5
 80047e6:	f7ff fecd 	bl	8004584 <__cvt>
 80047ea:	9b06      	ldr	r3, [sp, #24]
 80047ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ee:	2b47      	cmp	r3, #71	; 0x47
 80047f0:	4680      	mov	r8, r0
 80047f2:	d108      	bne.n	8004806 <_printf_float+0x142>
 80047f4:	1cc8      	adds	r0, r1, #3
 80047f6:	db02      	blt.n	80047fe <_printf_float+0x13a>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	4299      	cmp	r1, r3
 80047fc:	dd41      	ble.n	8004882 <_printf_float+0x1be>
 80047fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004802:	fa5f fb8b 	uxtb.w	fp, fp
 8004806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800480a:	d820      	bhi.n	800484e <_printf_float+0x18a>
 800480c:	3901      	subs	r1, #1
 800480e:	465a      	mov	r2, fp
 8004810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004814:	9109      	str	r1, [sp, #36]	; 0x24
 8004816:	f7ff ff17 	bl	8004648 <__exponent>
 800481a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800481c:	1813      	adds	r3, r2, r0
 800481e:	2a01      	cmp	r2, #1
 8004820:	4681      	mov	r9, r0
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	dc02      	bgt.n	800482c <_printf_float+0x168>
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	07d2      	lsls	r2, r2, #31
 800482a:	d501      	bpl.n	8004830 <_printf_float+0x16c>
 800482c:	3301      	adds	r3, #1
 800482e:	6123      	str	r3, [r4, #16]
 8004830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004834:	2b00      	cmp	r3, #0
 8004836:	d09c      	beq.n	8004772 <_printf_float+0xae>
 8004838:	232d      	movs	r3, #45	; 0x2d
 800483a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800483e:	e798      	b.n	8004772 <_printf_float+0xae>
 8004840:	9a06      	ldr	r2, [sp, #24]
 8004842:	2a47      	cmp	r2, #71	; 0x47
 8004844:	d1be      	bne.n	80047c4 <_printf_float+0x100>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1bc      	bne.n	80047c4 <_printf_float+0x100>
 800484a:	2301      	movs	r3, #1
 800484c:	e7b9      	b.n	80047c2 <_printf_float+0xfe>
 800484e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004852:	d118      	bne.n	8004886 <_printf_float+0x1c2>
 8004854:	2900      	cmp	r1, #0
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	dd0b      	ble.n	8004872 <_printf_float+0x1ae>
 800485a:	6121      	str	r1, [r4, #16]
 800485c:	b913      	cbnz	r3, 8004864 <_printf_float+0x1a0>
 800485e:	6822      	ldr	r2, [r4, #0]
 8004860:	07d0      	lsls	r0, r2, #31
 8004862:	d502      	bpl.n	800486a <_printf_float+0x1a6>
 8004864:	3301      	adds	r3, #1
 8004866:	440b      	add	r3, r1
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	65a1      	str	r1, [r4, #88]	; 0x58
 800486c:	f04f 0900 	mov.w	r9, #0
 8004870:	e7de      	b.n	8004830 <_printf_float+0x16c>
 8004872:	b913      	cbnz	r3, 800487a <_printf_float+0x1b6>
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	07d2      	lsls	r2, r2, #31
 8004878:	d501      	bpl.n	800487e <_printf_float+0x1ba>
 800487a:	3302      	adds	r3, #2
 800487c:	e7f4      	b.n	8004868 <_printf_float+0x1a4>
 800487e:	2301      	movs	r3, #1
 8004880:	e7f2      	b.n	8004868 <_printf_float+0x1a4>
 8004882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004888:	4299      	cmp	r1, r3
 800488a:	db05      	blt.n	8004898 <_printf_float+0x1d4>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	6121      	str	r1, [r4, #16]
 8004890:	07d8      	lsls	r0, r3, #31
 8004892:	d5ea      	bpl.n	800486a <_printf_float+0x1a6>
 8004894:	1c4b      	adds	r3, r1, #1
 8004896:	e7e7      	b.n	8004868 <_printf_float+0x1a4>
 8004898:	2900      	cmp	r1, #0
 800489a:	bfd4      	ite	le
 800489c:	f1c1 0202 	rsble	r2, r1, #2
 80048a0:	2201      	movgt	r2, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	e7e0      	b.n	8004868 <_printf_float+0x1a4>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	055a      	lsls	r2, r3, #21
 80048aa:	d407      	bmi.n	80048bc <_printf_float+0x1f8>
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	4642      	mov	r2, r8
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	d12c      	bne.n	8004914 <_printf_float+0x250>
 80048ba:	e764      	b.n	8004786 <_printf_float+0xc2>
 80048bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048c0:	f240 80e0 	bls.w	8004a84 <_printf_float+0x3c0>
 80048c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048c8:	2200      	movs	r2, #0
 80048ca:	2300      	movs	r3, #0
 80048cc:	f7fc f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d034      	beq.n	800493e <_printf_float+0x27a>
 80048d4:	4a37      	ldr	r2, [pc, #220]	; (80049b4 <_printf_float+0x2f0>)
 80048d6:	2301      	movs	r3, #1
 80048d8:	4631      	mov	r1, r6
 80048da:	4628      	mov	r0, r5
 80048dc:	47b8      	blx	r7
 80048de:	3001      	adds	r0, #1
 80048e0:	f43f af51 	beq.w	8004786 <_printf_float+0xc2>
 80048e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e8:	429a      	cmp	r2, r3
 80048ea:	db02      	blt.n	80048f2 <_printf_float+0x22e>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07d8      	lsls	r0, r3, #31
 80048f0:	d510      	bpl.n	8004914 <_printf_float+0x250>
 80048f2:	ee18 3a10 	vmov	r3, s16
 80048f6:	4652      	mov	r2, sl
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f af41 	beq.w	8004786 <_printf_float+0xc2>
 8004904:	f04f 0800 	mov.w	r8, #0
 8004908:	f104 091a 	add.w	r9, r4, #26
 800490c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800490e:	3b01      	subs	r3, #1
 8004910:	4543      	cmp	r3, r8
 8004912:	dc09      	bgt.n	8004928 <_printf_float+0x264>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	079b      	lsls	r3, r3, #30
 8004918:	f100 8105 	bmi.w	8004b26 <_printf_float+0x462>
 800491c:	68e0      	ldr	r0, [r4, #12]
 800491e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004920:	4298      	cmp	r0, r3
 8004922:	bfb8      	it	lt
 8004924:	4618      	movlt	r0, r3
 8004926:	e730      	b.n	800478a <_printf_float+0xc6>
 8004928:	2301      	movs	r3, #1
 800492a:	464a      	mov	r2, r9
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	f43f af27 	beq.w	8004786 <_printf_float+0xc2>
 8004938:	f108 0801 	add.w	r8, r8, #1
 800493c:	e7e6      	b.n	800490c <_printf_float+0x248>
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	dc39      	bgt.n	80049b8 <_printf_float+0x2f4>
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <_printf_float+0x2f0>)
 8004946:	2301      	movs	r3, #1
 8004948:	4631      	mov	r1, r6
 800494a:	4628      	mov	r0, r5
 800494c:	47b8      	blx	r7
 800494e:	3001      	adds	r0, #1
 8004950:	f43f af19 	beq.w	8004786 <_printf_float+0xc2>
 8004954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004958:	4313      	orrs	r3, r2
 800495a:	d102      	bne.n	8004962 <_printf_float+0x29e>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	07d9      	lsls	r1, r3, #31
 8004960:	d5d8      	bpl.n	8004914 <_printf_float+0x250>
 8004962:	ee18 3a10 	vmov	r3, s16
 8004966:	4652      	mov	r2, sl
 8004968:	4631      	mov	r1, r6
 800496a:	4628      	mov	r0, r5
 800496c:	47b8      	blx	r7
 800496e:	3001      	adds	r0, #1
 8004970:	f43f af09 	beq.w	8004786 <_printf_float+0xc2>
 8004974:	f04f 0900 	mov.w	r9, #0
 8004978:	f104 0a1a 	add.w	sl, r4, #26
 800497c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497e:	425b      	negs	r3, r3
 8004980:	454b      	cmp	r3, r9
 8004982:	dc01      	bgt.n	8004988 <_printf_float+0x2c4>
 8004984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004986:	e792      	b.n	80048ae <_printf_float+0x1ea>
 8004988:	2301      	movs	r3, #1
 800498a:	4652      	mov	r2, sl
 800498c:	4631      	mov	r1, r6
 800498e:	4628      	mov	r0, r5
 8004990:	47b8      	blx	r7
 8004992:	3001      	adds	r0, #1
 8004994:	f43f aef7 	beq.w	8004786 <_printf_float+0xc2>
 8004998:	f109 0901 	add.w	r9, r9, #1
 800499c:	e7ee      	b.n	800497c <_printf_float+0x2b8>
 800499e:	bf00      	nop
 80049a0:	7fefffff 	.word	0x7fefffff
 80049a4:	08007014 	.word	0x08007014
 80049a8:	08007018 	.word	0x08007018
 80049ac:	08007020 	.word	0x08007020
 80049b0:	0800701c 	.word	0x0800701c
 80049b4:	08007024 	.word	0x08007024
 80049b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049bc:	429a      	cmp	r2, r3
 80049be:	bfa8      	it	ge
 80049c0:	461a      	movge	r2, r3
 80049c2:	2a00      	cmp	r2, #0
 80049c4:	4691      	mov	r9, r2
 80049c6:	dc37      	bgt.n	8004a38 <_printf_float+0x374>
 80049c8:	f04f 0b00 	mov.w	fp, #0
 80049cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d0:	f104 021a 	add.w	r2, r4, #26
 80049d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049d6:	9305      	str	r3, [sp, #20]
 80049d8:	eba3 0309 	sub.w	r3, r3, r9
 80049dc:	455b      	cmp	r3, fp
 80049de:	dc33      	bgt.n	8004a48 <_printf_float+0x384>
 80049e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049e4:	429a      	cmp	r2, r3
 80049e6:	db3b      	blt.n	8004a60 <_printf_float+0x39c>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07da      	lsls	r2, r3, #31
 80049ec:	d438      	bmi.n	8004a60 <_printf_float+0x39c>
 80049ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f0:	9a05      	ldr	r2, [sp, #20]
 80049f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049f4:	1a9a      	subs	r2, r3, r2
 80049f6:	eba3 0901 	sub.w	r9, r3, r1
 80049fa:	4591      	cmp	r9, r2
 80049fc:	bfa8      	it	ge
 80049fe:	4691      	movge	r9, r2
 8004a00:	f1b9 0f00 	cmp.w	r9, #0
 8004a04:	dc35      	bgt.n	8004a72 <_printf_float+0x3ae>
 8004a06:	f04f 0800 	mov.w	r8, #0
 8004a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0e:	f104 0a1a 	add.w	sl, r4, #26
 8004a12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	eba3 0309 	sub.w	r3, r3, r9
 8004a1c:	4543      	cmp	r3, r8
 8004a1e:	f77f af79 	ble.w	8004914 <_printf_float+0x250>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4652      	mov	r2, sl
 8004a26:	4631      	mov	r1, r6
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b8      	blx	r7
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f43f aeaa 	beq.w	8004786 <_printf_float+0xc2>
 8004a32:	f108 0801 	add.w	r8, r8, #1
 8004a36:	e7ec      	b.n	8004a12 <_printf_float+0x34e>
 8004a38:	4613      	mov	r3, r2
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	d1c0      	bne.n	80049c8 <_printf_float+0x304>
 8004a46:	e69e      	b.n	8004786 <_printf_float+0xc2>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	9205      	str	r2, [sp, #20]
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	f43f ae97 	beq.w	8004786 <_printf_float+0xc2>
 8004a58:	9a05      	ldr	r2, [sp, #20]
 8004a5a:	f10b 0b01 	add.w	fp, fp, #1
 8004a5e:	e7b9      	b.n	80049d4 <_printf_float+0x310>
 8004a60:	ee18 3a10 	vmov	r3, s16
 8004a64:	4652      	mov	r2, sl
 8004a66:	4631      	mov	r1, r6
 8004a68:	4628      	mov	r0, r5
 8004a6a:	47b8      	blx	r7
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d1be      	bne.n	80049ee <_printf_float+0x32a>
 8004a70:	e689      	b.n	8004786 <_printf_float+0xc2>
 8004a72:	9a05      	ldr	r2, [sp, #20]
 8004a74:	464b      	mov	r3, r9
 8004a76:	4442      	add	r2, r8
 8004a78:	4631      	mov	r1, r6
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d1c1      	bne.n	8004a06 <_printf_float+0x342>
 8004a82:	e680      	b.n	8004786 <_printf_float+0xc2>
 8004a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a86:	2a01      	cmp	r2, #1
 8004a88:	dc01      	bgt.n	8004a8e <_printf_float+0x3ca>
 8004a8a:	07db      	lsls	r3, r3, #31
 8004a8c:	d538      	bpl.n	8004b00 <_printf_float+0x43c>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4642      	mov	r2, r8
 8004a92:	4631      	mov	r1, r6
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b8      	blx	r7
 8004a98:	3001      	adds	r0, #1
 8004a9a:	f43f ae74 	beq.w	8004786 <_printf_float+0xc2>
 8004a9e:	ee18 3a10 	vmov	r3, s16
 8004aa2:	4652      	mov	r2, sl
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f43f ae6b 	beq.w	8004786 <_printf_float+0xc2>
 8004ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f7fc f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8004abc:	b9d8      	cbnz	r0, 8004af6 <_printf_float+0x432>
 8004abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac0:	f108 0201 	add.w	r2, r8, #1
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	d10e      	bne.n	8004aee <_printf_float+0x42a>
 8004ad0:	e659      	b.n	8004786 <_printf_float+0xc2>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4652      	mov	r2, sl
 8004ad6:	4631      	mov	r1, r6
 8004ad8:	4628      	mov	r0, r5
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	f43f ae52 	beq.w	8004786 <_printf_float+0xc2>
 8004ae2:	f108 0801 	add.w	r8, r8, #1
 8004ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	4543      	cmp	r3, r8
 8004aec:	dcf1      	bgt.n	8004ad2 <_printf_float+0x40e>
 8004aee:	464b      	mov	r3, r9
 8004af0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004af4:	e6dc      	b.n	80048b0 <_printf_float+0x1ec>
 8004af6:	f04f 0800 	mov.w	r8, #0
 8004afa:	f104 0a1a 	add.w	sl, r4, #26
 8004afe:	e7f2      	b.n	8004ae6 <_printf_float+0x422>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4642      	mov	r2, r8
 8004b04:	e7df      	b.n	8004ac6 <_printf_float+0x402>
 8004b06:	2301      	movs	r3, #1
 8004b08:	464a      	mov	r2, r9
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	f43f ae38 	beq.w	8004786 <_printf_float+0xc2>
 8004b16:	f108 0801 	add.w	r8, r8, #1
 8004b1a:	68e3      	ldr	r3, [r4, #12]
 8004b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b1e:	1a5b      	subs	r3, r3, r1
 8004b20:	4543      	cmp	r3, r8
 8004b22:	dcf0      	bgt.n	8004b06 <_printf_float+0x442>
 8004b24:	e6fa      	b.n	800491c <_printf_float+0x258>
 8004b26:	f04f 0800 	mov.w	r8, #0
 8004b2a:	f104 0919 	add.w	r9, r4, #25
 8004b2e:	e7f4      	b.n	8004b1a <_printf_float+0x456>

08004b30 <_printf_common>:
 8004b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b34:	4616      	mov	r6, r2
 8004b36:	4699      	mov	r9, r3
 8004b38:	688a      	ldr	r2, [r1, #8]
 8004b3a:	690b      	ldr	r3, [r1, #16]
 8004b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bfb8      	it	lt
 8004b44:	4613      	movlt	r3, r2
 8004b46:	6033      	str	r3, [r6, #0]
 8004b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b4c:	4607      	mov	r7, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	b10a      	cbz	r2, 8004b56 <_printf_common+0x26>
 8004b52:	3301      	adds	r3, #1
 8004b54:	6033      	str	r3, [r6, #0]
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	0699      	lsls	r1, r3, #26
 8004b5a:	bf42      	ittt	mi
 8004b5c:	6833      	ldrmi	r3, [r6, #0]
 8004b5e:	3302      	addmi	r3, #2
 8004b60:	6033      	strmi	r3, [r6, #0]
 8004b62:	6825      	ldr	r5, [r4, #0]
 8004b64:	f015 0506 	ands.w	r5, r5, #6
 8004b68:	d106      	bne.n	8004b78 <_printf_common+0x48>
 8004b6a:	f104 0a19 	add.w	sl, r4, #25
 8004b6e:	68e3      	ldr	r3, [r4, #12]
 8004b70:	6832      	ldr	r2, [r6, #0]
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	42ab      	cmp	r3, r5
 8004b76:	dc26      	bgt.n	8004bc6 <_printf_common+0x96>
 8004b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b7c:	1e13      	subs	r3, r2, #0
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	bf18      	it	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	0692      	lsls	r2, r2, #26
 8004b86:	d42b      	bmi.n	8004be0 <_printf_common+0xb0>
 8004b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4638      	mov	r0, r7
 8004b90:	47c0      	blx	r8
 8004b92:	3001      	adds	r0, #1
 8004b94:	d01e      	beq.n	8004bd4 <_printf_common+0xa4>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	68e5      	ldr	r5, [r4, #12]
 8004b9a:	6832      	ldr	r2, [r6, #0]
 8004b9c:	f003 0306 	and.w	r3, r3, #6
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	bf08      	it	eq
 8004ba4:	1aad      	subeq	r5, r5, r2
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	6922      	ldr	r2, [r4, #16]
 8004baa:	bf0c      	ite	eq
 8004bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb0:	2500      	movne	r5, #0
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bfc4      	itt	gt
 8004bb6:	1a9b      	subgt	r3, r3, r2
 8004bb8:	18ed      	addgt	r5, r5, r3
 8004bba:	2600      	movs	r6, #0
 8004bbc:	341a      	adds	r4, #26
 8004bbe:	42b5      	cmp	r5, r6
 8004bc0:	d11a      	bne.n	8004bf8 <_printf_common+0xc8>
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	e008      	b.n	8004bd8 <_printf_common+0xa8>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4652      	mov	r2, sl
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4638      	mov	r0, r7
 8004bce:	47c0      	blx	r8
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d103      	bne.n	8004bdc <_printf_common+0xac>
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bdc:	3501      	adds	r5, #1
 8004bde:	e7c6      	b.n	8004b6e <_printf_common+0x3e>
 8004be0:	18e1      	adds	r1, r4, r3
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	2030      	movs	r0, #48	; 0x30
 8004be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bea:	4422      	add	r2, r4
 8004bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf4:	3302      	adds	r3, #2
 8004bf6:	e7c7      	b.n	8004b88 <_printf_common+0x58>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4638      	mov	r0, r7
 8004c00:	47c0      	blx	r8
 8004c02:	3001      	adds	r0, #1
 8004c04:	d0e6      	beq.n	8004bd4 <_printf_common+0xa4>
 8004c06:	3601      	adds	r6, #1
 8004c08:	e7d9      	b.n	8004bbe <_printf_common+0x8e>
	...

08004c0c <_printf_i>:
 8004c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	7e0f      	ldrb	r7, [r1, #24]
 8004c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c14:	2f78      	cmp	r7, #120	; 0x78
 8004c16:	4691      	mov	r9, r2
 8004c18:	4680      	mov	r8, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	469a      	mov	sl, r3
 8004c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c22:	d807      	bhi.n	8004c34 <_printf_i+0x28>
 8004c24:	2f62      	cmp	r7, #98	; 0x62
 8004c26:	d80a      	bhi.n	8004c3e <_printf_i+0x32>
 8004c28:	2f00      	cmp	r7, #0
 8004c2a:	f000 80d8 	beq.w	8004dde <_printf_i+0x1d2>
 8004c2e:	2f58      	cmp	r7, #88	; 0x58
 8004c30:	f000 80a3 	beq.w	8004d7a <_printf_i+0x16e>
 8004c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c3c:	e03a      	b.n	8004cb4 <_printf_i+0xa8>
 8004c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c42:	2b15      	cmp	r3, #21
 8004c44:	d8f6      	bhi.n	8004c34 <_printf_i+0x28>
 8004c46:	a101      	add	r1, pc, #4	; (adr r1, 8004c4c <_printf_i+0x40>)
 8004c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c4c:	08004ca5 	.word	0x08004ca5
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004c35 	.word	0x08004c35
 8004c58:	08004c35 	.word	0x08004c35
 8004c5c:	08004c35 	.word	0x08004c35
 8004c60:	08004c35 	.word	0x08004c35
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004c35 	.word	0x08004c35
 8004c6c:	08004c35 	.word	0x08004c35
 8004c70:	08004c35 	.word	0x08004c35
 8004c74:	08004c35 	.word	0x08004c35
 8004c78:	08004dc5 	.word	0x08004dc5
 8004c7c:	08004ce9 	.word	0x08004ce9
 8004c80:	08004da7 	.word	0x08004da7
 8004c84:	08004c35 	.word	0x08004c35
 8004c88:	08004c35 	.word	0x08004c35
 8004c8c:	08004de7 	.word	0x08004de7
 8004c90:	08004c35 	.word	0x08004c35
 8004c94:	08004ce9 	.word	0x08004ce9
 8004c98:	08004c35 	.word	0x08004c35
 8004c9c:	08004c35 	.word	0x08004c35
 8004ca0:	08004daf 	.word	0x08004daf
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	1d1a      	adds	r2, r3, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	602a      	str	r2, [r5, #0]
 8004cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0a3      	b.n	8004e00 <_printf_i+0x1f4>
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	6829      	ldr	r1, [r5, #0]
 8004cbc:	0606      	lsls	r6, r0, #24
 8004cbe:	f101 0304 	add.w	r3, r1, #4
 8004cc2:	d50a      	bpl.n	8004cda <_printf_i+0xce>
 8004cc4:	680e      	ldr	r6, [r1, #0]
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	da03      	bge.n	8004cd4 <_printf_i+0xc8>
 8004ccc:	232d      	movs	r3, #45	; 0x2d
 8004cce:	4276      	negs	r6, r6
 8004cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd4:	485e      	ldr	r0, [pc, #376]	; (8004e50 <_printf_i+0x244>)
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e019      	b.n	8004d0e <_printf_i+0x102>
 8004cda:	680e      	ldr	r6, [r1, #0]
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ce2:	bf18      	it	ne
 8004ce4:	b236      	sxthne	r6, r6
 8004ce6:	e7ef      	b.n	8004cc8 <_printf_i+0xbc>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	6820      	ldr	r0, [r4, #0]
 8004cec:	1d19      	adds	r1, r3, #4
 8004cee:	6029      	str	r1, [r5, #0]
 8004cf0:	0601      	lsls	r1, r0, #24
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_i+0xec>
 8004cf4:	681e      	ldr	r6, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <_printf_i+0xf2>
 8004cf8:	0646      	lsls	r6, r0, #25
 8004cfa:	d5fb      	bpl.n	8004cf4 <_printf_i+0xe8>
 8004cfc:	881e      	ldrh	r6, [r3, #0]
 8004cfe:	4854      	ldr	r0, [pc, #336]	; (8004e50 <_printf_i+0x244>)
 8004d00:	2f6f      	cmp	r7, #111	; 0x6f
 8004d02:	bf0c      	ite	eq
 8004d04:	2308      	moveq	r3, #8
 8004d06:	230a      	movne	r3, #10
 8004d08:	2100      	movs	r1, #0
 8004d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d0e:	6865      	ldr	r5, [r4, #4]
 8004d10:	60a5      	str	r5, [r4, #8]
 8004d12:	2d00      	cmp	r5, #0
 8004d14:	bfa2      	ittt	ge
 8004d16:	6821      	ldrge	r1, [r4, #0]
 8004d18:	f021 0104 	bicge.w	r1, r1, #4
 8004d1c:	6021      	strge	r1, [r4, #0]
 8004d1e:	b90e      	cbnz	r6, 8004d24 <_printf_i+0x118>
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	d04d      	beq.n	8004dc0 <_printf_i+0x1b4>
 8004d24:	4615      	mov	r5, r2
 8004d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004d2e:	5dc7      	ldrb	r7, [r0, r7]
 8004d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d34:	4637      	mov	r7, r6
 8004d36:	42bb      	cmp	r3, r7
 8004d38:	460e      	mov	r6, r1
 8004d3a:	d9f4      	bls.n	8004d26 <_printf_i+0x11a>
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d10b      	bne.n	8004d58 <_printf_i+0x14c>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	07de      	lsls	r6, r3, #31
 8004d44:	d508      	bpl.n	8004d58 <_printf_i+0x14c>
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	6861      	ldr	r1, [r4, #4]
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	bfde      	ittt	le
 8004d4e:	2330      	movle	r3, #48	; 0x30
 8004d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d58:	1b52      	subs	r2, r2, r5
 8004d5a:	6122      	str	r2, [r4, #16]
 8004d5c:	f8cd a000 	str.w	sl, [sp]
 8004d60:	464b      	mov	r3, r9
 8004d62:	aa03      	add	r2, sp, #12
 8004d64:	4621      	mov	r1, r4
 8004d66:	4640      	mov	r0, r8
 8004d68:	f7ff fee2 	bl	8004b30 <_printf_common>
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	d14c      	bne.n	8004e0a <_printf_i+0x1fe>
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	b004      	add	sp, #16
 8004d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7a:	4835      	ldr	r0, [pc, #212]	; (8004e50 <_printf_i+0x244>)
 8004d7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d80:	6829      	ldr	r1, [r5, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d88:	6029      	str	r1, [r5, #0]
 8004d8a:	061d      	lsls	r5, r3, #24
 8004d8c:	d514      	bpl.n	8004db8 <_printf_i+0x1ac>
 8004d8e:	07df      	lsls	r7, r3, #31
 8004d90:	bf44      	itt	mi
 8004d92:	f043 0320 	orrmi.w	r3, r3, #32
 8004d96:	6023      	strmi	r3, [r4, #0]
 8004d98:	b91e      	cbnz	r6, 8004da2 <_printf_i+0x196>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	f023 0320 	bic.w	r3, r3, #32
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	2310      	movs	r3, #16
 8004da4:	e7b0      	b.n	8004d08 <_printf_i+0xfc>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	f043 0320 	orr.w	r3, r3, #32
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	2378      	movs	r3, #120	; 0x78
 8004db0:	4828      	ldr	r0, [pc, #160]	; (8004e54 <_printf_i+0x248>)
 8004db2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db6:	e7e3      	b.n	8004d80 <_printf_i+0x174>
 8004db8:	0659      	lsls	r1, r3, #25
 8004dba:	bf48      	it	mi
 8004dbc:	b2b6      	uxthmi	r6, r6
 8004dbe:	e7e6      	b.n	8004d8e <_printf_i+0x182>
 8004dc0:	4615      	mov	r5, r2
 8004dc2:	e7bb      	b.n	8004d3c <_printf_i+0x130>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	6826      	ldr	r6, [r4, #0]
 8004dc8:	6961      	ldr	r1, [r4, #20]
 8004dca:	1d18      	adds	r0, r3, #4
 8004dcc:	6028      	str	r0, [r5, #0]
 8004dce:	0635      	lsls	r5, r6, #24
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	d501      	bpl.n	8004dd8 <_printf_i+0x1cc>
 8004dd4:	6019      	str	r1, [r3, #0]
 8004dd6:	e002      	b.n	8004dde <_printf_i+0x1d2>
 8004dd8:	0670      	lsls	r0, r6, #25
 8004dda:	d5fb      	bpl.n	8004dd4 <_printf_i+0x1c8>
 8004ddc:	8019      	strh	r1, [r3, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	4615      	mov	r5, r2
 8004de4:	e7ba      	b.n	8004d5c <_printf_i+0x150>
 8004de6:	682b      	ldr	r3, [r5, #0]
 8004de8:	1d1a      	adds	r2, r3, #4
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	681d      	ldr	r5, [r3, #0]
 8004dee:	6862      	ldr	r2, [r4, #4]
 8004df0:	2100      	movs	r1, #0
 8004df2:	4628      	mov	r0, r5
 8004df4:	f7fb f9f4 	bl	80001e0 <memchr>
 8004df8:	b108      	cbz	r0, 8004dfe <_printf_i+0x1f2>
 8004dfa:	1b40      	subs	r0, r0, r5
 8004dfc:	6060      	str	r0, [r4, #4]
 8004dfe:	6863      	ldr	r3, [r4, #4]
 8004e00:	6123      	str	r3, [r4, #16]
 8004e02:	2300      	movs	r3, #0
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e08:	e7a8      	b.n	8004d5c <_printf_i+0x150>
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4640      	mov	r0, r8
 8004e12:	47d0      	blx	sl
 8004e14:	3001      	adds	r0, #1
 8004e16:	d0ab      	beq.n	8004d70 <_printf_i+0x164>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	079b      	lsls	r3, r3, #30
 8004e1c:	d413      	bmi.n	8004e46 <_printf_i+0x23a>
 8004e1e:	68e0      	ldr	r0, [r4, #12]
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	4298      	cmp	r0, r3
 8004e24:	bfb8      	it	lt
 8004e26:	4618      	movlt	r0, r3
 8004e28:	e7a4      	b.n	8004d74 <_printf_i+0x168>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4640      	mov	r0, r8
 8004e32:	47d0      	blx	sl
 8004e34:	3001      	adds	r0, #1
 8004e36:	d09b      	beq.n	8004d70 <_printf_i+0x164>
 8004e38:	3501      	adds	r5, #1
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	9903      	ldr	r1, [sp, #12]
 8004e3e:	1a5b      	subs	r3, r3, r1
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	dcf2      	bgt.n	8004e2a <_printf_i+0x21e>
 8004e44:	e7eb      	b.n	8004e1e <_printf_i+0x212>
 8004e46:	2500      	movs	r5, #0
 8004e48:	f104 0619 	add.w	r6, r4, #25
 8004e4c:	e7f5      	b.n	8004e3a <_printf_i+0x22e>
 8004e4e:	bf00      	nop
 8004e50:	08007026 	.word	0x08007026
 8004e54:	08007037 	.word	0x08007037

08004e58 <quorem>:
 8004e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	6903      	ldr	r3, [r0, #16]
 8004e5e:	690c      	ldr	r4, [r1, #16]
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	4607      	mov	r7, r0
 8004e64:	f2c0 8081 	blt.w	8004f6a <quorem+0x112>
 8004e68:	3c01      	subs	r4, #1
 8004e6a:	f101 0814 	add.w	r8, r1, #20
 8004e6e:	f100 0514 	add.w	r5, r0, #20
 8004e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e80:	3301      	adds	r3, #1
 8004e82:	429a      	cmp	r2, r3
 8004e84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e90:	d331      	bcc.n	8004ef6 <quorem+0x9e>
 8004e92:	f04f 0e00 	mov.w	lr, #0
 8004e96:	4640      	mov	r0, r8
 8004e98:	46ac      	mov	ip, r5
 8004e9a:	46f2      	mov	sl, lr
 8004e9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ea0:	b293      	uxth	r3, r2
 8004ea2:	fb06 e303 	mla	r3, r6, r3, lr
 8004ea6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	ebaa 0303 	sub.w	r3, sl, r3
 8004eb0:	f8dc a000 	ldr.w	sl, [ip]
 8004eb4:	0c12      	lsrs	r2, r2, #16
 8004eb6:	fa13 f38a 	uxtah	r3, r3, sl
 8004eba:	fb06 e202 	mla	r2, r6, r2, lr
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	9b00      	ldr	r3, [sp, #0]
 8004ec2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed0:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ed4:	4581      	cmp	r9, r0
 8004ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eda:	f84c 3b04 	str.w	r3, [ip], #4
 8004ede:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ee2:	d2db      	bcs.n	8004e9c <quorem+0x44>
 8004ee4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ee8:	b92b      	cbnz	r3, 8004ef6 <quorem+0x9e>
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	d32e      	bcc.n	8004f52 <quorem+0xfa>
 8004ef4:	613c      	str	r4, [r7, #16]
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f001 f8c4 	bl	8006084 <__mcmp>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	db24      	blt.n	8004f4a <quorem+0xf2>
 8004f00:	3601      	adds	r6, #1
 8004f02:	4628      	mov	r0, r5
 8004f04:	f04f 0c00 	mov.w	ip, #0
 8004f08:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f0c:	f8d0 e000 	ldr.w	lr, [r0]
 8004f10:	b293      	uxth	r3, r2
 8004f12:	ebac 0303 	sub.w	r3, ip, r3
 8004f16:	0c12      	lsrs	r2, r2, #16
 8004f18:	fa13 f38e 	uxtah	r3, r3, lr
 8004f1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f2a:	45c1      	cmp	r9, r8
 8004f2c:	f840 3b04 	str.w	r3, [r0], #4
 8004f30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f34:	d2e8      	bcs.n	8004f08 <quorem+0xb0>
 8004f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f3e:	b922      	cbnz	r2, 8004f4a <quorem+0xf2>
 8004f40:	3b04      	subs	r3, #4
 8004f42:	429d      	cmp	r5, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	d30a      	bcc.n	8004f5e <quorem+0x106>
 8004f48:	613c      	str	r4, [r7, #16]
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	b003      	add	sp, #12
 8004f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	d1cc      	bne.n	8004ef4 <quorem+0x9c>
 8004f5a:	3c01      	subs	r4, #1
 8004f5c:	e7c7      	b.n	8004eee <quorem+0x96>
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	3b04      	subs	r3, #4
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	d1f0      	bne.n	8004f48 <quorem+0xf0>
 8004f66:	3c01      	subs	r4, #1
 8004f68:	e7eb      	b.n	8004f42 <quorem+0xea>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	e7ee      	b.n	8004f4c <quorem+0xf4>
	...

08004f70 <_dtoa_r>:
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	ed2d 8b04 	vpush	{d8-d9}
 8004f78:	ec57 6b10 	vmov	r6, r7, d0
 8004f7c:	b093      	sub	sp, #76	; 0x4c
 8004f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f84:	9106      	str	r1, [sp, #24]
 8004f86:	ee10 aa10 	vmov	sl, s0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f90:	46bb      	mov	fp, r7
 8004f92:	b975      	cbnz	r5, 8004fb2 <_dtoa_r+0x42>
 8004f94:	2010      	movs	r0, #16
 8004f96:	f000 fddd 	bl	8005b54 <malloc>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8004f9e:	b920      	cbnz	r0, 8004faa <_dtoa_r+0x3a>
 8004fa0:	4ba7      	ldr	r3, [pc, #668]	; (8005240 <_dtoa_r+0x2d0>)
 8004fa2:	21ea      	movs	r1, #234	; 0xea
 8004fa4:	48a7      	ldr	r0, [pc, #668]	; (8005244 <_dtoa_r+0x2d4>)
 8004fa6:	f001 fa75 	bl	8006494 <__assert_func>
 8004faa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fae:	6005      	str	r5, [r0, #0]
 8004fb0:	60c5      	str	r5, [r0, #12]
 8004fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	b151      	cbz	r1, 8004fce <_dtoa_r+0x5e>
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	604a      	str	r2, [r1, #4]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	4093      	lsls	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 fe1c 	bl	8005c00 <_Bfree>
 8004fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	1e3b      	subs	r3, r7, #0
 8004fd0:	bfaa      	itet	ge
 8004fd2:	2300      	movge	r3, #0
 8004fd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004fd8:	f8c8 3000 	strge.w	r3, [r8]
 8004fdc:	4b9a      	ldr	r3, [pc, #616]	; (8005248 <_dtoa_r+0x2d8>)
 8004fde:	bfbc      	itt	lt
 8004fe0:	2201      	movlt	r2, #1
 8004fe2:	f8c8 2000 	strlt.w	r2, [r8]
 8004fe6:	ea33 030b 	bics.w	r3, r3, fp
 8004fea:	d11b      	bne.n	8005024 <_dtoa_r+0xb4>
 8004fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fee:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ff8:	4333      	orrs	r3, r6
 8004ffa:	f000 8592 	beq.w	8005b22 <_dtoa_r+0xbb2>
 8004ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005000:	b963      	cbnz	r3, 800501c <_dtoa_r+0xac>
 8005002:	4b92      	ldr	r3, [pc, #584]	; (800524c <_dtoa_r+0x2dc>)
 8005004:	e022      	b.n	800504c <_dtoa_r+0xdc>
 8005006:	4b92      	ldr	r3, [pc, #584]	; (8005250 <_dtoa_r+0x2e0>)
 8005008:	9301      	str	r3, [sp, #4]
 800500a:	3308      	adds	r3, #8
 800500c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	9801      	ldr	r0, [sp, #4]
 8005012:	b013      	add	sp, #76	; 0x4c
 8005014:	ecbd 8b04 	vpop	{d8-d9}
 8005018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501c:	4b8b      	ldr	r3, [pc, #556]	; (800524c <_dtoa_r+0x2dc>)
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	3303      	adds	r3, #3
 8005022:	e7f3      	b.n	800500c <_dtoa_r+0x9c>
 8005024:	2200      	movs	r2, #0
 8005026:	2300      	movs	r3, #0
 8005028:	4650      	mov	r0, sl
 800502a:	4659      	mov	r1, fp
 800502c:	f7fb fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005030:	ec4b ab19 	vmov	d9, sl, fp
 8005034:	4680      	mov	r8, r0
 8005036:	b158      	cbz	r0, 8005050 <_dtoa_r+0xe0>
 8005038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800503a:	2301      	movs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 856b 	beq.w	8005b1c <_dtoa_r+0xbac>
 8005046:	4883      	ldr	r0, [pc, #524]	; (8005254 <_dtoa_r+0x2e4>)
 8005048:	6018      	str	r0, [r3, #0]
 800504a:	1e43      	subs	r3, r0, #1
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	e7df      	b.n	8005010 <_dtoa_r+0xa0>
 8005050:	ec4b ab10 	vmov	d0, sl, fp
 8005054:	aa10      	add	r2, sp, #64	; 0x40
 8005056:	a911      	add	r1, sp, #68	; 0x44
 8005058:	4620      	mov	r0, r4
 800505a:	f001 f8b9 	bl	80061d0 <__d2b>
 800505e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005062:	ee08 0a10 	vmov	s16, r0
 8005066:	2d00      	cmp	r5, #0
 8005068:	f000 8084 	beq.w	8005174 <_dtoa_r+0x204>
 800506c:	ee19 3a90 	vmov	r3, s19
 8005070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005074:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005078:	4656      	mov	r6, sl
 800507a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800507e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005082:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005086:	4b74      	ldr	r3, [pc, #464]	; (8005258 <_dtoa_r+0x2e8>)
 8005088:	2200      	movs	r2, #0
 800508a:	4630      	mov	r0, r6
 800508c:	4639      	mov	r1, r7
 800508e:	f7fb f8fb 	bl	8000288 <__aeabi_dsub>
 8005092:	a365      	add	r3, pc, #404	; (adr r3, 8005228 <_dtoa_r+0x2b8>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb faae 	bl	80005f8 <__aeabi_dmul>
 800509c:	a364      	add	r3, pc, #400	; (adr r3, 8005230 <_dtoa_r+0x2c0>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f7fb f8f3 	bl	800028c <__adddf3>
 80050a6:	4606      	mov	r6, r0
 80050a8:	4628      	mov	r0, r5
 80050aa:	460f      	mov	r7, r1
 80050ac:	f7fb fa3a 	bl	8000524 <__aeabi_i2d>
 80050b0:	a361      	add	r3, pc, #388	; (adr r3, 8005238 <_dtoa_r+0x2c8>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f7fb fa9f 	bl	80005f8 <__aeabi_dmul>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4630      	mov	r0, r6
 80050c0:	4639      	mov	r1, r7
 80050c2:	f7fb f8e3 	bl	800028c <__adddf3>
 80050c6:	4606      	mov	r6, r0
 80050c8:	460f      	mov	r7, r1
 80050ca:	f7fb fd45 	bl	8000b58 <__aeabi_d2iz>
 80050ce:	2200      	movs	r2, #0
 80050d0:	9000      	str	r0, [sp, #0]
 80050d2:	2300      	movs	r3, #0
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	f7fb fd00 	bl	8000adc <__aeabi_dcmplt>
 80050dc:	b150      	cbz	r0, 80050f4 <_dtoa_r+0x184>
 80050de:	9800      	ldr	r0, [sp, #0]
 80050e0:	f7fb fa20 	bl	8000524 <__aeabi_i2d>
 80050e4:	4632      	mov	r2, r6
 80050e6:	463b      	mov	r3, r7
 80050e8:	f7fb fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80050ec:	b910      	cbnz	r0, 80050f4 <_dtoa_r+0x184>
 80050ee:	9b00      	ldr	r3, [sp, #0]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	9b00      	ldr	r3, [sp, #0]
 80050f6:	2b16      	cmp	r3, #22
 80050f8:	d85a      	bhi.n	80051b0 <_dtoa_r+0x240>
 80050fa:	9a00      	ldr	r2, [sp, #0]
 80050fc:	4b57      	ldr	r3, [pc, #348]	; (800525c <_dtoa_r+0x2ec>)
 80050fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	ec51 0b19 	vmov	r0, r1, d9
 800510a:	f7fb fce7 	bl	8000adc <__aeabi_dcmplt>
 800510e:	2800      	cmp	r0, #0
 8005110:	d050      	beq.n	80051b4 <_dtoa_r+0x244>
 8005112:	9b00      	ldr	r3, [sp, #0]
 8005114:	3b01      	subs	r3, #1
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	930b      	str	r3, [sp, #44]	; 0x2c
 800511c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800511e:	1b5d      	subs	r5, r3, r5
 8005120:	1e6b      	subs	r3, r5, #1
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	bf45      	ittet	mi
 8005126:	f1c5 0301 	rsbmi	r3, r5, #1
 800512a:	9304      	strmi	r3, [sp, #16]
 800512c:	2300      	movpl	r3, #0
 800512e:	2300      	movmi	r3, #0
 8005130:	bf4c      	ite	mi
 8005132:	9305      	strmi	r3, [sp, #20]
 8005134:	9304      	strpl	r3, [sp, #16]
 8005136:	9b00      	ldr	r3, [sp, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db3d      	blt.n	80051b8 <_dtoa_r+0x248>
 800513c:	9b05      	ldr	r3, [sp, #20]
 800513e:	9a00      	ldr	r2, [sp, #0]
 8005140:	920a      	str	r2, [sp, #40]	; 0x28
 8005142:	4413      	add	r3, r2
 8005144:	9305      	str	r3, [sp, #20]
 8005146:	2300      	movs	r3, #0
 8005148:	9307      	str	r3, [sp, #28]
 800514a:	9b06      	ldr	r3, [sp, #24]
 800514c:	2b09      	cmp	r3, #9
 800514e:	f200 8089 	bhi.w	8005264 <_dtoa_r+0x2f4>
 8005152:	2b05      	cmp	r3, #5
 8005154:	bfc4      	itt	gt
 8005156:	3b04      	subgt	r3, #4
 8005158:	9306      	strgt	r3, [sp, #24]
 800515a:	9b06      	ldr	r3, [sp, #24]
 800515c:	f1a3 0302 	sub.w	r3, r3, #2
 8005160:	bfcc      	ite	gt
 8005162:	2500      	movgt	r5, #0
 8005164:	2501      	movle	r5, #1
 8005166:	2b03      	cmp	r3, #3
 8005168:	f200 8087 	bhi.w	800527a <_dtoa_r+0x30a>
 800516c:	e8df f003 	tbb	[pc, r3]
 8005170:	59383a2d 	.word	0x59383a2d
 8005174:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005178:	441d      	add	r5, r3
 800517a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800517e:	2b20      	cmp	r3, #32
 8005180:	bfc1      	itttt	gt
 8005182:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005186:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800518a:	fa0b f303 	lslgt.w	r3, fp, r3
 800518e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005192:	bfda      	itte	le
 8005194:	f1c3 0320 	rsble	r3, r3, #32
 8005198:	fa06 f003 	lslle.w	r0, r6, r3
 800519c:	4318      	orrgt	r0, r3
 800519e:	f7fb f9b1 	bl	8000504 <__aeabi_ui2d>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4606      	mov	r6, r0
 80051a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80051aa:	3d01      	subs	r5, #1
 80051ac:	930e      	str	r3, [sp, #56]	; 0x38
 80051ae:	e76a      	b.n	8005086 <_dtoa_r+0x116>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e7b2      	b.n	800511a <_dtoa_r+0x1aa>
 80051b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80051b6:	e7b1      	b.n	800511c <_dtoa_r+0x1ac>
 80051b8:	9b04      	ldr	r3, [sp, #16]
 80051ba:	9a00      	ldr	r2, [sp, #0]
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	9304      	str	r3, [sp, #16]
 80051c0:	4253      	negs	r3, r2
 80051c2:	9307      	str	r3, [sp, #28]
 80051c4:	2300      	movs	r3, #0
 80051c6:	930a      	str	r3, [sp, #40]	; 0x28
 80051c8:	e7bf      	b.n	800514a <_dtoa_r+0x1da>
 80051ca:	2300      	movs	r3, #0
 80051cc:	9308      	str	r3, [sp, #32]
 80051ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	dc55      	bgt.n	8005280 <_dtoa_r+0x310>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051da:	461a      	mov	r2, r3
 80051dc:	9209      	str	r2, [sp, #36]	; 0x24
 80051de:	e00c      	b.n	80051fa <_dtoa_r+0x28a>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e7f3      	b.n	80051cc <_dtoa_r+0x25c>
 80051e4:	2300      	movs	r3, #0
 80051e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051e8:	9308      	str	r3, [sp, #32]
 80051ea:	9b00      	ldr	r3, [sp, #0]
 80051ec:	4413      	add	r3, r2
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	3301      	adds	r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	9303      	str	r3, [sp, #12]
 80051f6:	bfb8      	it	lt
 80051f8:	2301      	movlt	r3, #1
 80051fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051fc:	2200      	movs	r2, #0
 80051fe:	6042      	str	r2, [r0, #4]
 8005200:	2204      	movs	r2, #4
 8005202:	f102 0614 	add.w	r6, r2, #20
 8005206:	429e      	cmp	r6, r3
 8005208:	6841      	ldr	r1, [r0, #4]
 800520a:	d93d      	bls.n	8005288 <_dtoa_r+0x318>
 800520c:	4620      	mov	r0, r4
 800520e:	f000 fcb7 	bl	8005b80 <_Balloc>
 8005212:	9001      	str	r0, [sp, #4]
 8005214:	2800      	cmp	r0, #0
 8005216:	d13b      	bne.n	8005290 <_dtoa_r+0x320>
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <_dtoa_r+0x2f0>)
 800521a:	4602      	mov	r2, r0
 800521c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005220:	e6c0      	b.n	8004fa4 <_dtoa_r+0x34>
 8005222:	2301      	movs	r3, #1
 8005224:	e7df      	b.n	80051e6 <_dtoa_r+0x276>
 8005226:	bf00      	nop
 8005228:	636f4361 	.word	0x636f4361
 800522c:	3fd287a7 	.word	0x3fd287a7
 8005230:	8b60c8b3 	.word	0x8b60c8b3
 8005234:	3fc68a28 	.word	0x3fc68a28
 8005238:	509f79fb 	.word	0x509f79fb
 800523c:	3fd34413 	.word	0x3fd34413
 8005240:	08007055 	.word	0x08007055
 8005244:	0800706c 	.word	0x0800706c
 8005248:	7ff00000 	.word	0x7ff00000
 800524c:	08007051 	.word	0x08007051
 8005250:	08007048 	.word	0x08007048
 8005254:	08007025 	.word	0x08007025
 8005258:	3ff80000 	.word	0x3ff80000
 800525c:	08007160 	.word	0x08007160
 8005260:	080070c7 	.word	0x080070c7
 8005264:	2501      	movs	r5, #1
 8005266:	2300      	movs	r3, #0
 8005268:	9306      	str	r3, [sp, #24]
 800526a:	9508      	str	r5, [sp, #32]
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005274:	2200      	movs	r2, #0
 8005276:	2312      	movs	r3, #18
 8005278:	e7b0      	b.n	80051dc <_dtoa_r+0x26c>
 800527a:	2301      	movs	r3, #1
 800527c:	9308      	str	r3, [sp, #32]
 800527e:	e7f5      	b.n	800526c <_dtoa_r+0x2fc>
 8005280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005282:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005286:	e7b8      	b.n	80051fa <_dtoa_r+0x28a>
 8005288:	3101      	adds	r1, #1
 800528a:	6041      	str	r1, [r0, #4]
 800528c:	0052      	lsls	r2, r2, #1
 800528e:	e7b8      	b.n	8005202 <_dtoa_r+0x292>
 8005290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005292:	9a01      	ldr	r2, [sp, #4]
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	2b0e      	cmp	r3, #14
 800529a:	f200 809d 	bhi.w	80053d8 <_dtoa_r+0x468>
 800529e:	2d00      	cmp	r5, #0
 80052a0:	f000 809a 	beq.w	80053d8 <_dtoa_r+0x468>
 80052a4:	9b00      	ldr	r3, [sp, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dd32      	ble.n	8005310 <_dtoa_r+0x3a0>
 80052aa:	4ab7      	ldr	r2, [pc, #732]	; (8005588 <_dtoa_r+0x618>)
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052b8:	9b00      	ldr	r3, [sp, #0]
 80052ba:	05d8      	lsls	r0, r3, #23
 80052bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80052c0:	d516      	bpl.n	80052f0 <_dtoa_r+0x380>
 80052c2:	4bb2      	ldr	r3, [pc, #712]	; (800558c <_dtoa_r+0x61c>)
 80052c4:	ec51 0b19 	vmov	r0, r1, d9
 80052c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052cc:	f7fb fabe 	bl	800084c <__aeabi_ddiv>
 80052d0:	f007 070f 	and.w	r7, r7, #15
 80052d4:	4682      	mov	sl, r0
 80052d6:	468b      	mov	fp, r1
 80052d8:	2503      	movs	r5, #3
 80052da:	4eac      	ldr	r6, [pc, #688]	; (800558c <_dtoa_r+0x61c>)
 80052dc:	b957      	cbnz	r7, 80052f4 <_dtoa_r+0x384>
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	4650      	mov	r0, sl
 80052e4:	4659      	mov	r1, fp
 80052e6:	f7fb fab1 	bl	800084c <__aeabi_ddiv>
 80052ea:	4682      	mov	sl, r0
 80052ec:	468b      	mov	fp, r1
 80052ee:	e028      	b.n	8005342 <_dtoa_r+0x3d2>
 80052f0:	2502      	movs	r5, #2
 80052f2:	e7f2      	b.n	80052da <_dtoa_r+0x36a>
 80052f4:	07f9      	lsls	r1, r7, #31
 80052f6:	d508      	bpl.n	800530a <_dtoa_r+0x39a>
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005300:	f7fb f97a 	bl	80005f8 <__aeabi_dmul>
 8005304:	3501      	adds	r5, #1
 8005306:	4680      	mov	r8, r0
 8005308:	4689      	mov	r9, r1
 800530a:	107f      	asrs	r7, r7, #1
 800530c:	3608      	adds	r6, #8
 800530e:	e7e5      	b.n	80052dc <_dtoa_r+0x36c>
 8005310:	f000 809b 	beq.w	800544a <_dtoa_r+0x4da>
 8005314:	9b00      	ldr	r3, [sp, #0]
 8005316:	4f9d      	ldr	r7, [pc, #628]	; (800558c <_dtoa_r+0x61c>)
 8005318:	425e      	negs	r6, r3
 800531a:	4b9b      	ldr	r3, [pc, #620]	; (8005588 <_dtoa_r+0x618>)
 800531c:	f006 020f 	and.w	r2, r6, #15
 8005320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	ec51 0b19 	vmov	r0, r1, d9
 800532c:	f7fb f964 	bl	80005f8 <__aeabi_dmul>
 8005330:	1136      	asrs	r6, r6, #4
 8005332:	4682      	mov	sl, r0
 8005334:	468b      	mov	fp, r1
 8005336:	2300      	movs	r3, #0
 8005338:	2502      	movs	r5, #2
 800533a:	2e00      	cmp	r6, #0
 800533c:	d17a      	bne.n	8005434 <_dtoa_r+0x4c4>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1d3      	bne.n	80052ea <_dtoa_r+0x37a>
 8005342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8082 	beq.w	800544e <_dtoa_r+0x4de>
 800534a:	4b91      	ldr	r3, [pc, #580]	; (8005590 <_dtoa_r+0x620>)
 800534c:	2200      	movs	r2, #0
 800534e:	4650      	mov	r0, sl
 8005350:	4659      	mov	r1, fp
 8005352:	f7fb fbc3 	bl	8000adc <__aeabi_dcmplt>
 8005356:	2800      	cmp	r0, #0
 8005358:	d079      	beq.n	800544e <_dtoa_r+0x4de>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d076      	beq.n	800544e <_dtoa_r+0x4de>
 8005360:	9b02      	ldr	r3, [sp, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	dd36      	ble.n	80053d4 <_dtoa_r+0x464>
 8005366:	9b00      	ldr	r3, [sp, #0]
 8005368:	4650      	mov	r0, sl
 800536a:	4659      	mov	r1, fp
 800536c:	1e5f      	subs	r7, r3, #1
 800536e:	2200      	movs	r2, #0
 8005370:	4b88      	ldr	r3, [pc, #544]	; (8005594 <_dtoa_r+0x624>)
 8005372:	f7fb f941 	bl	80005f8 <__aeabi_dmul>
 8005376:	9e02      	ldr	r6, [sp, #8]
 8005378:	4682      	mov	sl, r0
 800537a:	468b      	mov	fp, r1
 800537c:	3501      	adds	r5, #1
 800537e:	4628      	mov	r0, r5
 8005380:	f7fb f8d0 	bl	8000524 <__aeabi_i2d>
 8005384:	4652      	mov	r2, sl
 8005386:	465b      	mov	r3, fp
 8005388:	f7fb f936 	bl	80005f8 <__aeabi_dmul>
 800538c:	4b82      	ldr	r3, [pc, #520]	; (8005598 <_dtoa_r+0x628>)
 800538e:	2200      	movs	r2, #0
 8005390:	f7fa ff7c 	bl	800028c <__adddf3>
 8005394:	46d0      	mov	r8, sl
 8005396:	46d9      	mov	r9, fp
 8005398:	4682      	mov	sl, r0
 800539a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d158      	bne.n	8005454 <_dtoa_r+0x4e4>
 80053a2:	4b7e      	ldr	r3, [pc, #504]	; (800559c <_dtoa_r+0x62c>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	4640      	mov	r0, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	f7fa ff6d 	bl	8000288 <__aeabi_dsub>
 80053ae:	4652      	mov	r2, sl
 80053b0:	465b      	mov	r3, fp
 80053b2:	4680      	mov	r8, r0
 80053b4:	4689      	mov	r9, r1
 80053b6:	f7fb fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f040 8295 	bne.w	80058ea <_dtoa_r+0x97a>
 80053c0:	4652      	mov	r2, sl
 80053c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80053c6:	4640      	mov	r0, r8
 80053c8:	4649      	mov	r1, r9
 80053ca:	f7fb fb87 	bl	8000adc <__aeabi_dcmplt>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f040 8289 	bne.w	80058e6 <_dtoa_r+0x976>
 80053d4:	ec5b ab19 	vmov	sl, fp, d9
 80053d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f2c0 8148 	blt.w	8005670 <_dtoa_r+0x700>
 80053e0:	9a00      	ldr	r2, [sp, #0]
 80053e2:	2a0e      	cmp	r2, #14
 80053e4:	f300 8144 	bgt.w	8005670 <_dtoa_r+0x700>
 80053e8:	4b67      	ldr	r3, [pc, #412]	; (8005588 <_dtoa_r+0x618>)
 80053ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f280 80d5 	bge.w	80055a4 <_dtoa_r+0x634>
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f300 80d1 	bgt.w	80055a4 <_dtoa_r+0x634>
 8005402:	f040 826f 	bne.w	80058e4 <_dtoa_r+0x974>
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <_dtoa_r+0x62c>)
 8005408:	2200      	movs	r2, #0
 800540a:	4640      	mov	r0, r8
 800540c:	4649      	mov	r1, r9
 800540e:	f7fb f8f3 	bl	80005f8 <__aeabi_dmul>
 8005412:	4652      	mov	r2, sl
 8005414:	465b      	mov	r3, fp
 8005416:	f7fb fb75 	bl	8000b04 <__aeabi_dcmpge>
 800541a:	9e03      	ldr	r6, [sp, #12]
 800541c:	4637      	mov	r7, r6
 800541e:	2800      	cmp	r0, #0
 8005420:	f040 8245 	bne.w	80058ae <_dtoa_r+0x93e>
 8005424:	9d01      	ldr	r5, [sp, #4]
 8005426:	2331      	movs	r3, #49	; 0x31
 8005428:	f805 3b01 	strb.w	r3, [r5], #1
 800542c:	9b00      	ldr	r3, [sp, #0]
 800542e:	3301      	adds	r3, #1
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	e240      	b.n	80058b6 <_dtoa_r+0x946>
 8005434:	07f2      	lsls	r2, r6, #31
 8005436:	d505      	bpl.n	8005444 <_dtoa_r+0x4d4>
 8005438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800543c:	f7fb f8dc 	bl	80005f8 <__aeabi_dmul>
 8005440:	3501      	adds	r5, #1
 8005442:	2301      	movs	r3, #1
 8005444:	1076      	asrs	r6, r6, #1
 8005446:	3708      	adds	r7, #8
 8005448:	e777      	b.n	800533a <_dtoa_r+0x3ca>
 800544a:	2502      	movs	r5, #2
 800544c:	e779      	b.n	8005342 <_dtoa_r+0x3d2>
 800544e:	9f00      	ldr	r7, [sp, #0]
 8005450:	9e03      	ldr	r6, [sp, #12]
 8005452:	e794      	b.n	800537e <_dtoa_r+0x40e>
 8005454:	9901      	ldr	r1, [sp, #4]
 8005456:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <_dtoa_r+0x618>)
 8005458:	4431      	add	r1, r6
 800545a:	910d      	str	r1, [sp, #52]	; 0x34
 800545c:	9908      	ldr	r1, [sp, #32]
 800545e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005466:	2900      	cmp	r1, #0
 8005468:	d043      	beq.n	80054f2 <_dtoa_r+0x582>
 800546a:	494d      	ldr	r1, [pc, #308]	; (80055a0 <_dtoa_r+0x630>)
 800546c:	2000      	movs	r0, #0
 800546e:	f7fb f9ed 	bl	800084c <__aeabi_ddiv>
 8005472:	4652      	mov	r2, sl
 8005474:	465b      	mov	r3, fp
 8005476:	f7fa ff07 	bl	8000288 <__aeabi_dsub>
 800547a:	9d01      	ldr	r5, [sp, #4]
 800547c:	4682      	mov	sl, r0
 800547e:	468b      	mov	fp, r1
 8005480:	4649      	mov	r1, r9
 8005482:	4640      	mov	r0, r8
 8005484:	f7fb fb68 	bl	8000b58 <__aeabi_d2iz>
 8005488:	4606      	mov	r6, r0
 800548a:	f7fb f84b 	bl	8000524 <__aeabi_i2d>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4640      	mov	r0, r8
 8005494:	4649      	mov	r1, r9
 8005496:	f7fa fef7 	bl	8000288 <__aeabi_dsub>
 800549a:	3630      	adds	r6, #48	; 0x30
 800549c:	f805 6b01 	strb.w	r6, [r5], #1
 80054a0:	4652      	mov	r2, sl
 80054a2:	465b      	mov	r3, fp
 80054a4:	4680      	mov	r8, r0
 80054a6:	4689      	mov	r9, r1
 80054a8:	f7fb fb18 	bl	8000adc <__aeabi_dcmplt>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d163      	bne.n	8005578 <_dtoa_r+0x608>
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	4936      	ldr	r1, [pc, #216]	; (8005590 <_dtoa_r+0x620>)
 80054b6:	2000      	movs	r0, #0
 80054b8:	f7fa fee6 	bl	8000288 <__aeabi_dsub>
 80054bc:	4652      	mov	r2, sl
 80054be:	465b      	mov	r3, fp
 80054c0:	f7fb fb0c 	bl	8000adc <__aeabi_dcmplt>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f040 80b5 	bne.w	8005634 <_dtoa_r+0x6c4>
 80054ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054cc:	429d      	cmp	r5, r3
 80054ce:	d081      	beq.n	80053d4 <_dtoa_r+0x464>
 80054d0:	4b30      	ldr	r3, [pc, #192]	; (8005594 <_dtoa_r+0x624>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	4650      	mov	r0, sl
 80054d6:	4659      	mov	r1, fp
 80054d8:	f7fb f88e 	bl	80005f8 <__aeabi_dmul>
 80054dc:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <_dtoa_r+0x624>)
 80054de:	4682      	mov	sl, r0
 80054e0:	468b      	mov	fp, r1
 80054e2:	4640      	mov	r0, r8
 80054e4:	4649      	mov	r1, r9
 80054e6:	2200      	movs	r2, #0
 80054e8:	f7fb f886 	bl	80005f8 <__aeabi_dmul>
 80054ec:	4680      	mov	r8, r0
 80054ee:	4689      	mov	r9, r1
 80054f0:	e7c6      	b.n	8005480 <_dtoa_r+0x510>
 80054f2:	4650      	mov	r0, sl
 80054f4:	4659      	mov	r1, fp
 80054f6:	f7fb f87f 	bl	80005f8 <__aeabi_dmul>
 80054fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fc:	9d01      	ldr	r5, [sp, #4]
 80054fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005500:	4682      	mov	sl, r0
 8005502:	468b      	mov	fp, r1
 8005504:	4649      	mov	r1, r9
 8005506:	4640      	mov	r0, r8
 8005508:	f7fb fb26 	bl	8000b58 <__aeabi_d2iz>
 800550c:	4606      	mov	r6, r0
 800550e:	f7fb f809 	bl	8000524 <__aeabi_i2d>
 8005512:	3630      	adds	r6, #48	; 0x30
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4640      	mov	r0, r8
 800551a:	4649      	mov	r1, r9
 800551c:	f7fa feb4 	bl	8000288 <__aeabi_dsub>
 8005520:	f805 6b01 	strb.w	r6, [r5], #1
 8005524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005526:	429d      	cmp	r5, r3
 8005528:	4680      	mov	r8, r0
 800552a:	4689      	mov	r9, r1
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	d124      	bne.n	800557c <_dtoa_r+0x60c>
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <_dtoa_r+0x630>)
 8005534:	4650      	mov	r0, sl
 8005536:	4659      	mov	r1, fp
 8005538:	f7fa fea8 	bl	800028c <__adddf3>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fb fae8 	bl	8000b18 <__aeabi_dcmpgt>
 8005548:	2800      	cmp	r0, #0
 800554a:	d173      	bne.n	8005634 <_dtoa_r+0x6c4>
 800554c:	4652      	mov	r2, sl
 800554e:	465b      	mov	r3, fp
 8005550:	4913      	ldr	r1, [pc, #76]	; (80055a0 <_dtoa_r+0x630>)
 8005552:	2000      	movs	r0, #0
 8005554:	f7fa fe98 	bl	8000288 <__aeabi_dsub>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	f7fb fabc 	bl	8000adc <__aeabi_dcmplt>
 8005564:	2800      	cmp	r0, #0
 8005566:	f43f af35 	beq.w	80053d4 <_dtoa_r+0x464>
 800556a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800556c:	1e6b      	subs	r3, r5, #1
 800556e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005570:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005574:	2b30      	cmp	r3, #48	; 0x30
 8005576:	d0f8      	beq.n	800556a <_dtoa_r+0x5fa>
 8005578:	9700      	str	r7, [sp, #0]
 800557a:	e049      	b.n	8005610 <_dtoa_r+0x6a0>
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <_dtoa_r+0x624>)
 800557e:	f7fb f83b 	bl	80005f8 <__aeabi_dmul>
 8005582:	4680      	mov	r8, r0
 8005584:	4689      	mov	r9, r1
 8005586:	e7bd      	b.n	8005504 <_dtoa_r+0x594>
 8005588:	08007160 	.word	0x08007160
 800558c:	08007138 	.word	0x08007138
 8005590:	3ff00000 	.word	0x3ff00000
 8005594:	40240000 	.word	0x40240000
 8005598:	401c0000 	.word	0x401c0000
 800559c:	40140000 	.word	0x40140000
 80055a0:	3fe00000 	.word	0x3fe00000
 80055a4:	9d01      	ldr	r5, [sp, #4]
 80055a6:	4656      	mov	r6, sl
 80055a8:	465f      	mov	r7, fp
 80055aa:	4642      	mov	r2, r8
 80055ac:	464b      	mov	r3, r9
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fb f94b 	bl	800084c <__aeabi_ddiv>
 80055b6:	f7fb facf 	bl	8000b58 <__aeabi_d2iz>
 80055ba:	4682      	mov	sl, r0
 80055bc:	f7fa ffb2 	bl	8000524 <__aeabi_i2d>
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	f7fb f818 	bl	80005f8 <__aeabi_dmul>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4630      	mov	r0, r6
 80055ce:	4639      	mov	r1, r7
 80055d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80055d4:	f7fa fe58 	bl	8000288 <__aeabi_dsub>
 80055d8:	f805 6b01 	strb.w	r6, [r5], #1
 80055dc:	9e01      	ldr	r6, [sp, #4]
 80055de:	9f03      	ldr	r7, [sp, #12]
 80055e0:	1bae      	subs	r6, r5, r6
 80055e2:	42b7      	cmp	r7, r6
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	d135      	bne.n	8005656 <_dtoa_r+0x6e6>
 80055ea:	f7fa fe4f 	bl	800028c <__adddf3>
 80055ee:	4642      	mov	r2, r8
 80055f0:	464b      	mov	r3, r9
 80055f2:	4606      	mov	r6, r0
 80055f4:	460f      	mov	r7, r1
 80055f6:	f7fb fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80055fa:	b9d0      	cbnz	r0, 8005632 <_dtoa_r+0x6c2>
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	4630      	mov	r0, r6
 8005602:	4639      	mov	r1, r7
 8005604:	f7fb fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 8005608:	b110      	cbz	r0, 8005610 <_dtoa_r+0x6a0>
 800560a:	f01a 0f01 	tst.w	sl, #1
 800560e:	d110      	bne.n	8005632 <_dtoa_r+0x6c2>
 8005610:	4620      	mov	r0, r4
 8005612:	ee18 1a10 	vmov	r1, s16
 8005616:	f000 faf3 	bl	8005c00 <_Bfree>
 800561a:	2300      	movs	r3, #0
 800561c:	9800      	ldr	r0, [sp, #0]
 800561e:	702b      	strb	r3, [r5, #0]
 8005620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005622:	3001      	adds	r0, #1
 8005624:	6018      	str	r0, [r3, #0]
 8005626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005628:	2b00      	cmp	r3, #0
 800562a:	f43f acf1 	beq.w	8005010 <_dtoa_r+0xa0>
 800562e:	601d      	str	r5, [r3, #0]
 8005630:	e4ee      	b.n	8005010 <_dtoa_r+0xa0>
 8005632:	9f00      	ldr	r7, [sp, #0]
 8005634:	462b      	mov	r3, r5
 8005636:	461d      	mov	r5, r3
 8005638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800563c:	2a39      	cmp	r2, #57	; 0x39
 800563e:	d106      	bne.n	800564e <_dtoa_r+0x6de>
 8005640:	9a01      	ldr	r2, [sp, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d1f7      	bne.n	8005636 <_dtoa_r+0x6c6>
 8005646:	9901      	ldr	r1, [sp, #4]
 8005648:	2230      	movs	r2, #48	; 0x30
 800564a:	3701      	adds	r7, #1
 800564c:	700a      	strb	r2, [r1, #0]
 800564e:	781a      	ldrb	r2, [r3, #0]
 8005650:	3201      	adds	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e790      	b.n	8005578 <_dtoa_r+0x608>
 8005656:	4ba6      	ldr	r3, [pc, #664]	; (80058f0 <_dtoa_r+0x980>)
 8005658:	2200      	movs	r2, #0
 800565a:	f7fa ffcd 	bl	80005f8 <__aeabi_dmul>
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	4606      	mov	r6, r0
 8005664:	460f      	mov	r7, r1
 8005666:	f7fb fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800566a:	2800      	cmp	r0, #0
 800566c:	d09d      	beq.n	80055aa <_dtoa_r+0x63a>
 800566e:	e7cf      	b.n	8005610 <_dtoa_r+0x6a0>
 8005670:	9a08      	ldr	r2, [sp, #32]
 8005672:	2a00      	cmp	r2, #0
 8005674:	f000 80d7 	beq.w	8005826 <_dtoa_r+0x8b6>
 8005678:	9a06      	ldr	r2, [sp, #24]
 800567a:	2a01      	cmp	r2, #1
 800567c:	f300 80ba 	bgt.w	80057f4 <_dtoa_r+0x884>
 8005680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005682:	2a00      	cmp	r2, #0
 8005684:	f000 80b2 	beq.w	80057ec <_dtoa_r+0x87c>
 8005688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800568c:	9e07      	ldr	r6, [sp, #28]
 800568e:	9d04      	ldr	r5, [sp, #16]
 8005690:	9a04      	ldr	r2, [sp, #16]
 8005692:	441a      	add	r2, r3
 8005694:	9204      	str	r2, [sp, #16]
 8005696:	9a05      	ldr	r2, [sp, #20]
 8005698:	2101      	movs	r1, #1
 800569a:	441a      	add	r2, r3
 800569c:	4620      	mov	r0, r4
 800569e:	9205      	str	r2, [sp, #20]
 80056a0:	f000 fb66 	bl	8005d70 <__i2b>
 80056a4:	4607      	mov	r7, r0
 80056a6:	2d00      	cmp	r5, #0
 80056a8:	dd0c      	ble.n	80056c4 <_dtoa_r+0x754>
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dd09      	ble.n	80056c4 <_dtoa_r+0x754>
 80056b0:	42ab      	cmp	r3, r5
 80056b2:	9a04      	ldr	r2, [sp, #16]
 80056b4:	bfa8      	it	ge
 80056b6:	462b      	movge	r3, r5
 80056b8:	1ad2      	subs	r2, r2, r3
 80056ba:	9204      	str	r2, [sp, #16]
 80056bc:	9a05      	ldr	r2, [sp, #20]
 80056be:	1aed      	subs	r5, r5, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	9305      	str	r3, [sp, #20]
 80056c4:	9b07      	ldr	r3, [sp, #28]
 80056c6:	b31b      	cbz	r3, 8005710 <_dtoa_r+0x7a0>
 80056c8:	9b08      	ldr	r3, [sp, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80af 	beq.w	800582e <_dtoa_r+0x8be>
 80056d0:	2e00      	cmp	r6, #0
 80056d2:	dd13      	ble.n	80056fc <_dtoa_r+0x78c>
 80056d4:	4639      	mov	r1, r7
 80056d6:	4632      	mov	r2, r6
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fc09 	bl	8005ef0 <__pow5mult>
 80056de:	ee18 2a10 	vmov	r2, s16
 80056e2:	4601      	mov	r1, r0
 80056e4:	4607      	mov	r7, r0
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 fb58 	bl	8005d9c <__multiply>
 80056ec:	ee18 1a10 	vmov	r1, s16
 80056f0:	4680      	mov	r8, r0
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fa84 	bl	8005c00 <_Bfree>
 80056f8:	ee08 8a10 	vmov	s16, r8
 80056fc:	9b07      	ldr	r3, [sp, #28]
 80056fe:	1b9a      	subs	r2, r3, r6
 8005700:	d006      	beq.n	8005710 <_dtoa_r+0x7a0>
 8005702:	ee18 1a10 	vmov	r1, s16
 8005706:	4620      	mov	r0, r4
 8005708:	f000 fbf2 	bl	8005ef0 <__pow5mult>
 800570c:	ee08 0a10 	vmov	s16, r0
 8005710:	2101      	movs	r1, #1
 8005712:	4620      	mov	r0, r4
 8005714:	f000 fb2c 	bl	8005d70 <__i2b>
 8005718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	4606      	mov	r6, r0
 800571e:	f340 8088 	ble.w	8005832 <_dtoa_r+0x8c2>
 8005722:	461a      	mov	r2, r3
 8005724:	4601      	mov	r1, r0
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fbe2 	bl	8005ef0 <__pow5mult>
 800572c:	9b06      	ldr	r3, [sp, #24]
 800572e:	2b01      	cmp	r3, #1
 8005730:	4606      	mov	r6, r0
 8005732:	f340 8081 	ble.w	8005838 <_dtoa_r+0x8c8>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	6933      	ldr	r3, [r6, #16]
 800573c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005740:	6918      	ldr	r0, [r3, #16]
 8005742:	f000 fac5 	bl	8005cd0 <__hi0bits>
 8005746:	f1c0 0020 	rsb	r0, r0, #32
 800574a:	9b05      	ldr	r3, [sp, #20]
 800574c:	4418      	add	r0, r3
 800574e:	f010 001f 	ands.w	r0, r0, #31
 8005752:	f000 8092 	beq.w	800587a <_dtoa_r+0x90a>
 8005756:	f1c0 0320 	rsb	r3, r0, #32
 800575a:	2b04      	cmp	r3, #4
 800575c:	f340 808a 	ble.w	8005874 <_dtoa_r+0x904>
 8005760:	f1c0 001c 	rsb	r0, r0, #28
 8005764:	9b04      	ldr	r3, [sp, #16]
 8005766:	4403      	add	r3, r0
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	9b05      	ldr	r3, [sp, #20]
 800576c:	4403      	add	r3, r0
 800576e:	4405      	add	r5, r0
 8005770:	9305      	str	r3, [sp, #20]
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	dd07      	ble.n	8005788 <_dtoa_r+0x818>
 8005778:	ee18 1a10 	vmov	r1, s16
 800577c:	461a      	mov	r2, r3
 800577e:	4620      	mov	r0, r4
 8005780:	f000 fc10 	bl	8005fa4 <__lshift>
 8005784:	ee08 0a10 	vmov	s16, r0
 8005788:	9b05      	ldr	r3, [sp, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	dd05      	ble.n	800579a <_dtoa_r+0x82a>
 800578e:	4631      	mov	r1, r6
 8005790:	461a      	mov	r2, r3
 8005792:	4620      	mov	r0, r4
 8005794:	f000 fc06 	bl	8005fa4 <__lshift>
 8005798:	4606      	mov	r6, r0
 800579a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d06e      	beq.n	800587e <_dtoa_r+0x90e>
 80057a0:	ee18 0a10 	vmov	r0, s16
 80057a4:	4631      	mov	r1, r6
 80057a6:	f000 fc6d 	bl	8006084 <__mcmp>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	da67      	bge.n	800587e <_dtoa_r+0x90e>
 80057ae:	9b00      	ldr	r3, [sp, #0]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	ee18 1a10 	vmov	r1, s16
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	220a      	movs	r2, #10
 80057ba:	2300      	movs	r3, #0
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 fa41 	bl	8005c44 <__multadd>
 80057c2:	9b08      	ldr	r3, [sp, #32]
 80057c4:	ee08 0a10 	vmov	s16, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 81b1 	beq.w	8005b30 <_dtoa_r+0xbc0>
 80057ce:	2300      	movs	r3, #0
 80057d0:	4639      	mov	r1, r7
 80057d2:	220a      	movs	r2, #10
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 fa35 	bl	8005c44 <__multadd>
 80057da:	9b02      	ldr	r3, [sp, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	4607      	mov	r7, r0
 80057e0:	f300 808e 	bgt.w	8005900 <_dtoa_r+0x990>
 80057e4:	9b06      	ldr	r3, [sp, #24]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	dc51      	bgt.n	800588e <_dtoa_r+0x91e>
 80057ea:	e089      	b.n	8005900 <_dtoa_r+0x990>
 80057ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057f2:	e74b      	b.n	800568c <_dtoa_r+0x71c>
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	1e5e      	subs	r6, r3, #1
 80057f8:	9b07      	ldr	r3, [sp, #28]
 80057fa:	42b3      	cmp	r3, r6
 80057fc:	bfbf      	itttt	lt
 80057fe:	9b07      	ldrlt	r3, [sp, #28]
 8005800:	9607      	strlt	r6, [sp, #28]
 8005802:	1af2      	sublt	r2, r6, r3
 8005804:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005806:	bfb6      	itet	lt
 8005808:	189b      	addlt	r3, r3, r2
 800580a:	1b9e      	subge	r6, r3, r6
 800580c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	bfb8      	it	lt
 8005812:	2600      	movlt	r6, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	bfb7      	itett	lt
 8005818:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800581c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005820:	1a9d      	sublt	r5, r3, r2
 8005822:	2300      	movlt	r3, #0
 8005824:	e734      	b.n	8005690 <_dtoa_r+0x720>
 8005826:	9e07      	ldr	r6, [sp, #28]
 8005828:	9d04      	ldr	r5, [sp, #16]
 800582a:	9f08      	ldr	r7, [sp, #32]
 800582c:	e73b      	b.n	80056a6 <_dtoa_r+0x736>
 800582e:	9a07      	ldr	r2, [sp, #28]
 8005830:	e767      	b.n	8005702 <_dtoa_r+0x792>
 8005832:	9b06      	ldr	r3, [sp, #24]
 8005834:	2b01      	cmp	r3, #1
 8005836:	dc18      	bgt.n	800586a <_dtoa_r+0x8fa>
 8005838:	f1ba 0f00 	cmp.w	sl, #0
 800583c:	d115      	bne.n	800586a <_dtoa_r+0x8fa>
 800583e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005842:	b993      	cbnz	r3, 800586a <_dtoa_r+0x8fa>
 8005844:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005848:	0d1b      	lsrs	r3, r3, #20
 800584a:	051b      	lsls	r3, r3, #20
 800584c:	b183      	cbz	r3, 8005870 <_dtoa_r+0x900>
 800584e:	9b04      	ldr	r3, [sp, #16]
 8005850:	3301      	adds	r3, #1
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	9b05      	ldr	r3, [sp, #20]
 8005856:	3301      	adds	r3, #1
 8005858:	9305      	str	r3, [sp, #20]
 800585a:	f04f 0801 	mov.w	r8, #1
 800585e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f af6a 	bne.w	800573a <_dtoa_r+0x7ca>
 8005866:	2001      	movs	r0, #1
 8005868:	e76f      	b.n	800574a <_dtoa_r+0x7da>
 800586a:	f04f 0800 	mov.w	r8, #0
 800586e:	e7f6      	b.n	800585e <_dtoa_r+0x8ee>
 8005870:	4698      	mov	r8, r3
 8005872:	e7f4      	b.n	800585e <_dtoa_r+0x8ee>
 8005874:	f43f af7d 	beq.w	8005772 <_dtoa_r+0x802>
 8005878:	4618      	mov	r0, r3
 800587a:	301c      	adds	r0, #28
 800587c:	e772      	b.n	8005764 <_dtoa_r+0x7f4>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	dc37      	bgt.n	80058f4 <_dtoa_r+0x984>
 8005884:	9b06      	ldr	r3, [sp, #24]
 8005886:	2b02      	cmp	r3, #2
 8005888:	dd34      	ble.n	80058f4 <_dtoa_r+0x984>
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	9b02      	ldr	r3, [sp, #8]
 8005890:	b96b      	cbnz	r3, 80058ae <_dtoa_r+0x93e>
 8005892:	4631      	mov	r1, r6
 8005894:	2205      	movs	r2, #5
 8005896:	4620      	mov	r0, r4
 8005898:	f000 f9d4 	bl	8005c44 <__multadd>
 800589c:	4601      	mov	r1, r0
 800589e:	4606      	mov	r6, r0
 80058a0:	ee18 0a10 	vmov	r0, s16
 80058a4:	f000 fbee 	bl	8006084 <__mcmp>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f73f adbb 	bgt.w	8005424 <_dtoa_r+0x4b4>
 80058ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b0:	9d01      	ldr	r5, [sp, #4]
 80058b2:	43db      	mvns	r3, r3
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	f04f 0800 	mov.w	r8, #0
 80058ba:	4631      	mov	r1, r6
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f99f 	bl	8005c00 <_Bfree>
 80058c2:	2f00      	cmp	r7, #0
 80058c4:	f43f aea4 	beq.w	8005610 <_dtoa_r+0x6a0>
 80058c8:	f1b8 0f00 	cmp.w	r8, #0
 80058cc:	d005      	beq.n	80058da <_dtoa_r+0x96a>
 80058ce:	45b8      	cmp	r8, r7
 80058d0:	d003      	beq.n	80058da <_dtoa_r+0x96a>
 80058d2:	4641      	mov	r1, r8
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 f993 	bl	8005c00 <_Bfree>
 80058da:	4639      	mov	r1, r7
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 f98f 	bl	8005c00 <_Bfree>
 80058e2:	e695      	b.n	8005610 <_dtoa_r+0x6a0>
 80058e4:	2600      	movs	r6, #0
 80058e6:	4637      	mov	r7, r6
 80058e8:	e7e1      	b.n	80058ae <_dtoa_r+0x93e>
 80058ea:	9700      	str	r7, [sp, #0]
 80058ec:	4637      	mov	r7, r6
 80058ee:	e599      	b.n	8005424 <_dtoa_r+0x4b4>
 80058f0:	40240000 	.word	0x40240000
 80058f4:	9b08      	ldr	r3, [sp, #32]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80ca 	beq.w	8005a90 <_dtoa_r+0xb20>
 80058fc:	9b03      	ldr	r3, [sp, #12]
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	2d00      	cmp	r5, #0
 8005902:	dd05      	ble.n	8005910 <_dtoa_r+0x9a0>
 8005904:	4639      	mov	r1, r7
 8005906:	462a      	mov	r2, r5
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fb4b 	bl	8005fa4 <__lshift>
 800590e:	4607      	mov	r7, r0
 8005910:	f1b8 0f00 	cmp.w	r8, #0
 8005914:	d05b      	beq.n	80059ce <_dtoa_r+0xa5e>
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4620      	mov	r0, r4
 800591a:	f000 f931 	bl	8005b80 <_Balloc>
 800591e:	4605      	mov	r5, r0
 8005920:	b928      	cbnz	r0, 800592e <_dtoa_r+0x9be>
 8005922:	4b87      	ldr	r3, [pc, #540]	; (8005b40 <_dtoa_r+0xbd0>)
 8005924:	4602      	mov	r2, r0
 8005926:	f240 21ea 	movw	r1, #746	; 0x2ea
 800592a:	f7ff bb3b 	b.w	8004fa4 <_dtoa_r+0x34>
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	3202      	adds	r2, #2
 8005932:	0092      	lsls	r2, r2, #2
 8005934:	f107 010c 	add.w	r1, r7, #12
 8005938:	300c      	adds	r0, #12
 800593a:	f000 f913 	bl	8005b64 <memcpy>
 800593e:	2201      	movs	r2, #1
 8005940:	4629      	mov	r1, r5
 8005942:	4620      	mov	r0, r4
 8005944:	f000 fb2e 	bl	8005fa4 <__lshift>
 8005948:	9b01      	ldr	r3, [sp, #4]
 800594a:	f103 0901 	add.w	r9, r3, #1
 800594e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005952:	4413      	add	r3, r2
 8005954:	9305      	str	r3, [sp, #20]
 8005956:	f00a 0301 	and.w	r3, sl, #1
 800595a:	46b8      	mov	r8, r7
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	4607      	mov	r7, r0
 8005960:	4631      	mov	r1, r6
 8005962:	ee18 0a10 	vmov	r0, s16
 8005966:	f7ff fa77 	bl	8004e58 <quorem>
 800596a:	4641      	mov	r1, r8
 800596c:	9002      	str	r0, [sp, #8]
 800596e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005972:	ee18 0a10 	vmov	r0, s16
 8005976:	f000 fb85 	bl	8006084 <__mcmp>
 800597a:	463a      	mov	r2, r7
 800597c:	9003      	str	r0, [sp, #12]
 800597e:	4631      	mov	r1, r6
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fb9b 	bl	80060bc <__mdiff>
 8005986:	68c2      	ldr	r2, [r0, #12]
 8005988:	f109 3bff 	add.w	fp, r9, #4294967295
 800598c:	4605      	mov	r5, r0
 800598e:	bb02      	cbnz	r2, 80059d2 <_dtoa_r+0xa62>
 8005990:	4601      	mov	r1, r0
 8005992:	ee18 0a10 	vmov	r0, s16
 8005996:	f000 fb75 	bl	8006084 <__mcmp>
 800599a:	4602      	mov	r2, r0
 800599c:	4629      	mov	r1, r5
 800599e:	4620      	mov	r0, r4
 80059a0:	9207      	str	r2, [sp, #28]
 80059a2:	f000 f92d 	bl	8005c00 <_Bfree>
 80059a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80059aa:	ea43 0102 	orr.w	r1, r3, r2
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	430b      	orrs	r3, r1
 80059b2:	464d      	mov	r5, r9
 80059b4:	d10f      	bne.n	80059d6 <_dtoa_r+0xa66>
 80059b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059ba:	d02a      	beq.n	8005a12 <_dtoa_r+0xaa2>
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dd02      	ble.n	80059c8 <_dtoa_r+0xa58>
 80059c2:	9b02      	ldr	r3, [sp, #8]
 80059c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80059c8:	f88b a000 	strb.w	sl, [fp]
 80059cc:	e775      	b.n	80058ba <_dtoa_r+0x94a>
 80059ce:	4638      	mov	r0, r7
 80059d0:	e7ba      	b.n	8005948 <_dtoa_r+0x9d8>
 80059d2:	2201      	movs	r2, #1
 80059d4:	e7e2      	b.n	800599c <_dtoa_r+0xa2c>
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	db04      	blt.n	80059e6 <_dtoa_r+0xa76>
 80059dc:	9906      	ldr	r1, [sp, #24]
 80059de:	430b      	orrs	r3, r1
 80059e0:	9904      	ldr	r1, [sp, #16]
 80059e2:	430b      	orrs	r3, r1
 80059e4:	d122      	bne.n	8005a2c <_dtoa_r+0xabc>
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	ddee      	ble.n	80059c8 <_dtoa_r+0xa58>
 80059ea:	ee18 1a10 	vmov	r1, s16
 80059ee:	2201      	movs	r2, #1
 80059f0:	4620      	mov	r0, r4
 80059f2:	f000 fad7 	bl	8005fa4 <__lshift>
 80059f6:	4631      	mov	r1, r6
 80059f8:	ee08 0a10 	vmov	s16, r0
 80059fc:	f000 fb42 	bl	8006084 <__mcmp>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	dc03      	bgt.n	8005a0c <_dtoa_r+0xa9c>
 8005a04:	d1e0      	bne.n	80059c8 <_dtoa_r+0xa58>
 8005a06:	f01a 0f01 	tst.w	sl, #1
 8005a0a:	d0dd      	beq.n	80059c8 <_dtoa_r+0xa58>
 8005a0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a10:	d1d7      	bne.n	80059c2 <_dtoa_r+0xa52>
 8005a12:	2339      	movs	r3, #57	; 0x39
 8005a14:	f88b 3000 	strb.w	r3, [fp]
 8005a18:	462b      	mov	r3, r5
 8005a1a:	461d      	mov	r5, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a22:	2a39      	cmp	r2, #57	; 0x39
 8005a24:	d071      	beq.n	8005b0a <_dtoa_r+0xb9a>
 8005a26:	3201      	adds	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e746      	b.n	80058ba <_dtoa_r+0x94a>
 8005a2c:	2a00      	cmp	r2, #0
 8005a2e:	dd07      	ble.n	8005a40 <_dtoa_r+0xad0>
 8005a30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a34:	d0ed      	beq.n	8005a12 <_dtoa_r+0xaa2>
 8005a36:	f10a 0301 	add.w	r3, sl, #1
 8005a3a:	f88b 3000 	strb.w	r3, [fp]
 8005a3e:	e73c      	b.n	80058ba <_dtoa_r+0x94a>
 8005a40:	9b05      	ldr	r3, [sp, #20]
 8005a42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005a46:	4599      	cmp	r9, r3
 8005a48:	d047      	beq.n	8005ada <_dtoa_r+0xb6a>
 8005a4a:	ee18 1a10 	vmov	r1, s16
 8005a4e:	2300      	movs	r3, #0
 8005a50:	220a      	movs	r2, #10
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f8f6 	bl	8005c44 <__multadd>
 8005a58:	45b8      	cmp	r8, r7
 8005a5a:	ee08 0a10 	vmov	s16, r0
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	f04f 020a 	mov.w	r2, #10
 8005a66:	4641      	mov	r1, r8
 8005a68:	4620      	mov	r0, r4
 8005a6a:	d106      	bne.n	8005a7a <_dtoa_r+0xb0a>
 8005a6c:	f000 f8ea 	bl	8005c44 <__multadd>
 8005a70:	4680      	mov	r8, r0
 8005a72:	4607      	mov	r7, r0
 8005a74:	f109 0901 	add.w	r9, r9, #1
 8005a78:	e772      	b.n	8005960 <_dtoa_r+0x9f0>
 8005a7a:	f000 f8e3 	bl	8005c44 <__multadd>
 8005a7e:	4639      	mov	r1, r7
 8005a80:	4680      	mov	r8, r0
 8005a82:	2300      	movs	r3, #0
 8005a84:	220a      	movs	r2, #10
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 f8dc 	bl	8005c44 <__multadd>
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	e7f1      	b.n	8005a74 <_dtoa_r+0xb04>
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	9d01      	ldr	r5, [sp, #4]
 8005a96:	ee18 0a10 	vmov	r0, s16
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	f7ff f9dc 	bl	8004e58 <quorem>
 8005aa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005aa4:	9b01      	ldr	r3, [sp, #4]
 8005aa6:	f805 ab01 	strb.w	sl, [r5], #1
 8005aaa:	1aea      	subs	r2, r5, r3
 8005aac:	9b02      	ldr	r3, [sp, #8]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	dd09      	ble.n	8005ac6 <_dtoa_r+0xb56>
 8005ab2:	ee18 1a10 	vmov	r1, s16
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	220a      	movs	r2, #10
 8005aba:	4620      	mov	r0, r4
 8005abc:	f000 f8c2 	bl	8005c44 <__multadd>
 8005ac0:	ee08 0a10 	vmov	s16, r0
 8005ac4:	e7e7      	b.n	8005a96 <_dtoa_r+0xb26>
 8005ac6:	9b02      	ldr	r3, [sp, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfc8      	it	gt
 8005acc:	461d      	movgt	r5, r3
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	bfd8      	it	le
 8005ad2:	2501      	movle	r5, #1
 8005ad4:	441d      	add	r5, r3
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	ee18 1a10 	vmov	r1, s16
 8005ade:	2201      	movs	r2, #1
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fa5f 	bl	8005fa4 <__lshift>
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	ee08 0a10 	vmov	s16, r0
 8005aec:	f000 faca 	bl	8006084 <__mcmp>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	dc91      	bgt.n	8005a18 <_dtoa_r+0xaa8>
 8005af4:	d102      	bne.n	8005afc <_dtoa_r+0xb8c>
 8005af6:	f01a 0f01 	tst.w	sl, #1
 8005afa:	d18d      	bne.n	8005a18 <_dtoa_r+0xaa8>
 8005afc:	462b      	mov	r3, r5
 8005afe:	461d      	mov	r5, r3
 8005b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b04:	2a30      	cmp	r2, #48	; 0x30
 8005b06:	d0fa      	beq.n	8005afe <_dtoa_r+0xb8e>
 8005b08:	e6d7      	b.n	80058ba <_dtoa_r+0x94a>
 8005b0a:	9a01      	ldr	r2, [sp, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d184      	bne.n	8005a1a <_dtoa_r+0xaaa>
 8005b10:	9b00      	ldr	r3, [sp, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	2331      	movs	r3, #49	; 0x31
 8005b18:	7013      	strb	r3, [r2, #0]
 8005b1a:	e6ce      	b.n	80058ba <_dtoa_r+0x94a>
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <_dtoa_r+0xbd4>)
 8005b1e:	f7ff ba95 	b.w	800504c <_dtoa_r+0xdc>
 8005b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f47f aa6e 	bne.w	8005006 <_dtoa_r+0x96>
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <_dtoa_r+0xbd8>)
 8005b2c:	f7ff ba8e 	b.w	800504c <_dtoa_r+0xdc>
 8005b30:	9b02      	ldr	r3, [sp, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	dcae      	bgt.n	8005a94 <_dtoa_r+0xb24>
 8005b36:	9b06      	ldr	r3, [sp, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	f73f aea8 	bgt.w	800588e <_dtoa_r+0x91e>
 8005b3e:	e7a9      	b.n	8005a94 <_dtoa_r+0xb24>
 8005b40:	080070c7 	.word	0x080070c7
 8005b44:	08007024 	.word	0x08007024
 8005b48:	08007048 	.word	0x08007048

08005b4c <_localeconv_r>:
 8005b4c:	4800      	ldr	r0, [pc, #0]	; (8005b50 <_localeconv_r+0x4>)
 8005b4e:	4770      	bx	lr
 8005b50:	20000160 	.word	0x20000160

08005b54 <malloc>:
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <malloc+0xc>)
 8005b56:	4601      	mov	r1, r0
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f000 bc17 	b.w	800638c <_malloc_r>
 8005b5e:	bf00      	nop
 8005b60:	2000000c 	.word	0x2000000c

08005b64 <memcpy>:
 8005b64:	440a      	add	r2, r1
 8005b66:	4291      	cmp	r1, r2
 8005b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b6c:	d100      	bne.n	8005b70 <memcpy+0xc>
 8005b6e:	4770      	bx	lr
 8005b70:	b510      	push	{r4, lr}
 8005b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b7a:	4291      	cmp	r1, r2
 8005b7c:	d1f9      	bne.n	8005b72 <memcpy+0xe>
 8005b7e:	bd10      	pop	{r4, pc}

08005b80 <_Balloc>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	b976      	cbnz	r6, 8005ba8 <_Balloc+0x28>
 8005b8a:	2010      	movs	r0, #16
 8005b8c:	f7ff ffe2 	bl	8005b54 <malloc>
 8005b90:	4602      	mov	r2, r0
 8005b92:	6260      	str	r0, [r4, #36]	; 0x24
 8005b94:	b920      	cbnz	r0, 8005ba0 <_Balloc+0x20>
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <_Balloc+0x78>)
 8005b98:	4818      	ldr	r0, [pc, #96]	; (8005bfc <_Balloc+0x7c>)
 8005b9a:	2166      	movs	r1, #102	; 0x66
 8005b9c:	f000 fc7a 	bl	8006494 <__assert_func>
 8005ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ba4:	6006      	str	r6, [r0, #0]
 8005ba6:	60c6      	str	r6, [r0, #12]
 8005ba8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005baa:	68f3      	ldr	r3, [r6, #12]
 8005bac:	b183      	cbz	r3, 8005bd0 <_Balloc+0x50>
 8005bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bb6:	b9b8      	cbnz	r0, 8005be8 <_Balloc+0x68>
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f605 	lsl.w	r6, r1, r5
 8005bbe:	1d72      	adds	r2, r6, #5
 8005bc0:	0092      	lsls	r2, r2, #2
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f000 fb60 	bl	8006288 <_calloc_r>
 8005bc8:	b160      	cbz	r0, 8005be4 <_Balloc+0x64>
 8005bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bce:	e00e      	b.n	8005bee <_Balloc+0x6e>
 8005bd0:	2221      	movs	r2, #33	; 0x21
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f000 fb57 	bl	8006288 <_calloc_r>
 8005bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bdc:	60f0      	str	r0, [r6, #12]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e4      	bne.n	8005bae <_Balloc+0x2e>
 8005be4:	2000      	movs	r0, #0
 8005be6:	bd70      	pop	{r4, r5, r6, pc}
 8005be8:	6802      	ldr	r2, [r0, #0]
 8005bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bf4:	e7f7      	b.n	8005be6 <_Balloc+0x66>
 8005bf6:	bf00      	nop
 8005bf8:	08007055 	.word	0x08007055
 8005bfc:	080070d8 	.word	0x080070d8

08005c00 <_Bfree>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c04:	4605      	mov	r5, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	b976      	cbnz	r6, 8005c28 <_Bfree+0x28>
 8005c0a:	2010      	movs	r0, #16
 8005c0c:	f7ff ffa2 	bl	8005b54 <malloc>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6268      	str	r0, [r5, #36]	; 0x24
 8005c14:	b920      	cbnz	r0, 8005c20 <_Bfree+0x20>
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <_Bfree+0x3c>)
 8005c18:	4809      	ldr	r0, [pc, #36]	; (8005c40 <_Bfree+0x40>)
 8005c1a:	218a      	movs	r1, #138	; 0x8a
 8005c1c:	f000 fc3a 	bl	8006494 <__assert_func>
 8005c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c24:	6006      	str	r6, [r0, #0]
 8005c26:	60c6      	str	r6, [r0, #12]
 8005c28:	b13c      	cbz	r4, 8005c3a <_Bfree+0x3a>
 8005c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c2c:	6862      	ldr	r2, [r4, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c34:	6021      	str	r1, [r4, #0]
 8005c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	08007055 	.word	0x08007055
 8005c40:	080070d8 	.word	0x080070d8

08005c44 <__multadd>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	690d      	ldr	r5, [r1, #16]
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	461e      	mov	r6, r3
 8005c50:	f101 0c14 	add.w	ip, r1, #20
 8005c54:	2000      	movs	r0, #0
 8005c56:	f8dc 3000 	ldr.w	r3, [ip]
 8005c5a:	b299      	uxth	r1, r3
 8005c5c:	fb02 6101 	mla	r1, r2, r1, r6
 8005c60:	0c1e      	lsrs	r6, r3, #16
 8005c62:	0c0b      	lsrs	r3, r1, #16
 8005c64:	fb02 3306 	mla	r3, r2, r6, r3
 8005c68:	b289      	uxth	r1, r1
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c70:	4285      	cmp	r5, r0
 8005c72:	f84c 1b04 	str.w	r1, [ip], #4
 8005c76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c7a:	dcec      	bgt.n	8005c56 <__multadd+0x12>
 8005c7c:	b30e      	cbz	r6, 8005cc2 <__multadd+0x7e>
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	42ab      	cmp	r3, r5
 8005c82:	dc19      	bgt.n	8005cb8 <__multadd+0x74>
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	4638      	mov	r0, r7
 8005c88:	3101      	adds	r1, #1
 8005c8a:	f7ff ff79 	bl	8005b80 <_Balloc>
 8005c8e:	4680      	mov	r8, r0
 8005c90:	b928      	cbnz	r0, 8005c9e <__multadd+0x5a>
 8005c92:	4602      	mov	r2, r0
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <__multadd+0x84>)
 8005c96:	480d      	ldr	r0, [pc, #52]	; (8005ccc <__multadd+0x88>)
 8005c98:	21b5      	movs	r1, #181	; 0xb5
 8005c9a:	f000 fbfb 	bl	8006494 <__assert_func>
 8005c9e:	6922      	ldr	r2, [r4, #16]
 8005ca0:	3202      	adds	r2, #2
 8005ca2:	f104 010c 	add.w	r1, r4, #12
 8005ca6:	0092      	lsls	r2, r2, #2
 8005ca8:	300c      	adds	r0, #12
 8005caa:	f7ff ff5b 	bl	8005b64 <memcpy>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	f7ff ffa5 	bl	8005c00 <_Bfree>
 8005cb6:	4644      	mov	r4, r8
 8005cb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	615e      	str	r6, [r3, #20]
 8005cc0:	6125      	str	r5, [r4, #16]
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc8:	080070c7 	.word	0x080070c7
 8005ccc:	080070d8 	.word	0x080070d8

08005cd0 <__hi0bits>:
 8005cd0:	0c03      	lsrs	r3, r0, #16
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	b9d3      	cbnz	r3, 8005d0c <__hi0bits+0x3c>
 8005cd6:	0400      	lsls	r0, r0, #16
 8005cd8:	2310      	movs	r3, #16
 8005cda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005cde:	bf04      	itt	eq
 8005ce0:	0200      	lsleq	r0, r0, #8
 8005ce2:	3308      	addeq	r3, #8
 8005ce4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ce8:	bf04      	itt	eq
 8005cea:	0100      	lsleq	r0, r0, #4
 8005cec:	3304      	addeq	r3, #4
 8005cee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005cf2:	bf04      	itt	eq
 8005cf4:	0080      	lsleq	r0, r0, #2
 8005cf6:	3302      	addeq	r3, #2
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	db05      	blt.n	8005d08 <__hi0bits+0x38>
 8005cfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d00:	f103 0301 	add.w	r3, r3, #1
 8005d04:	bf08      	it	eq
 8005d06:	2320      	moveq	r3, #32
 8005d08:	4618      	mov	r0, r3
 8005d0a:	4770      	bx	lr
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e7e4      	b.n	8005cda <__hi0bits+0xa>

08005d10 <__lo0bits>:
 8005d10:	6803      	ldr	r3, [r0, #0]
 8005d12:	f013 0207 	ands.w	r2, r3, #7
 8005d16:	4601      	mov	r1, r0
 8005d18:	d00b      	beq.n	8005d32 <__lo0bits+0x22>
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d423      	bmi.n	8005d66 <__lo0bits+0x56>
 8005d1e:	0798      	lsls	r0, r3, #30
 8005d20:	bf49      	itett	mi
 8005d22:	085b      	lsrmi	r3, r3, #1
 8005d24:	089b      	lsrpl	r3, r3, #2
 8005d26:	2001      	movmi	r0, #1
 8005d28:	600b      	strmi	r3, [r1, #0]
 8005d2a:	bf5c      	itt	pl
 8005d2c:	600b      	strpl	r3, [r1, #0]
 8005d2e:	2002      	movpl	r0, #2
 8005d30:	4770      	bx	lr
 8005d32:	b298      	uxth	r0, r3
 8005d34:	b9a8      	cbnz	r0, 8005d62 <__lo0bits+0x52>
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	2010      	movs	r0, #16
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	b90a      	cbnz	r2, 8005d42 <__lo0bits+0x32>
 8005d3e:	3008      	adds	r0, #8
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	071a      	lsls	r2, r3, #28
 8005d44:	bf04      	itt	eq
 8005d46:	091b      	lsreq	r3, r3, #4
 8005d48:	3004      	addeq	r0, #4
 8005d4a:	079a      	lsls	r2, r3, #30
 8005d4c:	bf04      	itt	eq
 8005d4e:	089b      	lsreq	r3, r3, #2
 8005d50:	3002      	addeq	r0, #2
 8005d52:	07da      	lsls	r2, r3, #31
 8005d54:	d403      	bmi.n	8005d5e <__lo0bits+0x4e>
 8005d56:	085b      	lsrs	r3, r3, #1
 8005d58:	f100 0001 	add.w	r0, r0, #1
 8005d5c:	d005      	beq.n	8005d6a <__lo0bits+0x5a>
 8005d5e:	600b      	str	r3, [r1, #0]
 8005d60:	4770      	bx	lr
 8005d62:	4610      	mov	r0, r2
 8005d64:	e7e9      	b.n	8005d3a <__lo0bits+0x2a>
 8005d66:	2000      	movs	r0, #0
 8005d68:	4770      	bx	lr
 8005d6a:	2020      	movs	r0, #32
 8005d6c:	4770      	bx	lr
	...

08005d70 <__i2b>:
 8005d70:	b510      	push	{r4, lr}
 8005d72:	460c      	mov	r4, r1
 8005d74:	2101      	movs	r1, #1
 8005d76:	f7ff ff03 	bl	8005b80 <_Balloc>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	b928      	cbnz	r0, 8005d8a <__i2b+0x1a>
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <__i2b+0x24>)
 8005d80:	4805      	ldr	r0, [pc, #20]	; (8005d98 <__i2b+0x28>)
 8005d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d86:	f000 fb85 	bl	8006494 <__assert_func>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	6144      	str	r4, [r0, #20]
 8005d8e:	6103      	str	r3, [r0, #16]
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	bf00      	nop
 8005d94:	080070c7 	.word	0x080070c7
 8005d98:	080070d8 	.word	0x080070d8

08005d9c <__multiply>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4691      	mov	r9, r2
 8005da2:	690a      	ldr	r2, [r1, #16]
 8005da4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	bfb8      	it	lt
 8005dac:	460b      	movlt	r3, r1
 8005dae:	460c      	mov	r4, r1
 8005db0:	bfbc      	itt	lt
 8005db2:	464c      	movlt	r4, r9
 8005db4:	4699      	movlt	r9, r3
 8005db6:	6927      	ldr	r7, [r4, #16]
 8005db8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005dbc:	68a3      	ldr	r3, [r4, #8]
 8005dbe:	6861      	ldr	r1, [r4, #4]
 8005dc0:	eb07 060a 	add.w	r6, r7, sl
 8005dc4:	42b3      	cmp	r3, r6
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	bfb8      	it	lt
 8005dca:	3101      	addlt	r1, #1
 8005dcc:	f7ff fed8 	bl	8005b80 <_Balloc>
 8005dd0:	b930      	cbnz	r0, 8005de0 <__multiply+0x44>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <__multiply+0x14c>)
 8005dd6:	4845      	ldr	r0, [pc, #276]	; (8005eec <__multiply+0x150>)
 8005dd8:	f240 115d 	movw	r1, #349	; 0x15d
 8005ddc:	f000 fb5a 	bl	8006494 <__assert_func>
 8005de0:	f100 0514 	add.w	r5, r0, #20
 8005de4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005de8:	462b      	mov	r3, r5
 8005dea:	2200      	movs	r2, #0
 8005dec:	4543      	cmp	r3, r8
 8005dee:	d321      	bcc.n	8005e34 <__multiply+0x98>
 8005df0:	f104 0314 	add.w	r3, r4, #20
 8005df4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005df8:	f109 0314 	add.w	r3, r9, #20
 8005dfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e00:	9202      	str	r2, [sp, #8]
 8005e02:	1b3a      	subs	r2, r7, r4
 8005e04:	3a15      	subs	r2, #21
 8005e06:	f022 0203 	bic.w	r2, r2, #3
 8005e0a:	3204      	adds	r2, #4
 8005e0c:	f104 0115 	add.w	r1, r4, #21
 8005e10:	428f      	cmp	r7, r1
 8005e12:	bf38      	it	cc
 8005e14:	2204      	movcc	r2, #4
 8005e16:	9201      	str	r2, [sp, #4]
 8005e18:	9a02      	ldr	r2, [sp, #8]
 8005e1a:	9303      	str	r3, [sp, #12]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d80c      	bhi.n	8005e3a <__multiply+0x9e>
 8005e20:	2e00      	cmp	r6, #0
 8005e22:	dd03      	ble.n	8005e2c <__multiply+0x90>
 8005e24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d05a      	beq.n	8005ee2 <__multiply+0x146>
 8005e2c:	6106      	str	r6, [r0, #16]
 8005e2e:	b005      	add	sp, #20
 8005e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e34:	f843 2b04 	str.w	r2, [r3], #4
 8005e38:	e7d8      	b.n	8005dec <__multiply+0x50>
 8005e3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e3e:	f1ba 0f00 	cmp.w	sl, #0
 8005e42:	d024      	beq.n	8005e8e <__multiply+0xf2>
 8005e44:	f104 0e14 	add.w	lr, r4, #20
 8005e48:	46a9      	mov	r9, r5
 8005e4a:	f04f 0c00 	mov.w	ip, #0
 8005e4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e52:	f8d9 1000 	ldr.w	r1, [r9]
 8005e56:	fa1f fb82 	uxth.w	fp, r2
 8005e5a:	b289      	uxth	r1, r1
 8005e5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e64:	f8d9 2000 	ldr.w	r2, [r9]
 8005e68:	4461      	add	r1, ip
 8005e6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e76:	b289      	uxth	r1, r1
 8005e78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e7c:	4577      	cmp	r7, lr
 8005e7e:	f849 1b04 	str.w	r1, [r9], #4
 8005e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e86:	d8e2      	bhi.n	8005e4e <__multiply+0xb2>
 8005e88:	9a01      	ldr	r2, [sp, #4]
 8005e8a:	f845 c002 	str.w	ip, [r5, r2]
 8005e8e:	9a03      	ldr	r2, [sp, #12]
 8005e90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e94:	3304      	adds	r3, #4
 8005e96:	f1b9 0f00 	cmp.w	r9, #0
 8005e9a:	d020      	beq.n	8005ede <__multiply+0x142>
 8005e9c:	6829      	ldr	r1, [r5, #0]
 8005e9e:	f104 0c14 	add.w	ip, r4, #20
 8005ea2:	46ae      	mov	lr, r5
 8005ea4:	f04f 0a00 	mov.w	sl, #0
 8005ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8005eac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005eb0:	fb09 220b 	mla	r2, r9, fp, r2
 8005eb4:	4492      	add	sl, r2
 8005eb6:	b289      	uxth	r1, r1
 8005eb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ebc:	f84e 1b04 	str.w	r1, [lr], #4
 8005ec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ec4:	f8be 1000 	ldrh.w	r1, [lr]
 8005ec8:	0c12      	lsrs	r2, r2, #16
 8005eca:	fb09 1102 	mla	r1, r9, r2, r1
 8005ece:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ed2:	4567      	cmp	r7, ip
 8005ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ed8:	d8e6      	bhi.n	8005ea8 <__multiply+0x10c>
 8005eda:	9a01      	ldr	r2, [sp, #4]
 8005edc:	50a9      	str	r1, [r5, r2]
 8005ede:	3504      	adds	r5, #4
 8005ee0:	e79a      	b.n	8005e18 <__multiply+0x7c>
 8005ee2:	3e01      	subs	r6, #1
 8005ee4:	e79c      	b.n	8005e20 <__multiply+0x84>
 8005ee6:	bf00      	nop
 8005ee8:	080070c7 	.word	0x080070c7
 8005eec:	080070d8 	.word	0x080070d8

08005ef0 <__pow5mult>:
 8005ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	f012 0203 	ands.w	r2, r2, #3
 8005efa:	4606      	mov	r6, r0
 8005efc:	460f      	mov	r7, r1
 8005efe:	d007      	beq.n	8005f10 <__pow5mult+0x20>
 8005f00:	4c25      	ldr	r4, [pc, #148]	; (8005f98 <__pow5mult+0xa8>)
 8005f02:	3a01      	subs	r2, #1
 8005f04:	2300      	movs	r3, #0
 8005f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f0a:	f7ff fe9b 	bl	8005c44 <__multadd>
 8005f0e:	4607      	mov	r7, r0
 8005f10:	10ad      	asrs	r5, r5, #2
 8005f12:	d03d      	beq.n	8005f90 <__pow5mult+0xa0>
 8005f14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f16:	b97c      	cbnz	r4, 8005f38 <__pow5mult+0x48>
 8005f18:	2010      	movs	r0, #16
 8005f1a:	f7ff fe1b 	bl	8005b54 <malloc>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6270      	str	r0, [r6, #36]	; 0x24
 8005f22:	b928      	cbnz	r0, 8005f30 <__pow5mult+0x40>
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <__pow5mult+0xac>)
 8005f26:	481e      	ldr	r0, [pc, #120]	; (8005fa0 <__pow5mult+0xb0>)
 8005f28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f2c:	f000 fab2 	bl	8006494 <__assert_func>
 8005f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f34:	6004      	str	r4, [r0, #0]
 8005f36:	60c4      	str	r4, [r0, #12]
 8005f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f40:	b94c      	cbnz	r4, 8005f56 <__pow5mult+0x66>
 8005f42:	f240 2171 	movw	r1, #625	; 0x271
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff ff12 	bl	8005d70 <__i2b>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f52:	4604      	mov	r4, r0
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	f04f 0900 	mov.w	r9, #0
 8005f5a:	07eb      	lsls	r3, r5, #31
 8005f5c:	d50a      	bpl.n	8005f74 <__pow5mult+0x84>
 8005f5e:	4639      	mov	r1, r7
 8005f60:	4622      	mov	r2, r4
 8005f62:	4630      	mov	r0, r6
 8005f64:	f7ff ff1a 	bl	8005d9c <__multiply>
 8005f68:	4639      	mov	r1, r7
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f7ff fe47 	bl	8005c00 <_Bfree>
 8005f72:	4647      	mov	r7, r8
 8005f74:	106d      	asrs	r5, r5, #1
 8005f76:	d00b      	beq.n	8005f90 <__pow5mult+0xa0>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	b938      	cbnz	r0, 8005f8c <__pow5mult+0x9c>
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4630      	mov	r0, r6
 8005f82:	f7ff ff0b 	bl	8005d9c <__multiply>
 8005f86:	6020      	str	r0, [r4, #0]
 8005f88:	f8c0 9000 	str.w	r9, [r0]
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	e7e4      	b.n	8005f5a <__pow5mult+0x6a>
 8005f90:	4638      	mov	r0, r7
 8005f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f96:	bf00      	nop
 8005f98:	08007228 	.word	0x08007228
 8005f9c:	08007055 	.word	0x08007055
 8005fa0:	080070d8 	.word	0x080070d8

08005fa4 <__lshift>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6849      	ldr	r1, [r1, #4]
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	4607      	mov	r7, r0
 8005fb6:	4691      	mov	r9, r2
 8005fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fbc:	f108 0601 	add.w	r6, r8, #1
 8005fc0:	42b3      	cmp	r3, r6
 8005fc2:	db0b      	blt.n	8005fdc <__lshift+0x38>
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	f7ff fddb 	bl	8005b80 <_Balloc>
 8005fca:	4605      	mov	r5, r0
 8005fcc:	b948      	cbnz	r0, 8005fe2 <__lshift+0x3e>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4b2a      	ldr	r3, [pc, #168]	; (800607c <__lshift+0xd8>)
 8005fd2:	482b      	ldr	r0, [pc, #172]	; (8006080 <__lshift+0xdc>)
 8005fd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005fd8:	f000 fa5c 	bl	8006494 <__assert_func>
 8005fdc:	3101      	adds	r1, #1
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__lshift+0x1c>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f100 0114 	add.w	r1, r0, #20
 8005fe8:	f100 0210 	add.w	r2, r0, #16
 8005fec:	4618      	mov	r0, r3
 8005fee:	4553      	cmp	r3, sl
 8005ff0:	db37      	blt.n	8006062 <__lshift+0xbe>
 8005ff2:	6920      	ldr	r0, [r4, #16]
 8005ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ff8:	f104 0314 	add.w	r3, r4, #20
 8005ffc:	f019 091f 	ands.w	r9, r9, #31
 8006000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006008:	d02f      	beq.n	800606a <__lshift+0xc6>
 800600a:	f1c9 0e20 	rsb	lr, r9, #32
 800600e:	468a      	mov	sl, r1
 8006010:	f04f 0c00 	mov.w	ip, #0
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	fa02 f209 	lsl.w	r2, r2, r9
 800601a:	ea42 020c 	orr.w	r2, r2, ip
 800601e:	f84a 2b04 	str.w	r2, [sl], #4
 8006022:	f853 2b04 	ldr.w	r2, [r3], #4
 8006026:	4298      	cmp	r0, r3
 8006028:	fa22 fc0e 	lsr.w	ip, r2, lr
 800602c:	d8f2      	bhi.n	8006014 <__lshift+0x70>
 800602e:	1b03      	subs	r3, r0, r4
 8006030:	3b15      	subs	r3, #21
 8006032:	f023 0303 	bic.w	r3, r3, #3
 8006036:	3304      	adds	r3, #4
 8006038:	f104 0215 	add.w	r2, r4, #21
 800603c:	4290      	cmp	r0, r2
 800603e:	bf38      	it	cc
 8006040:	2304      	movcc	r3, #4
 8006042:	f841 c003 	str.w	ip, [r1, r3]
 8006046:	f1bc 0f00 	cmp.w	ip, #0
 800604a:	d001      	beq.n	8006050 <__lshift+0xac>
 800604c:	f108 0602 	add.w	r6, r8, #2
 8006050:	3e01      	subs	r6, #1
 8006052:	4638      	mov	r0, r7
 8006054:	612e      	str	r6, [r5, #16]
 8006056:	4621      	mov	r1, r4
 8006058:	f7ff fdd2 	bl	8005c00 <_Bfree>
 800605c:	4628      	mov	r0, r5
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	f842 0f04 	str.w	r0, [r2, #4]!
 8006066:	3301      	adds	r3, #1
 8006068:	e7c1      	b.n	8005fee <__lshift+0x4a>
 800606a:	3904      	subs	r1, #4
 800606c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006070:	f841 2f04 	str.w	r2, [r1, #4]!
 8006074:	4298      	cmp	r0, r3
 8006076:	d8f9      	bhi.n	800606c <__lshift+0xc8>
 8006078:	e7ea      	b.n	8006050 <__lshift+0xac>
 800607a:	bf00      	nop
 800607c:	080070c7 	.word	0x080070c7
 8006080:	080070d8 	.word	0x080070d8

08006084 <__mcmp>:
 8006084:	b530      	push	{r4, r5, lr}
 8006086:	6902      	ldr	r2, [r0, #16]
 8006088:	690c      	ldr	r4, [r1, #16]
 800608a:	1b12      	subs	r2, r2, r4
 800608c:	d10e      	bne.n	80060ac <__mcmp+0x28>
 800608e:	f100 0314 	add.w	r3, r0, #20
 8006092:	3114      	adds	r1, #20
 8006094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800609c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80060a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80060a4:	42a5      	cmp	r5, r4
 80060a6:	d003      	beq.n	80060b0 <__mcmp+0x2c>
 80060a8:	d305      	bcc.n	80060b6 <__mcmp+0x32>
 80060aa:	2201      	movs	r2, #1
 80060ac:	4610      	mov	r0, r2
 80060ae:	bd30      	pop	{r4, r5, pc}
 80060b0:	4283      	cmp	r3, r0
 80060b2:	d3f3      	bcc.n	800609c <__mcmp+0x18>
 80060b4:	e7fa      	b.n	80060ac <__mcmp+0x28>
 80060b6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ba:	e7f7      	b.n	80060ac <__mcmp+0x28>

080060bc <__mdiff>:
 80060bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	460c      	mov	r4, r1
 80060c2:	4606      	mov	r6, r0
 80060c4:	4611      	mov	r1, r2
 80060c6:	4620      	mov	r0, r4
 80060c8:	4690      	mov	r8, r2
 80060ca:	f7ff ffdb 	bl	8006084 <__mcmp>
 80060ce:	1e05      	subs	r5, r0, #0
 80060d0:	d110      	bne.n	80060f4 <__mdiff+0x38>
 80060d2:	4629      	mov	r1, r5
 80060d4:	4630      	mov	r0, r6
 80060d6:	f7ff fd53 	bl	8005b80 <_Balloc>
 80060da:	b930      	cbnz	r0, 80060ea <__mdiff+0x2e>
 80060dc:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <__mdiff+0x10c>)
 80060de:	4602      	mov	r2, r0
 80060e0:	f240 2132 	movw	r1, #562	; 0x232
 80060e4:	4839      	ldr	r0, [pc, #228]	; (80061cc <__mdiff+0x110>)
 80060e6:	f000 f9d5 	bl	8006494 <__assert_func>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	bfa4      	itt	ge
 80060f6:	4643      	movge	r3, r8
 80060f8:	46a0      	movge	r8, r4
 80060fa:	4630      	mov	r0, r6
 80060fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006100:	bfa6      	itte	ge
 8006102:	461c      	movge	r4, r3
 8006104:	2500      	movge	r5, #0
 8006106:	2501      	movlt	r5, #1
 8006108:	f7ff fd3a 	bl	8005b80 <_Balloc>
 800610c:	b920      	cbnz	r0, 8006118 <__mdiff+0x5c>
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <__mdiff+0x10c>)
 8006110:	4602      	mov	r2, r0
 8006112:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006116:	e7e5      	b.n	80060e4 <__mdiff+0x28>
 8006118:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800611c:	6926      	ldr	r6, [r4, #16]
 800611e:	60c5      	str	r5, [r0, #12]
 8006120:	f104 0914 	add.w	r9, r4, #20
 8006124:	f108 0514 	add.w	r5, r8, #20
 8006128:	f100 0e14 	add.w	lr, r0, #20
 800612c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006130:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006134:	f108 0210 	add.w	r2, r8, #16
 8006138:	46f2      	mov	sl, lr
 800613a:	2100      	movs	r1, #0
 800613c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006140:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006144:	fa1f f883 	uxth.w	r8, r3
 8006148:	fa11 f18b 	uxtah	r1, r1, fp
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	eba1 0808 	sub.w	r8, r1, r8
 8006152:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006156:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800615a:	fa1f f888 	uxth.w	r8, r8
 800615e:	1419      	asrs	r1, r3, #16
 8006160:	454e      	cmp	r6, r9
 8006162:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006166:	f84a 3b04 	str.w	r3, [sl], #4
 800616a:	d8e7      	bhi.n	800613c <__mdiff+0x80>
 800616c:	1b33      	subs	r3, r6, r4
 800616e:	3b15      	subs	r3, #21
 8006170:	f023 0303 	bic.w	r3, r3, #3
 8006174:	3304      	adds	r3, #4
 8006176:	3415      	adds	r4, #21
 8006178:	42a6      	cmp	r6, r4
 800617a:	bf38      	it	cc
 800617c:	2304      	movcc	r3, #4
 800617e:	441d      	add	r5, r3
 8006180:	4473      	add	r3, lr
 8006182:	469e      	mov	lr, r3
 8006184:	462e      	mov	r6, r5
 8006186:	4566      	cmp	r6, ip
 8006188:	d30e      	bcc.n	80061a8 <__mdiff+0xec>
 800618a:	f10c 0203 	add.w	r2, ip, #3
 800618e:	1b52      	subs	r2, r2, r5
 8006190:	f022 0203 	bic.w	r2, r2, #3
 8006194:	3d03      	subs	r5, #3
 8006196:	45ac      	cmp	ip, r5
 8006198:	bf38      	it	cc
 800619a:	2200      	movcc	r2, #0
 800619c:	441a      	add	r2, r3
 800619e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80061a2:	b17b      	cbz	r3, 80061c4 <__mdiff+0x108>
 80061a4:	6107      	str	r7, [r0, #16]
 80061a6:	e7a3      	b.n	80060f0 <__mdiff+0x34>
 80061a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80061ac:	fa11 f288 	uxtah	r2, r1, r8
 80061b0:	1414      	asrs	r4, r2, #16
 80061b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80061b6:	b292      	uxth	r2, r2
 80061b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80061bc:	f84e 2b04 	str.w	r2, [lr], #4
 80061c0:	1421      	asrs	r1, r4, #16
 80061c2:	e7e0      	b.n	8006186 <__mdiff+0xca>
 80061c4:	3f01      	subs	r7, #1
 80061c6:	e7ea      	b.n	800619e <__mdiff+0xe2>
 80061c8:	080070c7 	.word	0x080070c7
 80061cc:	080070d8 	.word	0x080070d8

080061d0 <__d2b>:
 80061d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4689      	mov	r9, r1
 80061d6:	2101      	movs	r1, #1
 80061d8:	ec57 6b10 	vmov	r6, r7, d0
 80061dc:	4690      	mov	r8, r2
 80061de:	f7ff fccf 	bl	8005b80 <_Balloc>
 80061e2:	4604      	mov	r4, r0
 80061e4:	b930      	cbnz	r0, 80061f4 <__d2b+0x24>
 80061e6:	4602      	mov	r2, r0
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <__d2b+0xb0>)
 80061ea:	4826      	ldr	r0, [pc, #152]	; (8006284 <__d2b+0xb4>)
 80061ec:	f240 310a 	movw	r1, #778	; 0x30a
 80061f0:	f000 f950 	bl	8006494 <__assert_func>
 80061f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80061f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061fc:	bb35      	cbnz	r5, 800624c <__d2b+0x7c>
 80061fe:	2e00      	cmp	r6, #0
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	d028      	beq.n	8006256 <__d2b+0x86>
 8006204:	4668      	mov	r0, sp
 8006206:	9600      	str	r6, [sp, #0]
 8006208:	f7ff fd82 	bl	8005d10 <__lo0bits>
 800620c:	9900      	ldr	r1, [sp, #0]
 800620e:	b300      	cbz	r0, 8006252 <__d2b+0x82>
 8006210:	9a01      	ldr	r2, [sp, #4]
 8006212:	f1c0 0320 	rsb	r3, r0, #32
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	430b      	orrs	r3, r1
 800621c:	40c2      	lsrs	r2, r0
 800621e:	6163      	str	r3, [r4, #20]
 8006220:	9201      	str	r2, [sp, #4]
 8006222:	9b01      	ldr	r3, [sp, #4]
 8006224:	61a3      	str	r3, [r4, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	bf14      	ite	ne
 800622a:	2202      	movne	r2, #2
 800622c:	2201      	moveq	r2, #1
 800622e:	6122      	str	r2, [r4, #16]
 8006230:	b1d5      	cbz	r5, 8006268 <__d2b+0x98>
 8006232:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006236:	4405      	add	r5, r0
 8006238:	f8c9 5000 	str.w	r5, [r9]
 800623c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006240:	f8c8 0000 	str.w	r0, [r8]
 8006244:	4620      	mov	r0, r4
 8006246:	b003      	add	sp, #12
 8006248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800624c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006250:	e7d5      	b.n	80061fe <__d2b+0x2e>
 8006252:	6161      	str	r1, [r4, #20]
 8006254:	e7e5      	b.n	8006222 <__d2b+0x52>
 8006256:	a801      	add	r0, sp, #4
 8006258:	f7ff fd5a 	bl	8005d10 <__lo0bits>
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	6163      	str	r3, [r4, #20]
 8006260:	2201      	movs	r2, #1
 8006262:	6122      	str	r2, [r4, #16]
 8006264:	3020      	adds	r0, #32
 8006266:	e7e3      	b.n	8006230 <__d2b+0x60>
 8006268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800626c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006270:	f8c9 0000 	str.w	r0, [r9]
 8006274:	6918      	ldr	r0, [r3, #16]
 8006276:	f7ff fd2b 	bl	8005cd0 <__hi0bits>
 800627a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800627e:	e7df      	b.n	8006240 <__d2b+0x70>
 8006280:	080070c7 	.word	0x080070c7
 8006284:	080070d8 	.word	0x080070d8

08006288 <_calloc_r>:
 8006288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800628a:	fba1 2402 	umull	r2, r4, r1, r2
 800628e:	b94c      	cbnz	r4, 80062a4 <_calloc_r+0x1c>
 8006290:	4611      	mov	r1, r2
 8006292:	9201      	str	r2, [sp, #4]
 8006294:	f000 f87a 	bl	800638c <_malloc_r>
 8006298:	9a01      	ldr	r2, [sp, #4]
 800629a:	4605      	mov	r5, r0
 800629c:	b930      	cbnz	r0, 80062ac <_calloc_r+0x24>
 800629e:	4628      	mov	r0, r5
 80062a0:	b003      	add	sp, #12
 80062a2:	bd30      	pop	{r4, r5, pc}
 80062a4:	220c      	movs	r2, #12
 80062a6:	6002      	str	r2, [r0, #0]
 80062a8:	2500      	movs	r5, #0
 80062aa:	e7f8      	b.n	800629e <_calloc_r+0x16>
 80062ac:	4621      	mov	r1, r4
 80062ae:	f7fe f961 	bl	8004574 <memset>
 80062b2:	e7f4      	b.n	800629e <_calloc_r+0x16>

080062b4 <_free_r>:
 80062b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062b6:	2900      	cmp	r1, #0
 80062b8:	d044      	beq.n	8006344 <_free_r+0x90>
 80062ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062be:	9001      	str	r0, [sp, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f1a1 0404 	sub.w	r4, r1, #4
 80062c6:	bfb8      	it	lt
 80062c8:	18e4      	addlt	r4, r4, r3
 80062ca:	f000 f925 	bl	8006518 <__malloc_lock>
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <_free_r+0x94>)
 80062d0:	9801      	ldr	r0, [sp, #4]
 80062d2:	6813      	ldr	r3, [r2, #0]
 80062d4:	b933      	cbnz	r3, 80062e4 <_free_r+0x30>
 80062d6:	6063      	str	r3, [r4, #4]
 80062d8:	6014      	str	r4, [r2, #0]
 80062da:	b003      	add	sp, #12
 80062dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062e0:	f000 b920 	b.w	8006524 <__malloc_unlock>
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	d908      	bls.n	80062fa <_free_r+0x46>
 80062e8:	6825      	ldr	r5, [r4, #0]
 80062ea:	1961      	adds	r1, r4, r5
 80062ec:	428b      	cmp	r3, r1
 80062ee:	bf01      	itttt	eq
 80062f0:	6819      	ldreq	r1, [r3, #0]
 80062f2:	685b      	ldreq	r3, [r3, #4]
 80062f4:	1949      	addeq	r1, r1, r5
 80062f6:	6021      	streq	r1, [r4, #0]
 80062f8:	e7ed      	b.n	80062d6 <_free_r+0x22>
 80062fa:	461a      	mov	r2, r3
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b10b      	cbz	r3, 8006304 <_free_r+0x50>
 8006300:	42a3      	cmp	r3, r4
 8006302:	d9fa      	bls.n	80062fa <_free_r+0x46>
 8006304:	6811      	ldr	r1, [r2, #0]
 8006306:	1855      	adds	r5, r2, r1
 8006308:	42a5      	cmp	r5, r4
 800630a:	d10b      	bne.n	8006324 <_free_r+0x70>
 800630c:	6824      	ldr	r4, [r4, #0]
 800630e:	4421      	add	r1, r4
 8006310:	1854      	adds	r4, r2, r1
 8006312:	42a3      	cmp	r3, r4
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	d1e0      	bne.n	80062da <_free_r+0x26>
 8006318:	681c      	ldr	r4, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	6053      	str	r3, [r2, #4]
 800631e:	4421      	add	r1, r4
 8006320:	6011      	str	r1, [r2, #0]
 8006322:	e7da      	b.n	80062da <_free_r+0x26>
 8006324:	d902      	bls.n	800632c <_free_r+0x78>
 8006326:	230c      	movs	r3, #12
 8006328:	6003      	str	r3, [r0, #0]
 800632a:	e7d6      	b.n	80062da <_free_r+0x26>
 800632c:	6825      	ldr	r5, [r4, #0]
 800632e:	1961      	adds	r1, r4, r5
 8006330:	428b      	cmp	r3, r1
 8006332:	bf04      	itt	eq
 8006334:	6819      	ldreq	r1, [r3, #0]
 8006336:	685b      	ldreq	r3, [r3, #4]
 8006338:	6063      	str	r3, [r4, #4]
 800633a:	bf04      	itt	eq
 800633c:	1949      	addeq	r1, r1, r5
 800633e:	6021      	streq	r1, [r4, #0]
 8006340:	6054      	str	r4, [r2, #4]
 8006342:	e7ca      	b.n	80062da <_free_r+0x26>
 8006344:	b003      	add	sp, #12
 8006346:	bd30      	pop	{r4, r5, pc}
 8006348:	20000308 	.word	0x20000308

0800634c <sbrk_aligned>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4e0e      	ldr	r6, [pc, #56]	; (8006388 <sbrk_aligned+0x3c>)
 8006350:	460c      	mov	r4, r1
 8006352:	6831      	ldr	r1, [r6, #0]
 8006354:	4605      	mov	r5, r0
 8006356:	b911      	cbnz	r1, 800635e <sbrk_aligned+0x12>
 8006358:	f000 f88c 	bl	8006474 <_sbrk_r>
 800635c:	6030      	str	r0, [r6, #0]
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 f887 	bl	8006474 <_sbrk_r>
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	d00a      	beq.n	8006380 <sbrk_aligned+0x34>
 800636a:	1cc4      	adds	r4, r0, #3
 800636c:	f024 0403 	bic.w	r4, r4, #3
 8006370:	42a0      	cmp	r0, r4
 8006372:	d007      	beq.n	8006384 <sbrk_aligned+0x38>
 8006374:	1a21      	subs	r1, r4, r0
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f87c 	bl	8006474 <_sbrk_r>
 800637c:	3001      	adds	r0, #1
 800637e:	d101      	bne.n	8006384 <sbrk_aligned+0x38>
 8006380:	f04f 34ff 	mov.w	r4, #4294967295
 8006384:	4620      	mov	r0, r4
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	2000030c 	.word	0x2000030c

0800638c <_malloc_r>:
 800638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006390:	1ccd      	adds	r5, r1, #3
 8006392:	f025 0503 	bic.w	r5, r5, #3
 8006396:	3508      	adds	r5, #8
 8006398:	2d0c      	cmp	r5, #12
 800639a:	bf38      	it	cc
 800639c:	250c      	movcc	r5, #12
 800639e:	2d00      	cmp	r5, #0
 80063a0:	4607      	mov	r7, r0
 80063a2:	db01      	blt.n	80063a8 <_malloc_r+0x1c>
 80063a4:	42a9      	cmp	r1, r5
 80063a6:	d905      	bls.n	80063b4 <_malloc_r+0x28>
 80063a8:	230c      	movs	r3, #12
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	2600      	movs	r6, #0
 80063ae:	4630      	mov	r0, r6
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	4e2e      	ldr	r6, [pc, #184]	; (8006470 <_malloc_r+0xe4>)
 80063b6:	f000 f8af 	bl	8006518 <__malloc_lock>
 80063ba:	6833      	ldr	r3, [r6, #0]
 80063bc:	461c      	mov	r4, r3
 80063be:	bb34      	cbnz	r4, 800640e <_malloc_r+0x82>
 80063c0:	4629      	mov	r1, r5
 80063c2:	4638      	mov	r0, r7
 80063c4:	f7ff ffc2 	bl	800634c <sbrk_aligned>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	4604      	mov	r4, r0
 80063cc:	d14d      	bne.n	800646a <_malloc_r+0xde>
 80063ce:	6834      	ldr	r4, [r6, #0]
 80063d0:	4626      	mov	r6, r4
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	d140      	bne.n	8006458 <_malloc_r+0xcc>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	4631      	mov	r1, r6
 80063da:	4638      	mov	r0, r7
 80063dc:	eb04 0803 	add.w	r8, r4, r3
 80063e0:	f000 f848 	bl	8006474 <_sbrk_r>
 80063e4:	4580      	cmp	r8, r0
 80063e6:	d13a      	bne.n	800645e <_malloc_r+0xd2>
 80063e8:	6821      	ldr	r1, [r4, #0]
 80063ea:	3503      	adds	r5, #3
 80063ec:	1a6d      	subs	r5, r5, r1
 80063ee:	f025 0503 	bic.w	r5, r5, #3
 80063f2:	3508      	adds	r5, #8
 80063f4:	2d0c      	cmp	r5, #12
 80063f6:	bf38      	it	cc
 80063f8:	250c      	movcc	r5, #12
 80063fa:	4629      	mov	r1, r5
 80063fc:	4638      	mov	r0, r7
 80063fe:	f7ff ffa5 	bl	800634c <sbrk_aligned>
 8006402:	3001      	adds	r0, #1
 8006404:	d02b      	beq.n	800645e <_malloc_r+0xd2>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	442b      	add	r3, r5
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	e00e      	b.n	800642c <_malloc_r+0xa0>
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	1b52      	subs	r2, r2, r5
 8006412:	d41e      	bmi.n	8006452 <_malloc_r+0xc6>
 8006414:	2a0b      	cmp	r2, #11
 8006416:	d916      	bls.n	8006446 <_malloc_r+0xba>
 8006418:	1961      	adds	r1, r4, r5
 800641a:	42a3      	cmp	r3, r4
 800641c:	6025      	str	r5, [r4, #0]
 800641e:	bf18      	it	ne
 8006420:	6059      	strne	r1, [r3, #4]
 8006422:	6863      	ldr	r3, [r4, #4]
 8006424:	bf08      	it	eq
 8006426:	6031      	streq	r1, [r6, #0]
 8006428:	5162      	str	r2, [r4, r5]
 800642a:	604b      	str	r3, [r1, #4]
 800642c:	4638      	mov	r0, r7
 800642e:	f104 060b 	add.w	r6, r4, #11
 8006432:	f000 f877 	bl	8006524 <__malloc_unlock>
 8006436:	f026 0607 	bic.w	r6, r6, #7
 800643a:	1d23      	adds	r3, r4, #4
 800643c:	1af2      	subs	r2, r6, r3
 800643e:	d0b6      	beq.n	80063ae <_malloc_r+0x22>
 8006440:	1b9b      	subs	r3, r3, r6
 8006442:	50a3      	str	r3, [r4, r2]
 8006444:	e7b3      	b.n	80063ae <_malloc_r+0x22>
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	42a3      	cmp	r3, r4
 800644a:	bf0c      	ite	eq
 800644c:	6032      	streq	r2, [r6, #0]
 800644e:	605a      	strne	r2, [r3, #4]
 8006450:	e7ec      	b.n	800642c <_malloc_r+0xa0>
 8006452:	4623      	mov	r3, r4
 8006454:	6864      	ldr	r4, [r4, #4]
 8006456:	e7b2      	b.n	80063be <_malloc_r+0x32>
 8006458:	4634      	mov	r4, r6
 800645a:	6876      	ldr	r6, [r6, #4]
 800645c:	e7b9      	b.n	80063d2 <_malloc_r+0x46>
 800645e:	230c      	movs	r3, #12
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	4638      	mov	r0, r7
 8006464:	f000 f85e 	bl	8006524 <__malloc_unlock>
 8006468:	e7a1      	b.n	80063ae <_malloc_r+0x22>
 800646a:	6025      	str	r5, [r4, #0]
 800646c:	e7de      	b.n	800642c <_malloc_r+0xa0>
 800646e:	bf00      	nop
 8006470:	20000308 	.word	0x20000308

08006474 <_sbrk_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d06      	ldr	r5, [pc, #24]	; (8006490 <_sbrk_r+0x1c>)
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	f7fa ffda 	bl	8001438 <_sbrk>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_sbrk_r+0x1a>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_sbrk_r+0x1a>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	20000310 	.word	0x20000310

08006494 <__assert_func>:
 8006494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006496:	4614      	mov	r4, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <__assert_func+0x2c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4605      	mov	r5, r0
 80064a0:	68d8      	ldr	r0, [r3, #12]
 80064a2:	b14c      	cbz	r4, 80064b8 <__assert_func+0x24>
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <__assert_func+0x30>)
 80064a6:	9100      	str	r1, [sp, #0]
 80064a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064ac:	4906      	ldr	r1, [pc, #24]	; (80064c8 <__assert_func+0x34>)
 80064ae:	462b      	mov	r3, r5
 80064b0:	f000 f80e 	bl	80064d0 <fiprintf>
 80064b4:	f000 fa64 	bl	8006980 <abort>
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <__assert_func+0x38>)
 80064ba:	461c      	mov	r4, r3
 80064bc:	e7f3      	b.n	80064a6 <__assert_func+0x12>
 80064be:	bf00      	nop
 80064c0:	2000000c 	.word	0x2000000c
 80064c4:	08007234 	.word	0x08007234
 80064c8:	08007241 	.word	0x08007241
 80064cc:	0800726f 	.word	0x0800726f

080064d0 <fiprintf>:
 80064d0:	b40e      	push	{r1, r2, r3}
 80064d2:	b503      	push	{r0, r1, lr}
 80064d4:	4601      	mov	r1, r0
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	4805      	ldr	r0, [pc, #20]	; (80064f0 <fiprintf+0x20>)
 80064da:	f853 2b04 	ldr.w	r2, [r3], #4
 80064de:	6800      	ldr	r0, [r0, #0]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f000 f84f 	bl	8006584 <_vfiprintf_r>
 80064e6:	b002      	add	sp, #8
 80064e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ec:	b003      	add	sp, #12
 80064ee:	4770      	bx	lr
 80064f0:	2000000c 	.word	0x2000000c

080064f4 <__ascii_mbtowc>:
 80064f4:	b082      	sub	sp, #8
 80064f6:	b901      	cbnz	r1, 80064fa <__ascii_mbtowc+0x6>
 80064f8:	a901      	add	r1, sp, #4
 80064fa:	b142      	cbz	r2, 800650e <__ascii_mbtowc+0x1a>
 80064fc:	b14b      	cbz	r3, 8006512 <__ascii_mbtowc+0x1e>
 80064fe:	7813      	ldrb	r3, [r2, #0]
 8006500:	600b      	str	r3, [r1, #0]
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	1e10      	subs	r0, r2, #0
 8006506:	bf18      	it	ne
 8006508:	2001      	movne	r0, #1
 800650a:	b002      	add	sp, #8
 800650c:	4770      	bx	lr
 800650e:	4610      	mov	r0, r2
 8006510:	e7fb      	b.n	800650a <__ascii_mbtowc+0x16>
 8006512:	f06f 0001 	mvn.w	r0, #1
 8006516:	e7f8      	b.n	800650a <__ascii_mbtowc+0x16>

08006518 <__malloc_lock>:
 8006518:	4801      	ldr	r0, [pc, #4]	; (8006520 <__malloc_lock+0x8>)
 800651a:	f000 bbf1 	b.w	8006d00 <__retarget_lock_acquire_recursive>
 800651e:	bf00      	nop
 8006520:	20000314 	.word	0x20000314

08006524 <__malloc_unlock>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__malloc_unlock+0x8>)
 8006526:	f000 bbec 	b.w	8006d02 <__retarget_lock_release_recursive>
 800652a:	bf00      	nop
 800652c:	20000314 	.word	0x20000314

08006530 <__sfputc_r>:
 8006530:	6893      	ldr	r3, [r2, #8]
 8006532:	3b01      	subs	r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	b410      	push	{r4}
 8006538:	6093      	str	r3, [r2, #8]
 800653a:	da08      	bge.n	800654e <__sfputc_r+0x1e>
 800653c:	6994      	ldr	r4, [r2, #24]
 800653e:	42a3      	cmp	r3, r4
 8006540:	db01      	blt.n	8006546 <__sfputc_r+0x16>
 8006542:	290a      	cmp	r1, #10
 8006544:	d103      	bne.n	800654e <__sfputc_r+0x1e>
 8006546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800654a:	f000 b94b 	b.w	80067e4 <__swbuf_r>
 800654e:	6813      	ldr	r3, [r2, #0]
 8006550:	1c58      	adds	r0, r3, #1
 8006552:	6010      	str	r0, [r2, #0]
 8006554:	7019      	strb	r1, [r3, #0]
 8006556:	4608      	mov	r0, r1
 8006558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800655c:	4770      	bx	lr

0800655e <__sfputs_r>:
 800655e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006560:	4606      	mov	r6, r0
 8006562:	460f      	mov	r7, r1
 8006564:	4614      	mov	r4, r2
 8006566:	18d5      	adds	r5, r2, r3
 8006568:	42ac      	cmp	r4, r5
 800656a:	d101      	bne.n	8006570 <__sfputs_r+0x12>
 800656c:	2000      	movs	r0, #0
 800656e:	e007      	b.n	8006580 <__sfputs_r+0x22>
 8006570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006574:	463a      	mov	r2, r7
 8006576:	4630      	mov	r0, r6
 8006578:	f7ff ffda 	bl	8006530 <__sfputc_r>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d1f3      	bne.n	8006568 <__sfputs_r+0xa>
 8006580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006584 <_vfiprintf_r>:
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	460d      	mov	r5, r1
 800658a:	b09d      	sub	sp, #116	; 0x74
 800658c:	4614      	mov	r4, r2
 800658e:	4698      	mov	r8, r3
 8006590:	4606      	mov	r6, r0
 8006592:	b118      	cbz	r0, 800659c <_vfiprintf_r+0x18>
 8006594:	6983      	ldr	r3, [r0, #24]
 8006596:	b90b      	cbnz	r3, 800659c <_vfiprintf_r+0x18>
 8006598:	f000 fb14 	bl	8006bc4 <__sinit>
 800659c:	4b89      	ldr	r3, [pc, #548]	; (80067c4 <_vfiprintf_r+0x240>)
 800659e:	429d      	cmp	r5, r3
 80065a0:	d11b      	bne.n	80065da <_vfiprintf_r+0x56>
 80065a2:	6875      	ldr	r5, [r6, #4]
 80065a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065a6:	07d9      	lsls	r1, r3, #31
 80065a8:	d405      	bmi.n	80065b6 <_vfiprintf_r+0x32>
 80065aa:	89ab      	ldrh	r3, [r5, #12]
 80065ac:	059a      	lsls	r2, r3, #22
 80065ae:	d402      	bmi.n	80065b6 <_vfiprintf_r+0x32>
 80065b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065b2:	f000 fba5 	bl	8006d00 <__retarget_lock_acquire_recursive>
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	071b      	lsls	r3, r3, #28
 80065ba:	d501      	bpl.n	80065c0 <_vfiprintf_r+0x3c>
 80065bc:	692b      	ldr	r3, [r5, #16]
 80065be:	b9eb      	cbnz	r3, 80065fc <_vfiprintf_r+0x78>
 80065c0:	4629      	mov	r1, r5
 80065c2:	4630      	mov	r0, r6
 80065c4:	f000 f96e 	bl	80068a4 <__swsetup_r>
 80065c8:	b1c0      	cbz	r0, 80065fc <_vfiprintf_r+0x78>
 80065ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065cc:	07dc      	lsls	r4, r3, #31
 80065ce:	d50e      	bpl.n	80065ee <_vfiprintf_r+0x6a>
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
 80065d4:	b01d      	add	sp, #116	; 0x74
 80065d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065da:	4b7b      	ldr	r3, [pc, #492]	; (80067c8 <_vfiprintf_r+0x244>)
 80065dc:	429d      	cmp	r5, r3
 80065de:	d101      	bne.n	80065e4 <_vfiprintf_r+0x60>
 80065e0:	68b5      	ldr	r5, [r6, #8]
 80065e2:	e7df      	b.n	80065a4 <_vfiprintf_r+0x20>
 80065e4:	4b79      	ldr	r3, [pc, #484]	; (80067cc <_vfiprintf_r+0x248>)
 80065e6:	429d      	cmp	r5, r3
 80065e8:	bf08      	it	eq
 80065ea:	68f5      	ldreq	r5, [r6, #12]
 80065ec:	e7da      	b.n	80065a4 <_vfiprintf_r+0x20>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	0598      	lsls	r0, r3, #22
 80065f2:	d4ed      	bmi.n	80065d0 <_vfiprintf_r+0x4c>
 80065f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f6:	f000 fb84 	bl	8006d02 <__retarget_lock_release_recursive>
 80065fa:	e7e9      	b.n	80065d0 <_vfiprintf_r+0x4c>
 80065fc:	2300      	movs	r3, #0
 80065fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006600:	2320      	movs	r3, #32
 8006602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006606:	f8cd 800c 	str.w	r8, [sp, #12]
 800660a:	2330      	movs	r3, #48	; 0x30
 800660c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80067d0 <_vfiprintf_r+0x24c>
 8006610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006614:	f04f 0901 	mov.w	r9, #1
 8006618:	4623      	mov	r3, r4
 800661a:	469a      	mov	sl, r3
 800661c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006620:	b10a      	cbz	r2, 8006626 <_vfiprintf_r+0xa2>
 8006622:	2a25      	cmp	r2, #37	; 0x25
 8006624:	d1f9      	bne.n	800661a <_vfiprintf_r+0x96>
 8006626:	ebba 0b04 	subs.w	fp, sl, r4
 800662a:	d00b      	beq.n	8006644 <_vfiprintf_r+0xc0>
 800662c:	465b      	mov	r3, fp
 800662e:	4622      	mov	r2, r4
 8006630:	4629      	mov	r1, r5
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ff93 	bl	800655e <__sfputs_r>
 8006638:	3001      	adds	r0, #1
 800663a:	f000 80aa 	beq.w	8006792 <_vfiprintf_r+0x20e>
 800663e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006640:	445a      	add	r2, fp
 8006642:	9209      	str	r2, [sp, #36]	; 0x24
 8006644:	f89a 3000 	ldrb.w	r3, [sl]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80a2 	beq.w	8006792 <_vfiprintf_r+0x20e>
 800664e:	2300      	movs	r3, #0
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006658:	f10a 0a01 	add.w	sl, sl, #1
 800665c:	9304      	str	r3, [sp, #16]
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006664:	931a      	str	r3, [sp, #104]	; 0x68
 8006666:	4654      	mov	r4, sl
 8006668:	2205      	movs	r2, #5
 800666a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666e:	4858      	ldr	r0, [pc, #352]	; (80067d0 <_vfiprintf_r+0x24c>)
 8006670:	f7f9 fdb6 	bl	80001e0 <memchr>
 8006674:	9a04      	ldr	r2, [sp, #16]
 8006676:	b9d8      	cbnz	r0, 80066b0 <_vfiprintf_r+0x12c>
 8006678:	06d1      	lsls	r1, r2, #27
 800667a:	bf44      	itt	mi
 800667c:	2320      	movmi	r3, #32
 800667e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006682:	0713      	lsls	r3, r2, #28
 8006684:	bf44      	itt	mi
 8006686:	232b      	movmi	r3, #43	; 0x2b
 8006688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668c:	f89a 3000 	ldrb.w	r3, [sl]
 8006690:	2b2a      	cmp	r3, #42	; 0x2a
 8006692:	d015      	beq.n	80066c0 <_vfiprintf_r+0x13c>
 8006694:	9a07      	ldr	r2, [sp, #28]
 8006696:	4654      	mov	r4, sl
 8006698:	2000      	movs	r0, #0
 800669a:	f04f 0c0a 	mov.w	ip, #10
 800669e:	4621      	mov	r1, r4
 80066a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a4:	3b30      	subs	r3, #48	; 0x30
 80066a6:	2b09      	cmp	r3, #9
 80066a8:	d94e      	bls.n	8006748 <_vfiprintf_r+0x1c4>
 80066aa:	b1b0      	cbz	r0, 80066da <_vfiprintf_r+0x156>
 80066ac:	9207      	str	r2, [sp, #28]
 80066ae:	e014      	b.n	80066da <_vfiprintf_r+0x156>
 80066b0:	eba0 0308 	sub.w	r3, r0, r8
 80066b4:	fa09 f303 	lsl.w	r3, r9, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	46a2      	mov	sl, r4
 80066be:	e7d2      	b.n	8006666 <_vfiprintf_r+0xe2>
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	1d19      	adds	r1, r3, #4
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	9103      	str	r1, [sp, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	bfbb      	ittet	lt
 80066cc:	425b      	neglt	r3, r3
 80066ce:	f042 0202 	orrlt.w	r2, r2, #2
 80066d2:	9307      	strge	r3, [sp, #28]
 80066d4:	9307      	strlt	r3, [sp, #28]
 80066d6:	bfb8      	it	lt
 80066d8:	9204      	strlt	r2, [sp, #16]
 80066da:	7823      	ldrb	r3, [r4, #0]
 80066dc:	2b2e      	cmp	r3, #46	; 0x2e
 80066de:	d10c      	bne.n	80066fa <_vfiprintf_r+0x176>
 80066e0:	7863      	ldrb	r3, [r4, #1]
 80066e2:	2b2a      	cmp	r3, #42	; 0x2a
 80066e4:	d135      	bne.n	8006752 <_vfiprintf_r+0x1ce>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	9203      	str	r2, [sp, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bfb8      	it	lt
 80066f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f6:	3402      	adds	r4, #2
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80067e0 <_vfiprintf_r+0x25c>
 80066fe:	7821      	ldrb	r1, [r4, #0]
 8006700:	2203      	movs	r2, #3
 8006702:	4650      	mov	r0, sl
 8006704:	f7f9 fd6c 	bl	80001e0 <memchr>
 8006708:	b140      	cbz	r0, 800671c <_vfiprintf_r+0x198>
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	eba0 000a 	sub.w	r0, r0, sl
 8006710:	fa03 f000 	lsl.w	r0, r3, r0
 8006714:	9b04      	ldr	r3, [sp, #16]
 8006716:	4303      	orrs	r3, r0
 8006718:	3401      	adds	r4, #1
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006720:	482c      	ldr	r0, [pc, #176]	; (80067d4 <_vfiprintf_r+0x250>)
 8006722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006726:	2206      	movs	r2, #6
 8006728:	f7f9 fd5a 	bl	80001e0 <memchr>
 800672c:	2800      	cmp	r0, #0
 800672e:	d03f      	beq.n	80067b0 <_vfiprintf_r+0x22c>
 8006730:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <_vfiprintf_r+0x254>)
 8006732:	bb1b      	cbnz	r3, 800677c <_vfiprintf_r+0x1f8>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	3307      	adds	r3, #7
 8006738:	f023 0307 	bic.w	r3, r3, #7
 800673c:	3308      	adds	r3, #8
 800673e:	9303      	str	r3, [sp, #12]
 8006740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006742:	443b      	add	r3, r7
 8006744:	9309      	str	r3, [sp, #36]	; 0x24
 8006746:	e767      	b.n	8006618 <_vfiprintf_r+0x94>
 8006748:	fb0c 3202 	mla	r2, ip, r2, r3
 800674c:	460c      	mov	r4, r1
 800674e:	2001      	movs	r0, #1
 8006750:	e7a5      	b.n	800669e <_vfiprintf_r+0x11a>
 8006752:	2300      	movs	r3, #0
 8006754:	3401      	adds	r4, #1
 8006756:	9305      	str	r3, [sp, #20]
 8006758:	4619      	mov	r1, r3
 800675a:	f04f 0c0a 	mov.w	ip, #10
 800675e:	4620      	mov	r0, r4
 8006760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006764:	3a30      	subs	r2, #48	; 0x30
 8006766:	2a09      	cmp	r2, #9
 8006768:	d903      	bls.n	8006772 <_vfiprintf_r+0x1ee>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0c5      	beq.n	80066fa <_vfiprintf_r+0x176>
 800676e:	9105      	str	r1, [sp, #20]
 8006770:	e7c3      	b.n	80066fa <_vfiprintf_r+0x176>
 8006772:	fb0c 2101 	mla	r1, ip, r1, r2
 8006776:	4604      	mov	r4, r0
 8006778:	2301      	movs	r3, #1
 800677a:	e7f0      	b.n	800675e <_vfiprintf_r+0x1da>
 800677c:	ab03      	add	r3, sp, #12
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	462a      	mov	r2, r5
 8006782:	4b16      	ldr	r3, [pc, #88]	; (80067dc <_vfiprintf_r+0x258>)
 8006784:	a904      	add	r1, sp, #16
 8006786:	4630      	mov	r0, r6
 8006788:	f7fd ff9c 	bl	80046c4 <_printf_float>
 800678c:	4607      	mov	r7, r0
 800678e:	1c78      	adds	r0, r7, #1
 8006790:	d1d6      	bne.n	8006740 <_vfiprintf_r+0x1bc>
 8006792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006794:	07d9      	lsls	r1, r3, #31
 8006796:	d405      	bmi.n	80067a4 <_vfiprintf_r+0x220>
 8006798:	89ab      	ldrh	r3, [r5, #12]
 800679a:	059a      	lsls	r2, r3, #22
 800679c:	d402      	bmi.n	80067a4 <_vfiprintf_r+0x220>
 800679e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067a0:	f000 faaf 	bl	8006d02 <__retarget_lock_release_recursive>
 80067a4:	89ab      	ldrh	r3, [r5, #12]
 80067a6:	065b      	lsls	r3, r3, #25
 80067a8:	f53f af12 	bmi.w	80065d0 <_vfiprintf_r+0x4c>
 80067ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ae:	e711      	b.n	80065d4 <_vfiprintf_r+0x50>
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	462a      	mov	r2, r5
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <_vfiprintf_r+0x258>)
 80067b8:	a904      	add	r1, sp, #16
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7fe fa26 	bl	8004c0c <_printf_i>
 80067c0:	e7e4      	b.n	800678c <_vfiprintf_r+0x208>
 80067c2:	bf00      	nop
 80067c4:	080073ac 	.word	0x080073ac
 80067c8:	080073cc 	.word	0x080073cc
 80067cc:	0800738c 	.word	0x0800738c
 80067d0:	0800727a 	.word	0x0800727a
 80067d4:	08007284 	.word	0x08007284
 80067d8:	080046c5 	.word	0x080046c5
 80067dc:	0800655f 	.word	0x0800655f
 80067e0:	08007280 	.word	0x08007280

080067e4 <__swbuf_r>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	460e      	mov	r6, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	4605      	mov	r5, r0
 80067ec:	b118      	cbz	r0, 80067f6 <__swbuf_r+0x12>
 80067ee:	6983      	ldr	r3, [r0, #24]
 80067f0:	b90b      	cbnz	r3, 80067f6 <__swbuf_r+0x12>
 80067f2:	f000 f9e7 	bl	8006bc4 <__sinit>
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <__swbuf_r+0x98>)
 80067f8:	429c      	cmp	r4, r3
 80067fa:	d12b      	bne.n	8006854 <__swbuf_r+0x70>
 80067fc:	686c      	ldr	r4, [r5, #4]
 80067fe:	69a3      	ldr	r3, [r4, #24]
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	071a      	lsls	r2, r3, #28
 8006806:	d52f      	bpl.n	8006868 <__swbuf_r+0x84>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	b36b      	cbz	r3, 8006868 <__swbuf_r+0x84>
 800680c:	6923      	ldr	r3, [r4, #16]
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1ac0      	subs	r0, r0, r3
 8006812:	6963      	ldr	r3, [r4, #20]
 8006814:	b2f6      	uxtb	r6, r6
 8006816:	4283      	cmp	r3, r0
 8006818:	4637      	mov	r7, r6
 800681a:	dc04      	bgt.n	8006826 <__swbuf_r+0x42>
 800681c:	4621      	mov	r1, r4
 800681e:	4628      	mov	r0, r5
 8006820:	f000 f93c 	bl	8006a9c <_fflush_r>
 8006824:	bb30      	cbnz	r0, 8006874 <__swbuf_r+0x90>
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	3b01      	subs	r3, #1
 800682a:	60a3      	str	r3, [r4, #8]
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	701e      	strb	r6, [r3, #0]
 8006834:	6963      	ldr	r3, [r4, #20]
 8006836:	3001      	adds	r0, #1
 8006838:	4283      	cmp	r3, r0
 800683a:	d004      	beq.n	8006846 <__swbuf_r+0x62>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	07db      	lsls	r3, r3, #31
 8006840:	d506      	bpl.n	8006850 <__swbuf_r+0x6c>
 8006842:	2e0a      	cmp	r6, #10
 8006844:	d104      	bne.n	8006850 <__swbuf_r+0x6c>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	f000 f927 	bl	8006a9c <_fflush_r>
 800684e:	b988      	cbnz	r0, 8006874 <__swbuf_r+0x90>
 8006850:	4638      	mov	r0, r7
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <__swbuf_r+0x9c>)
 8006856:	429c      	cmp	r4, r3
 8006858:	d101      	bne.n	800685e <__swbuf_r+0x7a>
 800685a:	68ac      	ldr	r4, [r5, #8]
 800685c:	e7cf      	b.n	80067fe <__swbuf_r+0x1a>
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <__swbuf_r+0xa0>)
 8006860:	429c      	cmp	r4, r3
 8006862:	bf08      	it	eq
 8006864:	68ec      	ldreq	r4, [r5, #12]
 8006866:	e7ca      	b.n	80067fe <__swbuf_r+0x1a>
 8006868:	4621      	mov	r1, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 f81a 	bl	80068a4 <__swsetup_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	d0cb      	beq.n	800680c <__swbuf_r+0x28>
 8006874:	f04f 37ff 	mov.w	r7, #4294967295
 8006878:	e7ea      	b.n	8006850 <__swbuf_r+0x6c>
 800687a:	bf00      	nop
 800687c:	080073ac 	.word	0x080073ac
 8006880:	080073cc 	.word	0x080073cc
 8006884:	0800738c 	.word	0x0800738c

08006888 <__ascii_wctomb>:
 8006888:	b149      	cbz	r1, 800689e <__ascii_wctomb+0x16>
 800688a:	2aff      	cmp	r2, #255	; 0xff
 800688c:	bf85      	ittet	hi
 800688e:	238a      	movhi	r3, #138	; 0x8a
 8006890:	6003      	strhi	r3, [r0, #0]
 8006892:	700a      	strbls	r2, [r1, #0]
 8006894:	f04f 30ff 	movhi.w	r0, #4294967295
 8006898:	bf98      	it	ls
 800689a:	2001      	movls	r0, #1
 800689c:	4770      	bx	lr
 800689e:	4608      	mov	r0, r1
 80068a0:	4770      	bx	lr
	...

080068a4 <__swsetup_r>:
 80068a4:	4b32      	ldr	r3, [pc, #200]	; (8006970 <__swsetup_r+0xcc>)
 80068a6:	b570      	push	{r4, r5, r6, lr}
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	4606      	mov	r6, r0
 80068ac:	460c      	mov	r4, r1
 80068ae:	b125      	cbz	r5, 80068ba <__swsetup_r+0x16>
 80068b0:	69ab      	ldr	r3, [r5, #24]
 80068b2:	b913      	cbnz	r3, 80068ba <__swsetup_r+0x16>
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f985 	bl	8006bc4 <__sinit>
 80068ba:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <__swsetup_r+0xd0>)
 80068bc:	429c      	cmp	r4, r3
 80068be:	d10f      	bne.n	80068e0 <__swsetup_r+0x3c>
 80068c0:	686c      	ldr	r4, [r5, #4]
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c8:	0719      	lsls	r1, r3, #28
 80068ca:	d42c      	bmi.n	8006926 <__swsetup_r+0x82>
 80068cc:	06dd      	lsls	r5, r3, #27
 80068ce:	d411      	bmi.n	80068f4 <__swsetup_r+0x50>
 80068d0:	2309      	movs	r3, #9
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	e03e      	b.n	800695e <__swsetup_r+0xba>
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <__swsetup_r+0xd4>)
 80068e2:	429c      	cmp	r4, r3
 80068e4:	d101      	bne.n	80068ea <__swsetup_r+0x46>
 80068e6:	68ac      	ldr	r4, [r5, #8]
 80068e8:	e7eb      	b.n	80068c2 <__swsetup_r+0x1e>
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <__swsetup_r+0xd8>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	bf08      	it	eq
 80068f0:	68ec      	ldreq	r4, [r5, #12]
 80068f2:	e7e6      	b.n	80068c2 <__swsetup_r+0x1e>
 80068f4:	0758      	lsls	r0, r3, #29
 80068f6:	d512      	bpl.n	800691e <__swsetup_r+0x7a>
 80068f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fa:	b141      	cbz	r1, 800690e <__swsetup_r+0x6a>
 80068fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006900:	4299      	cmp	r1, r3
 8006902:	d002      	beq.n	800690a <__swsetup_r+0x66>
 8006904:	4630      	mov	r0, r6
 8006906:	f7ff fcd5 	bl	80062b4 <_free_r>
 800690a:	2300      	movs	r3, #0
 800690c:	6363      	str	r3, [r4, #52]	; 0x34
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	2300      	movs	r3, #0
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f043 0308 	orr.w	r3, r3, #8
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	b94b      	cbnz	r3, 800693e <__swsetup_r+0x9a>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006934:	d003      	beq.n	800693e <__swsetup_r+0x9a>
 8006936:	4621      	mov	r1, r4
 8006938:	4630      	mov	r0, r6
 800693a:	f000 fa09 	bl	8006d50 <__smakebuf_r>
 800693e:	89a0      	ldrh	r0, [r4, #12]
 8006940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006944:	f010 0301 	ands.w	r3, r0, #1
 8006948:	d00a      	beq.n	8006960 <__swsetup_r+0xbc>
 800694a:	2300      	movs	r3, #0
 800694c:	60a3      	str	r3, [r4, #8]
 800694e:	6963      	ldr	r3, [r4, #20]
 8006950:	425b      	negs	r3, r3
 8006952:	61a3      	str	r3, [r4, #24]
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	b943      	cbnz	r3, 800696a <__swsetup_r+0xc6>
 8006958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800695c:	d1ba      	bne.n	80068d4 <__swsetup_r+0x30>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	0781      	lsls	r1, r0, #30
 8006962:	bf58      	it	pl
 8006964:	6963      	ldrpl	r3, [r4, #20]
 8006966:	60a3      	str	r3, [r4, #8]
 8006968:	e7f4      	b.n	8006954 <__swsetup_r+0xb0>
 800696a:	2000      	movs	r0, #0
 800696c:	e7f7      	b.n	800695e <__swsetup_r+0xba>
 800696e:	bf00      	nop
 8006970:	2000000c 	.word	0x2000000c
 8006974:	080073ac 	.word	0x080073ac
 8006978:	080073cc 	.word	0x080073cc
 800697c:	0800738c 	.word	0x0800738c

08006980 <abort>:
 8006980:	b508      	push	{r3, lr}
 8006982:	2006      	movs	r0, #6
 8006984:	f000 fa4c 	bl	8006e20 <raise>
 8006988:	2001      	movs	r0, #1
 800698a:	f7fa fcdd 	bl	8001348 <_exit>
	...

08006990 <__sflush_r>:
 8006990:	898a      	ldrh	r2, [r1, #12]
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	4605      	mov	r5, r0
 8006998:	0710      	lsls	r0, r2, #28
 800699a:	460c      	mov	r4, r1
 800699c:	d458      	bmi.n	8006a50 <__sflush_r+0xc0>
 800699e:	684b      	ldr	r3, [r1, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dc05      	bgt.n	80069b0 <__sflush_r+0x20>
 80069a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dc02      	bgt.n	80069b0 <__sflush_r+0x20>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	d0f9      	beq.n	80069aa <__sflush_r+0x1a>
 80069b6:	2300      	movs	r3, #0
 80069b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069bc:	682f      	ldr	r7, [r5, #0]
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	d032      	beq.n	8006a28 <__sflush_r+0x98>
 80069c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	075a      	lsls	r2, r3, #29
 80069c8:	d505      	bpl.n	80069d6 <__sflush_r+0x46>
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	1ac0      	subs	r0, r0, r3
 80069ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069d0:	b10b      	cbz	r3, 80069d6 <__sflush_r+0x46>
 80069d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069d4:	1ac0      	subs	r0, r0, r3
 80069d6:	2300      	movs	r3, #0
 80069d8:	4602      	mov	r2, r0
 80069da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069dc:	6a21      	ldr	r1, [r4, #32]
 80069de:	4628      	mov	r0, r5
 80069e0:	47b0      	blx	r6
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	d106      	bne.n	80069f6 <__sflush_r+0x66>
 80069e8:	6829      	ldr	r1, [r5, #0]
 80069ea:	291d      	cmp	r1, #29
 80069ec:	d82c      	bhi.n	8006a48 <__sflush_r+0xb8>
 80069ee:	4a2a      	ldr	r2, [pc, #168]	; (8006a98 <__sflush_r+0x108>)
 80069f0:	40ca      	lsrs	r2, r1
 80069f2:	07d6      	lsls	r6, r2, #31
 80069f4:	d528      	bpl.n	8006a48 <__sflush_r+0xb8>
 80069f6:	2200      	movs	r2, #0
 80069f8:	6062      	str	r2, [r4, #4]
 80069fa:	04d9      	lsls	r1, r3, #19
 80069fc:	6922      	ldr	r2, [r4, #16]
 80069fe:	6022      	str	r2, [r4, #0]
 8006a00:	d504      	bpl.n	8006a0c <__sflush_r+0x7c>
 8006a02:	1c42      	adds	r2, r0, #1
 8006a04:	d101      	bne.n	8006a0a <__sflush_r+0x7a>
 8006a06:	682b      	ldr	r3, [r5, #0]
 8006a08:	b903      	cbnz	r3, 8006a0c <__sflush_r+0x7c>
 8006a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a0e:	602f      	str	r7, [r5, #0]
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d0ca      	beq.n	80069aa <__sflush_r+0x1a>
 8006a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	d002      	beq.n	8006a22 <__sflush_r+0x92>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f7ff fc49 	bl	80062b4 <_free_r>
 8006a22:	2000      	movs	r0, #0
 8006a24:	6360      	str	r0, [r4, #52]	; 0x34
 8006a26:	e7c1      	b.n	80069ac <__sflush_r+0x1c>
 8006a28:	6a21      	ldr	r1, [r4, #32]
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b0      	blx	r6
 8006a30:	1c41      	adds	r1, r0, #1
 8006a32:	d1c7      	bne.n	80069c4 <__sflush_r+0x34>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0c4      	beq.n	80069c4 <__sflush_r+0x34>
 8006a3a:	2b1d      	cmp	r3, #29
 8006a3c:	d001      	beq.n	8006a42 <__sflush_r+0xb2>
 8006a3e:	2b16      	cmp	r3, #22
 8006a40:	d101      	bne.n	8006a46 <__sflush_r+0xb6>
 8006a42:	602f      	str	r7, [r5, #0]
 8006a44:	e7b1      	b.n	80069aa <__sflush_r+0x1a>
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	e7ad      	b.n	80069ac <__sflush_r+0x1c>
 8006a50:	690f      	ldr	r7, [r1, #16]
 8006a52:	2f00      	cmp	r7, #0
 8006a54:	d0a9      	beq.n	80069aa <__sflush_r+0x1a>
 8006a56:	0793      	lsls	r3, r2, #30
 8006a58:	680e      	ldr	r6, [r1, #0]
 8006a5a:	bf08      	it	eq
 8006a5c:	694b      	ldreq	r3, [r1, #20]
 8006a5e:	600f      	str	r7, [r1, #0]
 8006a60:	bf18      	it	ne
 8006a62:	2300      	movne	r3, #0
 8006a64:	eba6 0807 	sub.w	r8, r6, r7
 8006a68:	608b      	str	r3, [r1, #8]
 8006a6a:	f1b8 0f00 	cmp.w	r8, #0
 8006a6e:	dd9c      	ble.n	80069aa <__sflush_r+0x1a>
 8006a70:	6a21      	ldr	r1, [r4, #32]
 8006a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a74:	4643      	mov	r3, r8
 8006a76:	463a      	mov	r2, r7
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b0      	blx	r6
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	dc06      	bgt.n	8006a8e <__sflush_r+0xfe>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e78e      	b.n	80069ac <__sflush_r+0x1c>
 8006a8e:	4407      	add	r7, r0
 8006a90:	eba8 0800 	sub.w	r8, r8, r0
 8006a94:	e7e9      	b.n	8006a6a <__sflush_r+0xda>
 8006a96:	bf00      	nop
 8006a98:	20400001 	.word	0x20400001

08006a9c <_fflush_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b913      	cbnz	r3, 8006aac <_fflush_r+0x10>
 8006aa6:	2500      	movs	r5, #0
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	b118      	cbz	r0, 8006ab6 <_fflush_r+0x1a>
 8006aae:	6983      	ldr	r3, [r0, #24]
 8006ab0:	b90b      	cbnz	r3, 8006ab6 <_fflush_r+0x1a>
 8006ab2:	f000 f887 	bl	8006bc4 <__sinit>
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <_fflush_r+0x6c>)
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d11b      	bne.n	8006af4 <_fflush_r+0x58>
 8006abc:	686c      	ldr	r4, [r5, #4]
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0ef      	beq.n	8006aa6 <_fflush_r+0xa>
 8006ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ac8:	07d0      	lsls	r0, r2, #31
 8006aca:	d404      	bmi.n	8006ad6 <_fflush_r+0x3a>
 8006acc:	0599      	lsls	r1, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_fflush_r+0x3a>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad2:	f000 f915 	bl	8006d00 <__retarget_lock_acquire_recursive>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f7ff ff59 	bl	8006990 <__sflush_r>
 8006ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae0:	07da      	lsls	r2, r3, #31
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	d4e0      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	059b      	lsls	r3, r3, #22
 8006aea:	d4dd      	bmi.n	8006aa8 <_fflush_r+0xc>
 8006aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aee:	f000 f908 	bl	8006d02 <__retarget_lock_release_recursive>
 8006af2:	e7d9      	b.n	8006aa8 <_fflush_r+0xc>
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <_fflush_r+0x70>)
 8006af6:	429c      	cmp	r4, r3
 8006af8:	d101      	bne.n	8006afe <_fflush_r+0x62>
 8006afa:	68ac      	ldr	r4, [r5, #8]
 8006afc:	e7df      	b.n	8006abe <_fflush_r+0x22>
 8006afe:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <_fflush_r+0x74>)
 8006b00:	429c      	cmp	r4, r3
 8006b02:	bf08      	it	eq
 8006b04:	68ec      	ldreq	r4, [r5, #12]
 8006b06:	e7da      	b.n	8006abe <_fflush_r+0x22>
 8006b08:	080073ac 	.word	0x080073ac
 8006b0c:	080073cc 	.word	0x080073cc
 8006b10:	0800738c 	.word	0x0800738c

08006b14 <std>:
 8006b14:	2300      	movs	r3, #0
 8006b16:	b510      	push	{r4, lr}
 8006b18:	4604      	mov	r4, r0
 8006b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b22:	6083      	str	r3, [r0, #8]
 8006b24:	8181      	strh	r1, [r0, #12]
 8006b26:	6643      	str	r3, [r0, #100]	; 0x64
 8006b28:	81c2      	strh	r2, [r0, #14]
 8006b2a:	6183      	str	r3, [r0, #24]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	2208      	movs	r2, #8
 8006b30:	305c      	adds	r0, #92	; 0x5c
 8006b32:	f7fd fd1f 	bl	8004574 <memset>
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <std+0x38>)
 8006b38:	6263      	str	r3, [r4, #36]	; 0x24
 8006b3a:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <std+0x3c>)
 8006b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b3e:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <std+0x40>)
 8006b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b42:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <std+0x44>)
 8006b44:	6224      	str	r4, [r4, #32]
 8006b46:	6323      	str	r3, [r4, #48]	; 0x30
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08006e59 	.word	0x08006e59
 8006b50:	08006e7b 	.word	0x08006e7b
 8006b54:	08006eb3 	.word	0x08006eb3
 8006b58:	08006ed7 	.word	0x08006ed7

08006b5c <_cleanup_r>:
 8006b5c:	4901      	ldr	r1, [pc, #4]	; (8006b64 <_cleanup_r+0x8>)
 8006b5e:	f000 b8af 	b.w	8006cc0 <_fwalk_reent>
 8006b62:	bf00      	nop
 8006b64:	08006a9d 	.word	0x08006a9d

08006b68 <__sfmoreglue>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	2268      	movs	r2, #104	; 0x68
 8006b6c:	1e4d      	subs	r5, r1, #1
 8006b6e:	4355      	muls	r5, r2
 8006b70:	460e      	mov	r6, r1
 8006b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b76:	f7ff fc09 	bl	800638c <_malloc_r>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	b140      	cbz	r0, 8006b90 <__sfmoreglue+0x28>
 8006b7e:	2100      	movs	r1, #0
 8006b80:	e9c0 1600 	strd	r1, r6, [r0]
 8006b84:	300c      	adds	r0, #12
 8006b86:	60a0      	str	r0, [r4, #8]
 8006b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b8c:	f7fd fcf2 	bl	8004574 <memset>
 8006b90:	4620      	mov	r0, r4
 8006b92:	bd70      	pop	{r4, r5, r6, pc}

08006b94 <__sfp_lock_acquire>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__sfp_lock_acquire+0x8>)
 8006b96:	f000 b8b3 	b.w	8006d00 <__retarget_lock_acquire_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	20000315 	.word	0x20000315

08006ba0 <__sfp_lock_release>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__sfp_lock_release+0x8>)
 8006ba2:	f000 b8ae 	b.w	8006d02 <__retarget_lock_release_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000315 	.word	0x20000315

08006bac <__sinit_lock_acquire>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__sinit_lock_acquire+0x8>)
 8006bae:	f000 b8a7 	b.w	8006d00 <__retarget_lock_acquire_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000316 	.word	0x20000316

08006bb8 <__sinit_lock_release>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__sinit_lock_release+0x8>)
 8006bba:	f000 b8a2 	b.w	8006d02 <__retarget_lock_release_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20000316 	.word	0x20000316

08006bc4 <__sinit>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	f7ff fff0 	bl	8006bac <__sinit_lock_acquire>
 8006bcc:	69a3      	ldr	r3, [r4, #24]
 8006bce:	b11b      	cbz	r3, 8006bd8 <__sinit+0x14>
 8006bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd4:	f7ff bff0 	b.w	8006bb8 <__sinit_lock_release>
 8006bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <__sinit+0x68>)
 8006be0:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <__sinit+0x6c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	bf04      	itt	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	61a3      	streq	r3, [r4, #24]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 f820 	bl	8006c34 <__sfp>
 8006bf4:	6060      	str	r0, [r4, #4]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 f81c 	bl	8006c34 <__sfp>
 8006bfc:	60a0      	str	r0, [r4, #8]
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 f818 	bl	8006c34 <__sfp>
 8006c04:	2200      	movs	r2, #0
 8006c06:	60e0      	str	r0, [r4, #12]
 8006c08:	2104      	movs	r1, #4
 8006c0a:	6860      	ldr	r0, [r4, #4]
 8006c0c:	f7ff ff82 	bl	8006b14 <std>
 8006c10:	68a0      	ldr	r0, [r4, #8]
 8006c12:	2201      	movs	r2, #1
 8006c14:	2109      	movs	r1, #9
 8006c16:	f7ff ff7d 	bl	8006b14 <std>
 8006c1a:	68e0      	ldr	r0, [r4, #12]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	2112      	movs	r1, #18
 8006c20:	f7ff ff78 	bl	8006b14 <std>
 8006c24:	2301      	movs	r3, #1
 8006c26:	61a3      	str	r3, [r4, #24]
 8006c28:	e7d2      	b.n	8006bd0 <__sinit+0xc>
 8006c2a:	bf00      	nop
 8006c2c:	08007010 	.word	0x08007010
 8006c30:	08006b5d 	.word	0x08006b5d

08006c34 <__sfp>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	4607      	mov	r7, r0
 8006c38:	f7ff ffac 	bl	8006b94 <__sfp_lock_acquire>
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <__sfp+0x84>)
 8006c3e:	681e      	ldr	r6, [r3, #0]
 8006c40:	69b3      	ldr	r3, [r6, #24]
 8006c42:	b913      	cbnz	r3, 8006c4a <__sfp+0x16>
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ffbd 	bl	8006bc4 <__sinit>
 8006c4a:	3648      	adds	r6, #72	; 0x48
 8006c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	d503      	bpl.n	8006c5c <__sfp+0x28>
 8006c54:	6833      	ldr	r3, [r6, #0]
 8006c56:	b30b      	cbz	r3, 8006c9c <__sfp+0x68>
 8006c58:	6836      	ldr	r6, [r6, #0]
 8006c5a:	e7f7      	b.n	8006c4c <__sfp+0x18>
 8006c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c60:	b9d5      	cbnz	r5, 8006c98 <__sfp+0x64>
 8006c62:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <__sfp+0x88>)
 8006c64:	60e3      	str	r3, [r4, #12]
 8006c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c6c:	f000 f847 	bl	8006cfe <__retarget_lock_init_recursive>
 8006c70:	f7ff ff96 	bl	8006ba0 <__sfp_lock_release>
 8006c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c7c:	6025      	str	r5, [r4, #0]
 8006c7e:	61a5      	str	r5, [r4, #24]
 8006c80:	2208      	movs	r2, #8
 8006c82:	4629      	mov	r1, r5
 8006c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c88:	f7fd fc74 	bl	8004574 <memset>
 8006c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c94:	4620      	mov	r0, r4
 8006c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c98:	3468      	adds	r4, #104	; 0x68
 8006c9a:	e7d9      	b.n	8006c50 <__sfp+0x1c>
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f7ff ff62 	bl	8006b68 <__sfmoreglue>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	6030      	str	r0, [r6, #0]
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d1d5      	bne.n	8006c58 <__sfp+0x24>
 8006cac:	f7ff ff78 	bl	8006ba0 <__sfp_lock_release>
 8006cb0:	230c      	movs	r3, #12
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	e7ee      	b.n	8006c94 <__sfp+0x60>
 8006cb6:	bf00      	nop
 8006cb8:	08007010 	.word	0x08007010
 8006cbc:	ffff0001 	.word	0xffff0001

08006cc0 <_fwalk_reent>:
 8006cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	4688      	mov	r8, r1
 8006cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ccc:	2700      	movs	r7, #0
 8006cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cd6:	d505      	bpl.n	8006ce4 <_fwalk_reent+0x24>
 8006cd8:	6824      	ldr	r4, [r4, #0]
 8006cda:	2c00      	cmp	r4, #0
 8006cdc:	d1f7      	bne.n	8006cce <_fwalk_reent+0xe>
 8006cde:	4638      	mov	r0, r7
 8006ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce4:	89ab      	ldrh	r3, [r5, #12]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d907      	bls.n	8006cfa <_fwalk_reent+0x3a>
 8006cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	d003      	beq.n	8006cfa <_fwalk_reent+0x3a>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	47c0      	blx	r8
 8006cf8:	4307      	orrs	r7, r0
 8006cfa:	3568      	adds	r5, #104	; 0x68
 8006cfc:	e7e9      	b.n	8006cd2 <_fwalk_reent+0x12>

08006cfe <__retarget_lock_init_recursive>:
 8006cfe:	4770      	bx	lr

08006d00 <__retarget_lock_acquire_recursive>:
 8006d00:	4770      	bx	lr

08006d02 <__retarget_lock_release_recursive>:
 8006d02:	4770      	bx	lr

08006d04 <__swhatbuf_r>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	460e      	mov	r6, r1
 8006d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	b096      	sub	sp, #88	; 0x58
 8006d10:	4614      	mov	r4, r2
 8006d12:	461d      	mov	r5, r3
 8006d14:	da08      	bge.n	8006d28 <__swhatbuf_r+0x24>
 8006d16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	602a      	str	r2, [r5, #0]
 8006d1e:	061a      	lsls	r2, r3, #24
 8006d20:	d410      	bmi.n	8006d44 <__swhatbuf_r+0x40>
 8006d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d26:	e00e      	b.n	8006d46 <__swhatbuf_r+0x42>
 8006d28:	466a      	mov	r2, sp
 8006d2a:	f000 f8fb 	bl	8006f24 <_fstat_r>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	dbf1      	blt.n	8006d16 <__swhatbuf_r+0x12>
 8006d32:	9a01      	ldr	r2, [sp, #4]
 8006d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d3c:	425a      	negs	r2, r3
 8006d3e:	415a      	adcs	r2, r3
 8006d40:	602a      	str	r2, [r5, #0]
 8006d42:	e7ee      	b.n	8006d22 <__swhatbuf_r+0x1e>
 8006d44:	2340      	movs	r3, #64	; 0x40
 8006d46:	2000      	movs	r0, #0
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	b016      	add	sp, #88	; 0x58
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d50 <__smakebuf_r>:
 8006d50:	898b      	ldrh	r3, [r1, #12]
 8006d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d54:	079d      	lsls	r5, r3, #30
 8006d56:	4606      	mov	r6, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	d507      	bpl.n	8006d6c <__smakebuf_r+0x1c>
 8006d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d60:	6023      	str	r3, [r4, #0]
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	2301      	movs	r3, #1
 8006d66:	6163      	str	r3, [r4, #20]
 8006d68:	b002      	add	sp, #8
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	ab01      	add	r3, sp, #4
 8006d6e:	466a      	mov	r2, sp
 8006d70:	f7ff ffc8 	bl	8006d04 <__swhatbuf_r>
 8006d74:	9900      	ldr	r1, [sp, #0]
 8006d76:	4605      	mov	r5, r0
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f7ff fb07 	bl	800638c <_malloc_r>
 8006d7e:	b948      	cbnz	r0, 8006d94 <__smakebuf_r+0x44>
 8006d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d84:	059a      	lsls	r2, r3, #22
 8006d86:	d4ef      	bmi.n	8006d68 <__smakebuf_r+0x18>
 8006d88:	f023 0303 	bic.w	r3, r3, #3
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	81a3      	strh	r3, [r4, #12]
 8006d92:	e7e3      	b.n	8006d5c <__smakebuf_r+0xc>
 8006d94:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <__smakebuf_r+0x7c>)
 8006d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	6020      	str	r0, [r4, #0]
 8006d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	6163      	str	r3, [r4, #20]
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	6120      	str	r0, [r4, #16]
 8006daa:	b15b      	cbz	r3, 8006dc4 <__smakebuf_r+0x74>
 8006dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db0:	4630      	mov	r0, r6
 8006db2:	f000 f8c9 	bl	8006f48 <_isatty_r>
 8006db6:	b128      	cbz	r0, 8006dc4 <__smakebuf_r+0x74>
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	f043 0301 	orr.w	r3, r3, #1
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	89a0      	ldrh	r0, [r4, #12]
 8006dc6:	4305      	orrs	r5, r0
 8006dc8:	81a5      	strh	r5, [r4, #12]
 8006dca:	e7cd      	b.n	8006d68 <__smakebuf_r+0x18>
 8006dcc:	08006b5d 	.word	0x08006b5d

08006dd0 <_raise_r>:
 8006dd0:	291f      	cmp	r1, #31
 8006dd2:	b538      	push	{r3, r4, r5, lr}
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	d904      	bls.n	8006de4 <_raise_r+0x14>
 8006dda:	2316      	movs	r3, #22
 8006ddc:	6003      	str	r3, [r0, #0]
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006de6:	b112      	cbz	r2, 8006dee <_raise_r+0x1e>
 8006de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dec:	b94b      	cbnz	r3, 8006e02 <_raise_r+0x32>
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f830 	bl	8006e54 <_getpid_r>
 8006df4:	462a      	mov	r2, r5
 8006df6:	4601      	mov	r1, r0
 8006df8:	4620      	mov	r0, r4
 8006dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dfe:	f000 b817 	b.w	8006e30 <_kill_r>
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d00a      	beq.n	8006e1c <_raise_r+0x4c>
 8006e06:	1c59      	adds	r1, r3, #1
 8006e08:	d103      	bne.n	8006e12 <_raise_r+0x42>
 8006e0a:	2316      	movs	r3, #22
 8006e0c:	6003      	str	r3, [r0, #0]
 8006e0e:	2001      	movs	r0, #1
 8006e10:	e7e7      	b.n	8006de2 <_raise_r+0x12>
 8006e12:	2400      	movs	r4, #0
 8006e14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e18:	4628      	mov	r0, r5
 8006e1a:	4798      	blx	r3
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e7e0      	b.n	8006de2 <_raise_r+0x12>

08006e20 <raise>:
 8006e20:	4b02      	ldr	r3, [pc, #8]	; (8006e2c <raise+0xc>)
 8006e22:	4601      	mov	r1, r0
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f7ff bfd3 	b.w	8006dd0 <_raise_r>
 8006e2a:	bf00      	nop
 8006e2c:	2000000c 	.word	0x2000000c

08006e30 <_kill_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	4d07      	ldr	r5, [pc, #28]	; (8006e50 <_kill_r+0x20>)
 8006e34:	2300      	movs	r3, #0
 8006e36:	4604      	mov	r4, r0
 8006e38:	4608      	mov	r0, r1
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	f7fa fa73 	bl	8001328 <_kill>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d102      	bne.n	8006e4c <_kill_r+0x1c>
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	b103      	cbz	r3, 8006e4c <_kill_r+0x1c>
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000310 	.word	0x20000310

08006e54 <_getpid_r>:
 8006e54:	f7fa ba60 	b.w	8001318 <_getpid>

08006e58 <__sread>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e60:	f000 f894 	bl	8006f8c <_read_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	bfab      	itete	ge
 8006e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e6c:	181b      	addge	r3, r3, r0
 8006e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e72:	bfac      	ite	ge
 8006e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e76:	81a3      	strhlt	r3, [r4, #12]
 8006e78:	bd10      	pop	{r4, pc}

08006e7a <__swrite>:
 8006e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7e:	461f      	mov	r7, r3
 8006e80:	898b      	ldrh	r3, [r1, #12]
 8006e82:	05db      	lsls	r3, r3, #23
 8006e84:	4605      	mov	r5, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	4616      	mov	r6, r2
 8006e8a:	d505      	bpl.n	8006e98 <__swrite+0x1e>
 8006e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e90:	2302      	movs	r3, #2
 8006e92:	2200      	movs	r2, #0
 8006e94:	f000 f868 	bl	8006f68 <_lseek_r>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea2:	81a3      	strh	r3, [r4, #12]
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	463b      	mov	r3, r7
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eae:	f000 b817 	b.w	8006ee0 <_write_r>

08006eb2 <__sseek>:
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eba:	f000 f855 	bl	8006f68 <_lseek_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	bf15      	itete	ne
 8006ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ece:	81a3      	strheq	r3, [r4, #12]
 8006ed0:	bf18      	it	ne
 8006ed2:	81a3      	strhne	r3, [r4, #12]
 8006ed4:	bd10      	pop	{r4, pc}

08006ed6 <__sclose>:
 8006ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eda:	f000 b813 	b.w	8006f04 <_close_r>
	...

08006ee0 <_write_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	; (8006f00 <_write_r+0x20>)
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7fa fa51 	bl	8001396 <_write>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_write_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_write_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	20000310 	.word	0x20000310

08006f04 <_close_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_close_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fa fa5d 	bl	80013ce <_close>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_close_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_close_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000310 	.word	0x20000310

08006f24 <_fstat_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	; (8006f44 <_fstat_r+0x20>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	f7fa fa58 	bl	80013e6 <_fstat>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d102      	bne.n	8006f40 <_fstat_r+0x1c>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	b103      	cbz	r3, 8006f40 <_fstat_r+0x1c>
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	20000310 	.word	0x20000310

08006f48 <_isatty_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d06      	ldr	r5, [pc, #24]	; (8006f64 <_isatty_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	602b      	str	r3, [r5, #0]
 8006f54:	f7fa fa57 	bl	8001406 <_isatty>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_isatty_r+0x1a>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_isatty_r+0x1a>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	20000310 	.word	0x20000310

08006f68 <_lseek_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	; (8006f88 <_lseek_r+0x20>)
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f7fa fa50 	bl	800141c <_lseek>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_lseek_r+0x1e>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_lseek_r+0x1e>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	20000310 	.word	0x20000310

08006f8c <_read_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4d07      	ldr	r5, [pc, #28]	; (8006fac <_read_r+0x20>)
 8006f90:	4604      	mov	r4, r0
 8006f92:	4608      	mov	r0, r1
 8006f94:	4611      	mov	r1, r2
 8006f96:	2200      	movs	r2, #0
 8006f98:	602a      	str	r2, [r5, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f7fa f9de 	bl	800135c <_read>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_read_r+0x1e>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_read_r+0x1e>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	20000310 	.word	0x20000310

08006fb0 <_init>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr

08006fbc <_fini>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr
