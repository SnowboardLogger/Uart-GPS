
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000860c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  080087a0  080087a0  000187a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d94  08008d94  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d94  08008d94  00018d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d9c  08008d9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da0  08008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001e0  08008f84  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08008f84  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc81  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efd  00000000  00000000  0002ce91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020da1  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c856  00000000  00000000  00050ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2825  00000000  00000000  0005d74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011ff74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d68  00000000  00000000  0011ffc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008784 	.word	0x08008784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008784 	.word	0x08008784

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9aa 	b.w	8000f74 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468e      	mov	lr, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d14d      	bne.n	8000d4e <__udivmoddi4+0xaa>
 8000cb2:	428a      	cmp	r2, r1
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	d969      	bls.n	8000d8c <__udivmoddi4+0xe8>
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	b152      	cbz	r2, 8000cd4 <__udivmoddi4+0x30>
 8000cbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc2:	f1c2 0120 	rsb	r1, r2, #32
 8000cc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cce:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd2:	4094      	lsls	r4, r2
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	0c21      	lsrs	r1, r4, #16
 8000cda:	fbbe f6f8 	udiv	r6, lr, r8
 8000cde:	fa1f f78c 	uxth.w	r7, ip
 8000ce2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cea:	fb06 f107 	mul.w	r1, r6, r7
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x64>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 811f 	bcs.w	8000f3c <__udivmoddi4+0x298>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 811c 	bls.w	8000f3c <__udivmoddi4+0x298>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 f707 	mul.w	r7, r0, r7
 8000d1c:	42a7      	cmp	r7, r4
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x92>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d28:	f080 810a 	bcs.w	8000f40 <__udivmoddi4+0x29c>
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	f240 8107 	bls.w	8000f40 <__udivmoddi4+0x29c>
 8000d32:	4464      	add	r4, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	1be4      	subs	r4, r4, r7
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa4>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xc2>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80ef 	beq.w	8000f36 <__udivmoddi4+0x292>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x160>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd4>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80f9 	bhi.w	8000f6a <__udivmoddi4+0x2c6>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	469e      	mov	lr, r3
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa4>
 8000d86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa4>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xec>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 8092 	bne.w	8000ebe <__udivmoddi4+0x21a>
 8000d9a:	eba1 010c 	sub.w	r1, r1, ip
 8000d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	2601      	movs	r6, #1
 8000da8:	0c20      	lsrs	r0, r4, #16
 8000daa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dae:	fb07 1113 	mls	r1, r7, r3, r1
 8000db2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db6:	fb0e f003 	mul.w	r0, lr, r3
 8000dba:	4288      	cmp	r0, r1
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x12c>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x12a>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f200 80cb 	bhi.w	8000f64 <__udivmoddi4+0x2c0>
 8000dce:	4643      	mov	r3, r8
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ddc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de0:	fb0e fe00 	mul.w	lr, lr, r0
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x156>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x154>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f200 80bb 	bhi.w	8000f6e <__udivmoddi4+0x2ca>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e02:	e79c      	b.n	8000d3e <__udivmoddi4+0x9a>
 8000e04:	f1c6 0720 	rsb	r7, r6, #32
 8000e08:	40b3      	lsls	r3, r6
 8000e0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e12:	fa20 f407 	lsr.w	r4, r0, r7
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	40f9      	lsrs	r1, r7
 8000e1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e22:	fa00 f306 	lsl.w	r3, r0, r6
 8000e26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2a:	0c20      	lsrs	r0, r4, #16
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	fb09 1118 	mls	r1, r9, r8, r1
 8000e34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e38:	fb08 f00e 	mul.w	r0, r8, lr
 8000e3c:	4288      	cmp	r0, r1
 8000e3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e42:	d90b      	bls.n	8000e5c <__udivmoddi4+0x1b8>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e4c:	f080 8088 	bcs.w	8000f60 <__udivmoddi4+0x2bc>
 8000e50:	4288      	cmp	r0, r1
 8000e52:	f240 8085 	bls.w	8000f60 <__udivmoddi4+0x2bc>
 8000e56:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5a:	4461      	add	r1, ip
 8000e5c:	1a09      	subs	r1, r1, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e64:	fb09 1110 	mls	r1, r9, r0, r1
 8000e68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e70:	458e      	cmp	lr, r1
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1e2>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e7c:	d26c      	bcs.n	8000f58 <__udivmoddi4+0x2b4>
 8000e7e:	458e      	cmp	lr, r1
 8000e80:	d96a      	bls.n	8000f58 <__udivmoddi4+0x2b4>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4461      	add	r1, ip
 8000e86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e8e:	eba1 010e 	sub.w	r1, r1, lr
 8000e92:	42a1      	cmp	r1, r4
 8000e94:	46c8      	mov	r8, r9
 8000e96:	46a6      	mov	lr, r4
 8000e98:	d356      	bcc.n	8000f48 <__udivmoddi4+0x2a4>
 8000e9a:	d053      	beq.n	8000f44 <__udivmoddi4+0x2a0>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x212>
 8000e9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ea6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eaa:	fa22 f306 	lsr.w	r3, r2, r6
 8000eae:	40f1      	lsrs	r1, r6
 8000eb0:	431f      	orrs	r7, r3
 8000eb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	f1c2 0320 	rsb	r3, r2, #32
 8000ec2:	40d8      	lsrs	r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ecc:	4091      	lsls	r1, r2
 8000ece:	4301      	orrs	r1, r0
 8000ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed4:	fa1f fe8c 	uxth.w	lr, ip
 8000ed8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000edc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee0:	0c0b      	lsrs	r3, r1, #16
 8000ee2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ee6:	fb00 f60e 	mul.w	r6, r0, lr
 8000eea:	429e      	cmp	r6, r3
 8000eec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x260>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efa:	d22f      	bcs.n	8000f5c <__udivmoddi4+0x2b8>
 8000efc:	429e      	cmp	r6, r3
 8000efe:	d92d      	bls.n	8000f5c <__udivmoddi4+0x2b8>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1b9b      	subs	r3, r3, r6
 8000f06:	b289      	uxth	r1, r1
 8000f08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f14:	fb06 f30e 	mul.w	r3, r6, lr
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x28a>
 8000f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f24:	d216      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d914      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000f2a:	3e02      	subs	r6, #2
 8000f2c:	4461      	add	r1, ip
 8000f2e:	1ac9      	subs	r1, r1, r3
 8000f30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f34:	e738      	b.n	8000da8 <__udivmoddi4+0x104>
 8000f36:	462e      	mov	r6, r5
 8000f38:	4628      	mov	r0, r5
 8000f3a:	e705      	b.n	8000d48 <__udivmoddi4+0xa4>
 8000f3c:	4606      	mov	r6, r0
 8000f3e:	e6e3      	b.n	8000d08 <__udivmoddi4+0x64>
 8000f40:	4618      	mov	r0, r3
 8000f42:	e6f8      	b.n	8000d36 <__udivmoddi4+0x92>
 8000f44:	454b      	cmp	r3, r9
 8000f46:	d2a9      	bcs.n	8000e9c <__udivmoddi4+0x1f8>
 8000f48:	ebb9 0802 	subs.w	r8, r9, r2
 8000f4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f50:	3801      	subs	r0, #1
 8000f52:	e7a3      	b.n	8000e9c <__udivmoddi4+0x1f8>
 8000f54:	4646      	mov	r6, r8
 8000f56:	e7ea      	b.n	8000f2e <__udivmoddi4+0x28a>
 8000f58:	4620      	mov	r0, r4
 8000f5a:	e794      	b.n	8000e86 <__udivmoddi4+0x1e2>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	e7d1      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f60:	46d0      	mov	r8, sl
 8000f62:	e77b      	b.n	8000e5c <__udivmoddi4+0x1b8>
 8000f64:	3b02      	subs	r3, #2
 8000f66:	4461      	add	r1, ip
 8000f68:	e732      	b.n	8000dd0 <__udivmoddi4+0x12c>
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	e709      	b.n	8000d82 <__udivmoddi4+0xde>
 8000f6e:	4464      	add	r4, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e742      	b.n	8000dfa <__udivmoddi4+0x156>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b0b8      	sub	sp, #224	; 0xe0
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fcfa 	bl	8001976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f9d9 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 fa89 	bl	800149c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f8a:	f000 fa27 	bl	80013dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f8e:	f000 fa55 	bl	800143c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //enable GGA (contains the precision data) and RMC (contains all the minimum navigation info)
  //data on the GPS
  char inputBuffer[] = "PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
 8000f92:	4bb6      	ldr	r3, [pc, #728]	; (800126c <main+0x2f4>)
 8000f94:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000f98:	461d      	mov	r5, r3
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fa6:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa8:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *) inputBuffer, sizeof(inputBuffer), 100);
 8000faa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	222e      	movs	r2, #46	; 0x2e
 8000fb2:	48af      	ldr	r0, [pc, #700]	; (8001270 <main+0x2f8>)
 8000fb4:	f002 fa38 	bl	8003428 <HAL_UART_Transmit>

  char dataBuffer[70]="ASDFADFHDFGASDFASDFSDFHDASDF";//max chars of 70 from gpgga
 8000fb8:	4bae      	ldr	r3, [pc, #696]	; (8001274 <main+0x2fc>)
 8000fba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fc8:	c407      	stmia	r4!, {r0, r1, r2}
 8000fca:	7023      	strb	r3, [r4, #0]
 8000fcc:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8000fd0:	2229      	movs	r2, #41	; 0x29
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 fb45 	bl	8004664 <memset>
  int dataElementNum = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  char dataType[] = "XXXXXX";
 8000fe0:	4aa5      	ldr	r2, [pc, #660]	; (8001278 <main+0x300>)
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fea:	6018      	str	r0, [r3, #0]
 8000fec:	3304      	adds	r3, #4
 8000fee:	8019      	strh	r1, [r3, #0]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	0c0a      	lsrs	r2, r1, #16
 8000ff4:	701a      	strb	r2, [r3, #0]

  char latitudeChar[] = "lllll.ll";
 8000ff6:	4aa1      	ldr	r2, [pc, #644]	; (800127c <main+0x304>)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ffe:	c303      	stmia	r3!, {r0, r1}
 8001000:	701a      	strb	r2, [r3, #0]
  double latitude = 0;
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

  char latDir = 'A';//N or S
 800100e:	2341      	movs	r3, #65	; 0x41
 8001010:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

  char longitudeChar[] = "yyyyy.yy";
 8001014:	4a9a      	ldr	r2, [pc, #616]	; (8001280 <main+0x308>)
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	ca07      	ldmia	r2, {r0, r1, r2}
 800101c:	c303      	stmia	r3!, {r0, r1}
 800101e:	701a      	strb	r2, [r3, #0]
  double longitude = 0;
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

  char longDir = 'A';//E or W
 800102c:	2341      	movs	r3, #65	; 0x41
 800102e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

  uint8_t fix = 0;//0 = invalid, 1 = GPS fix, 2 = Dif. GPS fix
 8001032:	2300      	movs	r3, #0
 8001034:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe

  uint8_t numSatellites = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

  double hdop = 0;//Horizontal Dilution of Precision
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  char hdopChar[] = "x.x";
 800104a:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <main+0x30c>)
 800104c:	607b      	str	r3, [r7, #4]

  double altitude = 0;
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f04f 0300 	mov.w	r3, #0
 8001056:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  char altitudeChar[] = "x.x";
 800105a:	4b8a      	ldr	r3, [pc, #552]	; (8001284 <main+0x30c>)
 800105c:	603b      	str	r3, [r7, #0]

  char altitudeUnits = 'M';//M = meters
 800105e:	234d      	movs	r3, #77	; 0x4d
 8001060:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  {
	//The last parameter is the number of data elements to be received, this will need to be changed based on the max # bytes the GPS sends
	//The number of bytes can change based on whether the GPS has a fix or not so that's a problem
	//printf("test:2,23,32,4,23,4,423,43");
	//__HAL_UART_FLUSH_DRREGISTER(&huart1);
	HAL_UART_Receive(&huart1, (uint8_t *) dataBuffer, 68, 10000);
 8001064:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001068:	f242 7310 	movw	r3, #10000	; 0x2710
 800106c:	2244      	movs	r2, #68	; 0x44
 800106e:	4880      	ldr	r0, [pc, #512]	; (8001270 <main+0x2f8>)
 8001070:	f002 fa6e 	bl	8003550 <HAL_UART_Receive>
	//huart->RxISR(huart); might hold some data?

	int index = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	for(uint8_t i = 0; i < 70; ++i){
 800107a:	2300      	movs	r3, #0
 800107c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8001080:	e10f      	b.n	80012a2 <main+0x32a>
		char letter = *(dataBuffer+i);
 8001082:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001086:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e

		//printf("%c", letter);


		if(letter == ','){
 8001092:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001096:	2b2c      	cmp	r3, #44	; 0x2c
 8001098:	d107      	bne.n	80010aa <main+0x132>
			++dataElementNum;
 800109a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800109e:	3301      	adds	r3, #1
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			index = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		}

		if(dataElementNum == 0 && letter != ','){
 80010aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d110      	bne.n	80010d4 <main+0x15c>
 80010b2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80010b6:	2b2c      	cmp	r3, #44	; 0x2c
 80010b8:	d00c      	beq.n	80010d4 <main+0x15c>
			//datatype, either GPGGA or GPRMC
			dataType[index] = letter;
 80010ba:	f107 0220 	add.w	r2, r7, #32
 80010be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010c2:	4413      	add	r3, r2
 80010c4:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80010c8:	701a      	strb	r2, [r3, #0]
			++index;
 80010ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010ce:	3301      	adds	r3, #1
 80010d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		}


		if(strcmp(dataType,"$GPGGA") == 0 && letter != ','){
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	496b      	ldr	r1, [pc, #428]	; (8001288 <main+0x310>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f878 	bl	80001d0 <strcmp>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 80d8 	bne.w	8001298 <main+0x320>
 80010e8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80010ec:	2b2c      	cmp	r3, #44	; 0x2c
 80010ee:	f000 80cd 	beq.w	800128c <main+0x314>
			if (dataElementNum == 1 ){
 80010f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	f000 80ce 	beq.w	8001298 <main+0x320>
				//This is the UTC (time) if we need it
			} else if (dataElementNum == 2 ){
 80010fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001100:	2b02      	cmp	r3, #2
 8001102:	d11e      	bne.n	8001142 <main+0x1ca>
				latitudeChar[index] = letter;
 8001104:	f107 0214 	add.w	r2, r7, #20
 8001108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800110c:	4413      	add	r3, r2
 800110e:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8001112:	701a      	strb	r2, [r3, #0]
				++index;
 8001114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001118:	3301      	adds	r3, #1
 800111a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				if(*(dataBuffer+i+1) == ','){
 800111e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001122:	3301      	adds	r3, #1
 8001124:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b2c      	cmp	r3, #44	; 0x2c
 800112e:	f040 80b3 	bne.w	8001298 <main+0x320>
					latitude = atof(latitudeChar);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fa66 	bl	8004608 <atof>
 800113c:	ed87 0b34 	vstr	d0, [r7, #208]	; 0xd0
 8001140:	e0aa      	b.n	8001298 <main+0x320>
				}

			} else if (dataElementNum == 3){
 8001142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001146:	2b03      	cmp	r3, #3
 8001148:	d104      	bne.n	8001154 <main+0x1dc>
				latDir = letter;
 800114a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800114e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001152:	e0a1      	b.n	8001298 <main+0x320>

			} else if (dataElementNum == 4){
 8001154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001158:	2b04      	cmp	r3, #4
 800115a:	d11e      	bne.n	800119a <main+0x222>
				longitudeChar[index] = letter;
 800115c:	f107 0208 	add.w	r2, r7, #8
 8001160:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001164:	4413      	add	r3, r2
 8001166:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800116a:	701a      	strb	r2, [r3, #0]
				++index;
 800116c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001170:	3301      	adds	r3, #1
 8001172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				if(*(dataBuffer+i+1) == ','){
 8001176:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800117a:	3301      	adds	r3, #1
 800117c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b2c      	cmp	r3, #44	; 0x2c
 8001186:	f040 8087 	bne.w	8001298 <main+0x320>
					longitude = atof(longitudeChar);
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fa3a 	bl	8004608 <atof>
 8001194:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
 8001198:	e07e      	b.n	8001298 <main+0x320>
				}

			} else if (dataElementNum == 5){
 800119a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800119e:	2b05      	cmp	r3, #5
 80011a0:	d104      	bne.n	80011ac <main+0x234>
				longDir = letter;
 80011a2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80011a6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80011aa:	e075      	b.n	8001298 <main+0x320>

			} else if (dataElementNum == 6){
 80011ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d104      	bne.n	80011be <main+0x246>
				fix = (uint8_t) letter;
 80011b4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80011b8:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 80011bc:	e06c      	b.n	8001298 <main+0x320>

			} else if (dataElementNum == 7){
 80011be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d104      	bne.n	80011d0 <main+0x258>
				//sus?
				numSatellites = (uint8_t) letter;
 80011c6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80011ca:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 80011ce:	e063      	b.n	8001298 <main+0x320>

			} else if (dataElementNum == 8){
 80011d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d11b      	bne.n	8001210 <main+0x298>
				hdopChar[index] = letter;
 80011d8:	1d3a      	adds	r2, r7, #4
 80011da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011de:	4413      	add	r3, r2
 80011e0:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80011e4:	701a      	strb	r2, [r3, #0]
				++index;
 80011e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80011ea:	3301      	adds	r3, #1
 80011ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				if(*(dataBuffer+i+1) == ','){
 80011f0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80011f4:	3301      	adds	r3, #1
 80011f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b2c      	cmp	r3, #44	; 0x2c
 8001200:	d14a      	bne.n	8001298 <main+0x320>
					hdop = atof(hdopChar);
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f003 f9ff 	bl	8004608 <atof>
 800120a:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0
 800120e:	e043      	b.n	8001298 <main+0x320>
				}

			} else if (dataElementNum == 9){
 8001210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001214:	2b09      	cmp	r3, #9
 8001216:	d11b      	bne.n	8001250 <main+0x2d8>
				altitudeChar[index] = letter;
 8001218:	463a      	mov	r2, r7
 800121a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800121e:	4413      	add	r3, r2
 8001220:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 8001224:	701a      	strb	r2, [r3, #0]
				++index;
 8001226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				if(*(dataBuffer+i+1) == ','){
 8001230:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001234:	3301      	adds	r3, #1
 8001236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b2c      	cmp	r3, #44	; 0x2c
 8001240:	d12a      	bne.n	8001298 <main+0x320>
					altitude = atof(altitudeChar);
 8001242:	463b      	mov	r3, r7
 8001244:	4618      	mov	r0, r3
 8001246:	f003 f9df 	bl	8004608 <atof>
 800124a:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
 800124e:	e023      	b.n	8001298 <main+0x320>
				}

			} else if (dataElementNum == 10){
 8001250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001254:	2b0a      	cmp	r3, #10
 8001256:	d104      	bne.n	8001262 <main+0x2ea>
				altitudeUnits = letter;
 8001258:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800125c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001260:	e01a      	b.n	8001298 <main+0x320>

			} else if (dataElementNum == 11){
 8001262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001266:	2b0b      	cmp	r3, #11
 8001268:	d116      	bne.n	8001298 <main+0x320>
				break;
 800126a:	e01f      	b.n	80012ac <main+0x334>
 800126c:	08008818 	.word	0x08008818
 8001270:	200001fc 	.word	0x200001fc
 8001274:	08008848 	.word	0x08008848
 8001278:	08008890 	.word	0x08008890
 800127c:	08008898 	.word	0x08008898
 8001280:	080088a4 	.word	0x080088a4
 8001284:	00782e78 	.word	0x00782e78
 8001288:	080087a0 	.word	0x080087a0
			}

		} else if(strcmp(dataType,"$GPRMC") == 0 ){
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	4921      	ldr	r1, [pc, #132]	; (8001318 <main+0x3a0>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7fe ff9c 	bl	80001d0 <strcmp>
	for(uint8_t i = 0; i < 70; ++i){
 8001298:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800129c:	3301      	adds	r3, #1
 800129e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80012a2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80012a6:	2b45      	cmp	r3, #69	; 0x45
 80012a8:	f67f aeeb 	bls.w	8001082 <main+0x10a>

  double altitude = 0;
  char altitudeChar[] = "";

  char altitudeUnits = 'M';//M = meters*/
	printf("Latitude: %f", latitude);
 80012ac:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80012b0:	481a      	ldr	r0, [pc, #104]	; (800131c <main+0x3a4>)
 80012b2:	f003 fe49 	bl	8004f48 <iprintf>
	printf(" %c", latDir);
 80012b6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80012ba:	4619      	mov	r1, r3
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <main+0x3a8>)
 80012be:	f003 fe43 	bl	8004f48 <iprintf>
	printf(" | Longitude: %f", longitude);
 80012c2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <main+0x3ac>)
 80012c8:	f003 fe3e 	bl	8004f48 <iprintf>
	printf(" %c", longDir);
 80012cc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80012d0:	4619      	mov	r1, r3
 80012d2:	4813      	ldr	r0, [pc, #76]	; (8001320 <main+0x3a8>)
 80012d4:	f003 fe38 	bl	8004f48 <iprintf>
	printf(" | GPS fix?: %u", fix);
 80012d8:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 80012dc:	4619      	mov	r1, r3
 80012de:	4812      	ldr	r0, [pc, #72]	; (8001328 <main+0x3b0>)
 80012e0:	f003 fe32 	bl	8004f48 <iprintf>
	printf(" | Satellites: %u", numSatellites);
 80012e4:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80012e8:	4619      	mov	r1, r3
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <main+0x3b4>)
 80012ec:	f003 fe2c 	bl	8004f48 <iprintf>
	printf(" | HDOP: %f", hdop);
 80012f0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80012f4:	480e      	ldr	r0, [pc, #56]	; (8001330 <main+0x3b8>)
 80012f6:	f003 fe27 	bl	8004f48 <iprintf>
	printf(" | altitude: %f", altitude);
 80012fa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <main+0x3bc>)
 8001300:	f003 fe22 	bl	8004f48 <iprintf>
	printf(" %c", altitudeUnits);
 8001304:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <main+0x3a8>)
 800130c:	f003 fe1c 	bl	8004f48 <iprintf>
	printf("\n");
 8001310:	200a      	movs	r0, #10
 8001312:	f003 fe31 	bl	8004f78 <putchar>
  {
 8001316:	e6a5      	b.n	8001064 <main+0xec>
 8001318:	080087a8 	.word	0x080087a8
 800131c:	080087b0 	.word	0x080087b0
 8001320:	080087c0 	.word	0x080087c0
 8001324:	080087c4 	.word	0x080087c4
 8001328:	080087d8 	.word	0x080087d8
 800132c:	080087e8 	.word	0x080087e8
 8001330:	080087fc 	.word	0x080087fc
 8001334:	08008808 	.word	0x08008808

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2244      	movs	r2, #68	; 0x44
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f003 f98c 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800135a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135e:	f000 fe9f 	bl	80020a0 <HAL_PWREx_ControlVoltageScaling>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001368:	f000 f8f4 	bl	8001554 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800136c:	2310      	movs	r3, #16
 800136e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001380:	2301      	movs	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001388:	2310      	movs	r3, #16
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800138c:	2307      	movs	r3, #7
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fed5 	bl	800214c <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013a8:	f000 f8d4 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b0:	2303      	movs	r3, #3
 80013b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2101      	movs	r1, #1
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fad5 	bl	8002974 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013d0:	f000 f8c0 	bl	8001554 <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3758      	adds	r7, #88	; 0x58
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013e2:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_USART1_UART_Init+0x5c>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART1_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART1_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART1_UART_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART1_UART_Init+0x58>)
 8001420:	f001 ffb4 	bl	800338c <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f000 f893 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001fc 	.word	0x200001fc
 8001438:	40013800 	.word	0x40013800

0800143c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART2_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001448:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART2_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001480:	f001 ff84 	bl	800338c <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f000 f863 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000280 	.word	0x20000280
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2108      	movs	r1, #8
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <MX_GPIO_Init+0x90>)
 8001500:	f000 fda8 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001504:	2308      	movs	r3, #8
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_GPIO_Init+0x90>)
 800151c:	f000 fc30 	bl	8001d80 <HAL_GPIO_Init>

}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	48000400 	.word	0x48000400

08001530 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001538:	1d39      	adds	r1, r7, #4
 800153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153e:	2201      	movs	r2, #1
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <__io_putchar+0x20>)
 8001542:	f001 ff71 	bl	8003428 <HAL_UART_Transmit>
  return ch;
 8001546:	687b      	ldr	r3, [r7, #4]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200001fc 	.word	0x200001fc

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_MspInit+0x44>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6613      	str	r3, [r2, #96]	; 0x60
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_MspInit+0x44>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x44>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6593      	str	r3, [r2, #88]	; 0x58
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b0a0      	sub	sp, #128	; 0x80
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	2254      	movs	r2, #84	; 0x54
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 f84b 	bl	8004664 <memset>
  if(huart->Instance==USART1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a46      	ldr	r2, [pc, #280]	; (80016ec <HAL_UART_MspInit+0x144>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d140      	bne.n	800165a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fbe9 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f0:	f7ff ffb0 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015f4:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <HAL_UART_MspInit+0x148>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f8:	4a3d      	ldr	r2, [pc, #244]	; (80016f0 <HAL_UART_MspInit+0x148>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001600:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <HAL_UART_MspInit+0x148>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <HAL_UART_MspInit+0x148>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a37      	ldr	r2, [pc, #220]	; (80016f0 <HAL_UART_MspInit+0x148>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b35      	ldr	r3, [pc, #212]	; (80016f0 <HAL_UART_MspInit+0x148>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001624:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001628:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001636:	2307      	movs	r3, #7
 8001638:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f000 fb9c 	bl	8001d80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2025      	movs	r0, #37	; 0x25
 800164e:	f000 fae2 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001652:	2025      	movs	r0, #37	; 0x25
 8001654:	f000 fafb 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001658:	e043      	b.n	80016e2 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <HAL_UART_MspInit+0x14c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d13e      	bne.n	80016e2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001664:	2302      	movs	r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fba3 	bl	8002dbc <HAL_RCCEx_PeriphCLKConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800167c:	f7ff ff6a 	bl	8001554 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_UART_MspInit+0x148>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_UART_MspInit+0x148>)
 8001686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168a:	6593      	str	r3, [r2, #88]	; 0x58
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_UART_MspInit+0x148>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_UART_MspInit+0x148>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <HAL_UART_MspInit+0x148>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_UART_MspInit+0x148>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80016b0:	230c      	movs	r3, #12
 80016b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c0:	2307      	movs	r3, #7
 80016c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016c8:	4619      	mov	r1, r3
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f000 fb57 	bl	8001d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2026      	movs	r0, #38	; 0x26
 80016d8:	f000 fa9d 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016dc:	2026      	movs	r0, #38	; 0x26
 80016de:	f000 fab6 	bl	8001c4e <HAL_NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3780      	adds	r7, #128	; 0x80
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40004400 	.word	0x40004400

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f000 f96c 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <USART1_IRQHandler+0x10>)
 8001752:	f001 ffcf 	bl	80036f4 <HAL_UART_IRQHandler>
  ++count;
  if(count > 70){
	  count = 0;
  }*/
  /* USER CODE END USART1_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200001fc 	.word	0x200001fc

08001760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <USART2_IRQHandler+0x10>)
 8001766:	f001 ffc5 	bl	80036f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000280 	.word	0x20000280

08001774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_kill>:

int _kill(int pid, int sig)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178e:	f002 ff3f 	bl	8004610 <__errno>
 8001792:	4603      	mov	r3, r0
 8001794:	2216      	movs	r2, #22
 8001796:	601a      	str	r2, [r3, #0]
  return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_exit>:

void _exit (int status)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ffe7 	bl	8001784 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b6:	e7fe      	b.n	80017b6 <_exit+0x12>

080017b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
  }

  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e009      	b.n	8001818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe8f 	bl	8001530 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf1      	blt.n	8001804 <_write+0x12>
  }
  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_close>:

int _close(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001852:	605a      	str	r2, [r3, #4]
  return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_isatty>:

int _isatty(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f002 fea4 	bl	8004610 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20010000 	.word	0x20010000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	20000304 	.word	0x20000304
 80018fc:	20000320 	.word	0x20000320

08001900 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001928:	f7ff ffea 	bl	8001900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <LoopForever+0x6>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <LoopForever+0xe>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <LoopForever+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f002 fe63 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001956:	f7ff fb0f 	bl	8000f78 <main>

0800195a <LoopForever>:

LoopForever:
    b LoopForever
 800195a:	e7fe      	b.n	800195a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800195c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001968:	08008da4 	.word	0x08008da4
  ldr r2, =_sbss
 800196c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001970:	2000031c 	.word	0x2000031c

08001974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_IRQHandler>

08001976 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f93d 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f80e 	bl	80019a8 <HAL_InitTick>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	e001      	b.n	800199c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001998:	f7ff fde2 	bl	8001560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800199c:	79fb      	ldrb	r3, [r7, #7]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_InitTick+0x6c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d023      	beq.n	8001a04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_InitTick+0x70>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_InitTick+0x6c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f949 	bl	8001c6a <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d809      	bhi.n	80019f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f913 	bl	8001c16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_InitTick+0x74>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e007      	b.n	8001a08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e004      	b.n	8001a08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e001      	b.n	8001a08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000308 	.word	0x20000308

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000308 	.word	0x20000308

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	; (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff3e 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff8e 	bl	8001b54 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5d 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff31 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d008      	beq.n	8001cac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e022      	b.n	8001cf2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 020e 	bic.w	r2, r2, #14
 8001cba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd0:	f003 021c 	and.w	r2, r3, #28
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d005      	beq.n	8001d22 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e029      	b.n	8001d76 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 020e 	bic.w	r2, r2, #14
 8001d30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f003 021c 	and.w	r2, r3, #28
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2101      	movs	r1, #1
 8001d50:	fa01 f202 	lsl.w	r2, r1, r2
 8001d54:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
    }
  }
  return status;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e148      	b.n	8002022 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 813a 	beq.w	800201c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x40>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8094 	beq.w	800201c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_GPIO_Init+0x2c0>)
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef8:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_GPIO_Init+0x2c0>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6613      	str	r3, [r2, #96]	; 0x60
 8001f00:	4b4f      	ldr	r3, [pc, #316]	; (8002040 <HAL_GPIO_Init+0x2c0>)
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_GPIO_Init+0x2c4>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f36:	d00d      	beq.n	8001f54 <HAL_GPIO_Init+0x1d4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a43      	ldr	r2, [pc, #268]	; (8002048 <HAL_GPIO_Init+0x2c8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x1d0>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_GPIO_Init+0x2cc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_GPIO_Init+0x1cc>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e004      	b.n	8001f56 <HAL_GPIO_Init+0x1d6>
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x1d6>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_GPIO_Init+0x1d6>
 8001f54:	2300      	movs	r3, #0
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f66:	4937      	ldr	r1, [pc, #220]	; (8002044 <HAL_GPIO_Init+0x2c4>)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	f47f aeaf 	bne.w	8001d90 <HAL_GPIO_Init+0x10>
  }
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	48000400 	.word	0x48000400
 800204c:	48000800 	.word	0x48000800
 8002050:	40010400 	.word	0x40010400

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002070:	e002      	b.n	8002078 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_PWREx_GetVoltageRange+0x18>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000

080020a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ae:	d130      	bne.n	8002112 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020bc:	d038      	beq.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020c6:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ce:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2232      	movs	r2, #50	; 0x32
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0c9b      	lsrs	r3, r3, #18
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e4:	e002      	b.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f8:	d102      	bne.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f2      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210c:	d110      	bne.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e00f      	b.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d007      	beq.n	8002130 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40007000 	.word	0x40007000
 8002144:	20000000 	.word	0x20000000
 8002148:	431bde83 	.word	0x431bde83

0800214c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f000 bc02 	b.w	8002964 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216a:	4b94      	ldr	r3, [pc, #592]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80e4 	beq.w	800234a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_RCC_OscConfig+0x4c>
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	f040 808b 	bne.w	80022a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b01      	cmp	r3, #1
 8002194:	f040 8087 	bne.w	80022a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002198:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x64>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e3d9      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_RCC_OscConfig+0x7e>
 80021c0:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	e005      	b.n	80021d6 <HAL_RCC_OscConfig+0x8a>
 80021ca:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d223      	bcs.n	8002222 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fd8c 	bl	8002cfc <RCC_SetFlashLatencyFromMSIRange>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e3ba      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	496d      	ldr	r1, [pc, #436]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	4968      	ldr	r1, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e025      	b.n	800226e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002222:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a65      	ldr	r2, [pc, #404]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002228:	f043 0308 	orr.w	r3, r3, #8
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4960      	ldr	r1, [pc, #384]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002240:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	495b      	ldr	r1, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fd4c 	bl	8002cfc <RCC_SetFlashLatencyFromMSIRange>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e37a      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800226e:	f000 fc81 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002272:	4602      	mov	r2, r0
 8002274:	4b51      	ldr	r3, [pc, #324]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4950      	ldr	r1, [pc, #320]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_RCC_OscConfig+0x278>)
 800228c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800228e:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <HAL_RCC_OscConfig+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fb88 	bl	80019a8 <HAL_InitTick>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d052      	beq.n	8002348 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	e35e      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d032      	beq.n	8002314 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022ae:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fbc5 	bl	8001a48 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c2:	f7ff fbc1 	bl	8001a48 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e347      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a35      	ldr	r2, [pc, #212]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4930      	ldr	r1, [pc, #192]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	492b      	ldr	r1, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
 8002312:	e01a      	b.n	800234a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002320:	f7ff fb92 	bl	8001a48 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002328:	f7ff fb8e 	bl	8001a48 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e314      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x1dc>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d073      	beq.n	800243e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x21c>
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d10e      	bne.n	8002380 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d063      	beq.n	800243c <HAL_RCC_OscConfig+0x2f0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d15f      	bne.n	800243c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e2f1      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x24c>
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e025      	b.n	80023e4 <HAL_RCC_OscConfig+0x298>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d114      	bne.n	80023cc <HAL_RCC_OscConfig+0x280>
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a02      	ldr	r2, [pc, #8]	; (80023bc <HAL_RCC_OscConfig+0x270>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e013      	b.n	80023e4 <HAL_RCC_OscConfig+0x298>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	080088b0 	.word	0x080088b0
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004
 80023cc:	4ba0      	ldr	r3, [pc, #640]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a9f      	ldr	r2, [pc, #636]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b9d      	ldr	r3, [pc, #628]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a9c      	ldr	r2, [pc, #624]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fb2c 	bl	8001a48 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7ff fb28 	bl	8001a48 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e2ae      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x2a8>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7ff fb18 	bl	8001a48 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fb14 	bl	8001a48 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e29a      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242e:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x2d0>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d060      	beq.n	800250c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d005      	beq.n	800245c <HAL_RCC_OscConfig+0x310>
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d119      	bne.n	800248a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d116      	bne.n	800248a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x328>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e277      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	4973      	ldr	r1, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002488:	e040      	b.n	800250c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d023      	beq.n	80024da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002492:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff fad3 	bl	8001a48 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7ff facf 	bl	8001a48 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e255      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	495f      	ldr	r1, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e018      	b.n	800250c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b5d      	ldr	r3, [pc, #372]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a5c      	ldr	r2, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80024e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7ff faaf 	bl	8001a48 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7ff faab 	bl	8001a48 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e231      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d03c      	beq.n	8002592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002520:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002526:	4a4a      	ldr	r2, [pc, #296]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7ff fa8a 	bl	8001a48 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002538:	f7ff fa86 	bl	8001a48 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e20c      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 800254c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCC_OscConfig+0x3ec>
 8002558:	e01b      	b.n	8002592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002560:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7ff fa6d 	bl	8001a48 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002572:	f7ff fa69 	bl	8001a48 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1ef      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ef      	bne.n	8002572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80a6 	beq.w	80026ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80025b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ba:	6593      	str	r3, [r2, #88]	; 0x58
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x508>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d118      	bne.n	800260a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x508>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_RCC_OscConfig+0x508>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e4:	f7ff fa30 	bl	8001a48 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7ff fa2c 	bl	8001a48 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1b2      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_RCC_OscConfig+0x508>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_RCC_OscConfig+0x4d8>
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002622:	e029      	b.n	8002678 <HAL_RCC_OscConfig+0x52c>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b05      	cmp	r3, #5
 800262a:	d115      	bne.n	8002658 <HAL_RCC_OscConfig+0x50c>
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_RCC_OscConfig+0x504>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x52c>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	4b9a      	ldr	r3, [pc, #616]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	4a99      	ldr	r2, [pc, #612]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002668:	4b96      	ldr	r3, [pc, #600]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	4a95      	ldr	r2, [pc, #596]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d016      	beq.n	80026ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7ff f9e2 	bl	8001a48 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7ff f9de 	bl	8001a48 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e162      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ed      	beq.n	8002688 <HAL_RCC_OscConfig+0x53c>
 80026ac:	e015      	b.n	80026da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff f9cb 	bl	8001a48 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff f9c7 	bl	8001a48 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e14b      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026cc:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ed      	bne.n	80026b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026da:	7ffb      	ldrb	r3, [r7, #31]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	4a77      	ldr	r2, [pc, #476]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d03c      	beq.n	8002772 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01c      	beq.n	800273a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002700:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002706:	4a6f      	ldr	r2, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7ff f99a 	bl	8001a48 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002718:	f7ff f996 	bl	8001a48 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e11c      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800272a:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800272c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <HAL_RCC_OscConfig+0x5cc>
 8002738:	e01b      	b.n	8002772 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273a:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800273c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002740:	4a60      	ldr	r2, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7ff f97d 	bl	8001a48 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002752:	f7ff f979 	bl	8001a48 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0ff      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002764:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ef      	bne.n	8002752 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80f3 	beq.w	8002962 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	2b02      	cmp	r3, #2
 8002782:	f040 80c9 	bne.w	8002918 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002786:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0203 	and.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	429a      	cmp	r2, r3
 8002798:	d12c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	3b01      	subs	r3, #1
 80027a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d123      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d11b      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d113      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d109      	bne.n	80027f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d06b      	beq.n	80028cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d062      	beq.n	80028c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0ac      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800280a:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002814:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002816:	f7ff f917 	bl	8001a48 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7ff f913 	bl	8001a48 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e099      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCC_OscConfig+0x77c>)
 8002842:	4013      	ands	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800284c:	3a01      	subs	r2, #1
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002856:	0212      	lsls	r2, r2, #8
 8002858:	4311      	orrs	r1, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800285e:	0852      	lsrs	r2, r2, #1
 8002860:	3a01      	subs	r2, #1
 8002862:	0552      	lsls	r2, r2, #21
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	0652      	lsls	r2, r2, #25
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002876:	06d2      	lsls	r2, r2, #27
 8002878:	430a      	orrs	r2, r1
 800287a:	4912      	ldr	r1, [pc, #72]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002898:	f7ff f8d6 	bl	8001a48 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7ff f8d2 	bl	8001a48 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e058      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <HAL_RCC_OscConfig+0x778>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028be:	e050      	b.n	8002962 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e04f      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x820>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d144      	bne.n	8002962 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x820>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_RCC_OscConfig+0x820>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x820>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a20      	ldr	r2, [pc, #128]	; (800296c <HAL_RCC_OscConfig+0x820>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f0:	f7ff f8aa 	bl	8001a48 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff f8a6 	bl	8001a48 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e02c      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_RCC_OscConfig+0x820>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x7ac>
 8002916:	e024      	b.n	8002962 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d01f      	beq.n	800295e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_RCC_OscConfig+0x820>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_RCC_OscConfig+0x820>)
 8002924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7ff f88d 	bl	8001a48 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002932:	f7ff f889 	bl	8001a48 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x820>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x820>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4905      	ldr	r1, [pc, #20]	; (800296c <HAL_RCC_OscConfig+0x820>)
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x824>)
 8002958:	4013      	ands	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e001      	b.n	8002962 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	feeefffc 	.word	0xfeeefffc

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0e7      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 0207 	bic.w	r2, r3, #7
 800299e:	4970      	ldr	r1, [pc, #448]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0cf      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d908      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4960      	ldr	r1, [pc, #384]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d04c      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d121      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0a6      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d115      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e09a      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e08e      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e086      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4943      	ldr	r1, [pc, #268]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fff4 	bl	8001a48 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe fff0 	bl	8001a48 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e06e      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d208      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	492b      	ldr	r1, [pc, #172]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aba:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d210      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 0207 	bic.w	r2, r3, #7
 8002ad0:	4923      	ldr	r1, [pc, #140]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e036      	b.n	8002b58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4918      	ldr	r1, [pc, #96]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4910      	ldr	r1, [pc, #64]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b28:	f000 f824 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	490b      	ldr	r1, [pc, #44]	; (8002b68 <HAL_RCC_ClockConfig+0x1f4>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1f8>)
 8002b46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1fc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe ff2b 	bl	80019a8 <HAL_InitTick>
 8002b52:	4603      	mov	r3, r0
 8002b54:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b56:	7afb      	ldrb	r3, [r7, #11]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	080088b0 	.word	0x080088b0
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d121      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d11e      	bne.n	8002be6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ba8:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e005      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e004      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bf8:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d134      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c02:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d003      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0xac>
 8002c18:	e005      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c1c:	617b      	str	r3, [r7, #20]
      break;
 8002c1e:	e005      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	617b      	str	r3, [r7, #20]
      break;
 8002c24:	e002      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	617b      	str	r3, [r7, #20]
      break;
 8002c2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	3301      	adds	r3, #1
 8002c38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	fb03 f202 	mul.w	r2, r3, r2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	0e5b      	lsrs	r3, r3, #25
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	080088c8 	.word	0x080088c8
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4904      	ldr	r1, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	080088c0 	.word	0x080088c0

08002cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cd4:	f7ff ffda 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	0adb      	lsrs	r3, r3, #11
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	080088c0 	.word	0x080088c0

08002cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d08:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d14:	f7ff f9b6 	bl	8002084 <HAL_PWREx_GetVoltageRange>
 8002d18:	6178      	str	r0, [r7, #20]
 8002d1a:	e014      	b.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6593      	str	r3, [r2, #88]	; 0x58
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d34:	f7ff f9a6 	bl	8002084 <HAL_PWREx_GetVoltageRange>
 8002d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4c:	d10b      	bne.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d919      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2ba0      	cmp	r3, #160	; 0xa0
 8002d58:	d902      	bls.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	e013      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	e010      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d902      	bls.n	8002d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e00a      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d102      	bne.n	8002d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d78:	2302      	movs	r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e004      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d101      	bne.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d84:	2301      	movs	r3, #1
 8002d86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f023 0207 	bic.w	r2, r3, #7
 8002d90:	4909      	ldr	r1, [pc, #36]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40022000 	.word	0x40022000

08002dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc8:	2300      	movs	r3, #0
 8002dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d031      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de0:	d01a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de6:	d814      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002df0:	d10f      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002df2:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a5c      	ldr	r2, [pc, #368]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9ce 	bl	80031a8 <RCCEx_PLLSAI1_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	74fb      	strb	r3, [r7, #19]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e20:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	494e      	ldr	r1, [pc, #312]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e36:	e001      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 809e 	beq.w	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e4e:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e80:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a39      	ldr	r2, [pc, #228]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fddc 	bl	8001a48 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe fdd8 	bl	8001a48 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d902      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ef      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d15a      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01e      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d019      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fd98 	bl	8001a48 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fd94 	bl	8001a48 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d902      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	74fb      	strb	r3, [r7, #19]
            break;
 8002f32:	e006      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0ec      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	4904      	ldr	r1, [pc, #16]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f5e:	e009      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	74bb      	strb	r3, [r7, #18]
 8002f64:	e006      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f74:	7c7b      	ldrb	r3, [r7, #17]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a89      	ldr	r2, [pc, #548]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f92:	4b84      	ldr	r3, [pc, #528]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f023 0203 	bic.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4980      	ldr	r1, [pc, #512]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb4:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 020c 	bic.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	4978      	ldr	r1, [pc, #480]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	496f      	ldr	r1, [pc, #444]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	4967      	ldr	r1, [pc, #412]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	495e      	ldr	r1, [pc, #376]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304a:	4956      	ldr	r1, [pc, #344]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800305e:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d028      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003080:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4945      	ldr	r1, [pc, #276]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800309e:	d106      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030aa:	60d3      	str	r3, [r2, #12]
 80030ac:	e011      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f872 	bl	80031a8 <RCCEx_PLLSAI1_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d028      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	492d      	ldr	r1, [pc, #180]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fc:	d106      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fe:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003108:	60d3      	str	r3, [r2, #12]
 800310a:	e011      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003114:	d10c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f843 	bl	80031a8 <RCCEx_PLLSAI1_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314a:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315a:	d10c      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f820 	bl	80031a8 <RCCEx_PLLSAI1_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003188:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003190:	4904      	ldr	r1, [pc, #16]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003198:	7cbb      	ldrb	r3, [r7, #18]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000

080031a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d018      	beq.n	80031f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031c2:	4b71      	ldr	r3, [pc, #452]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0203 	and.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d10d      	bne.n	80031ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
       ||
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031da:	4b6b      	ldr	r3, [pc, #428]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d047      	beq.n	800327e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e044      	b.n	800327e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d018      	beq.n	800322e <RCCEx_PLLSAI1_Config+0x86>
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d825      	bhi.n	800324c <RCCEx_PLLSAI1_Config+0xa4>
 8003200:	2b01      	cmp	r3, #1
 8003202:	d002      	beq.n	800320a <RCCEx_PLLSAI1_Config+0x62>
 8003204:	2b02      	cmp	r3, #2
 8003206:	d009      	beq.n	800321c <RCCEx_PLLSAI1_Config+0x74>
 8003208:	e020      	b.n	800324c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800320a:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11d      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321a:	e01a      	b.n	8003252 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800321c:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e013      	b.n	8003256 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10f      	bne.n	800325a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800324a:	e006      	b.n	800325a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e004      	b.n	800325c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800325a:	bf00      	nop
    }

    if(status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10d      	bne.n	800327e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	430b      	orrs	r3, r1
 8003278:	4943      	ldr	r1, [pc, #268]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d17c      	bne.n	800337e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003284:	4b40      	ldr	r3, [pc, #256]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800328a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800328e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fe fbda 	bl	8001a48 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003296:	e009      	b.n	80032ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003298:	f7fe fbd6 	bl	8001a48 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d902      	bls.n	80032ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	73fb      	strb	r3, [r7, #15]
        break;
 80032aa:	e005      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ef      	bne.n	8003298 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d15f      	bne.n	800337e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d110      	bne.n	80032e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80032cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6892      	ldr	r2, [r2, #8]
 80032d4:	0211      	lsls	r1, r2, #8
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	06d2      	lsls	r2, r2, #27
 80032dc:	430a      	orrs	r2, r1
 80032de:	492a      	ldr	r1, [pc, #168]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	610b      	str	r3, [r1, #16]
 80032e4:	e027      	b.n	8003336 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d112      	bne.n	8003312 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ec:	4b26      	ldr	r3, [pc, #152]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6912      	ldr	r2, [r2, #16]
 8003302:	0852      	lsrs	r2, r2, #1
 8003304:	3a01      	subs	r2, #1
 8003306:	0552      	lsls	r2, r2, #21
 8003308:	430a      	orrs	r2, r1
 800330a:	491f      	ldr	r1, [pc, #124]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330c:	4313      	orrs	r3, r2
 800330e:	610b      	str	r3, [r1, #16]
 8003310:	e011      	b.n	8003336 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800331a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	0211      	lsls	r1, r2, #8
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6952      	ldr	r2, [r2, #20]
 8003328:	0852      	lsrs	r2, r2, #1
 800332a:	3a01      	subs	r2, #1
 800332c:	0652      	lsls	r2, r2, #25
 800332e:	430a      	orrs	r2, r1
 8003330:	4915      	ldr	r1, [pc, #84]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003332:	4313      	orrs	r3, r2
 8003334:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003340:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fb81 	bl	8001a48 <HAL_GetTick>
 8003346:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003348:	e009      	b.n	800335e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800334a:	f7fe fb7d 	bl	8001a48 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d902      	bls.n	800335e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	73fb      	strb	r3, [r7, #15]
          break;
 800335c:	e005      	b.n	800336a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ef      	beq.n	800334a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d106      	bne.n	800337e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000

0800338c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e040      	b.n	8003420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe f8fa 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fc94 	bl	8003cf8 <UART_SetConfig>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e022      	b.n	8003420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 feb4 	bl	8004150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 ff3b 	bl	8004294 <UART_CheckIdleState>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343c:	2b20      	cmp	r3, #32
 800343e:	f040 8082 	bne.w	8003546 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_Transmit+0x26>
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07a      	b.n	8003548 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_UART_Transmit+0x38>
 800345c:	2302      	movs	r3, #2
 800345e:	e073      	b.n	8003548 <HAL_UART_Transmit+0x120>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2221      	movs	r2, #33	; 0x21
 8003474:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003476:	f7fe fae7 	bl	8001a48 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	88fa      	ldrh	r2, [r7, #6]
 8003488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d108      	bne.n	80034a8 <HAL_UART_Transmit+0x80>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e003      	b.n	80034b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034b8:	e02d      	b.n	8003516 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 ff2e 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e039      	b.n	8003548 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e6:	b292      	uxth	r2, r2
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3302      	adds	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	e008      	b.n	8003504 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b292      	uxth	r2, r2
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1cb      	bne.n	80034ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fefa 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e005      	b.n	8003548 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003564:	2b20      	cmp	r3, #32
 8003566:	f040 80bf 	bne.w	80036e8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_Receive+0x26>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0b7      	b.n	80036ea <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_UART_Receive+0x38>
 8003584:	2302      	movs	r3, #2
 8003586:	e0b0      	b.n	80036ea <HAL_UART_Receive+0x19a>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2222      	movs	r2, #34	; 0x22
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a4:	f7fe fa50 	bl	8001a48 <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c2:	d10e      	bne.n	80035e2 <HAL_UART_Receive+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_UART_Receive+0x88>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d6:	e02d      	b.n	8003634 <HAL_UART_Receive+0xe4>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	22ff      	movs	r2, #255	; 0xff
 80035dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035e0:	e028      	b.n	8003634 <HAL_UART_Receive+0xe4>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_UART_Receive+0xb6>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_UART_Receive+0xac>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035fa:	e01b      	b.n	8003634 <HAL_UART_Receive+0xe4>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	227f      	movs	r2, #127	; 0x7f
 8003600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003604:	e016      	b.n	8003634 <HAL_UART_Receive+0xe4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360e:	d10d      	bne.n	800362c <HAL_UART_Receive+0xdc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <HAL_UART_Receive+0xd2>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	227f      	movs	r2, #127	; 0x7f
 800361c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003620:	e008      	b.n	8003634 <HAL_UART_Receive+0xe4>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	223f      	movs	r2, #63	; 0x3f
 8003626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800362a:	e003      	b.n	8003634 <HAL_UART_Receive+0xe4>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800363a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d108      	bne.n	8003658 <HAL_UART_Receive+0x108>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e003      	b.n	8003660 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003668:	e033      	b.n	80036d2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2120      	movs	r1, #32
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fe56 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e032      	b.n	80036ea <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10c      	bne.n	80036a4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003690:	b29a      	uxth	r2, r3
 8003692:	8a7b      	ldrh	r3, [r7, #18]
 8003694:	4013      	ands	r3, r2
 8003696:	b29a      	uxth	r2, r3
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	3302      	adds	r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e00d      	b.n	80036c0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	8a7b      	ldrh	r3, [r7, #18]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4013      	ands	r3, r2
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1c5      	bne.n	800366a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b0ba      	sub	sp, #232	; 0xe8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800371a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800371e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003722:	4013      	ands	r3, r2
 8003724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d115      	bne.n	800375c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 82a6 	beq.w	8003c9e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      }
      return;
 800375a:	e2a0      	b.n	8003c9e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800375c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8117 	beq.w	8003994 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003772:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003776:	4b85      	ldr	r3, [pc, #532]	; (800398c <HAL_UART_IRQHandler+0x298>)
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 810a 	beq.w	8003994 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d011      	beq.n	80037b0 <HAL_UART_IRQHandler+0xbc>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d011      	beq.n	80037e0 <HAL_UART_IRQHandler+0xec>
 80037bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2202      	movs	r2, #2
 80037ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_UART_IRQHandler+0x11c>
 80037ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	f043 0202 	orr.w	r2, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_UART_IRQHandler+0x18a>
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00c      	beq.n	800387e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 820c 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d005      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04f      	beq.n	8003976 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fde9 	bl	80044ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d141      	bne.n	800396e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800391a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800392e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1d9      	bne.n	80038ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	2b00      	cmp	r3, #0
 800393c:	d013      	beq.n	8003966 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <HAL_UART_IRQHandler+0x29c>)
 8003944:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe f9d7 	bl	8001cfe <HAL_DMA_Abort_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d017      	beq.n	8003986 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e00f      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9b0 	bl	8003ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e00b      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9ac 	bl	8003ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e007      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9a8 	bl	8003ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003984:	e18d      	b.n	8003ca2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	bf00      	nop
    return;
 8003988:	e18b      	b.n	8003ca2 <HAL_UART_IRQHandler+0x5ae>
 800398a:	bf00      	nop
 800398c:	04000120 	.word	0x04000120
 8003990:	08004575 	.word	0x08004575

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 8146 	bne.w	8003c2a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 813f 	beq.w	8003c2a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8138 	beq.w	8003c2a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2210      	movs	r2, #16
 80039c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	f040 80b4 	bne.w	8003b3a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 815f 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039f2:	429a      	cmp	r2, r3
 80039f4:	f080 8157 	bcs.w	8003ca6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 8085 	bne.w	8003b1e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1da      	bne.n	8003a14 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e1      	bne.n	8003a5e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e4      	bne.n	8003ade <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe f8b2 	bl	8001c82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8d4 	bl	8003ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b38:	e0b5      	b.n	8003ca6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80a7 	beq.w	8003caa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a2 	beq.w	8003caa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e4      	bne.n	8003b66 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	623b      	str	r3, [r7, #32]
   return(result);
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3308      	adds	r3, #8
 8003bbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bc0:	633a      	str	r2, [r7, #48]	; 0x30
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0310 	bic.w	r3, r3, #16
 8003bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69b9      	ldr	r1, [r7, #24]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	617b      	str	r3, [r7, #20]
   return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e4      	bne.n	8003be6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f85c 	bl	8003ce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c28:	e03f      	b.n	8003caa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <HAL_UART_IRQHandler+0x560>
 8003c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fcd1 	bl	80045f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c52:	e02d      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01c      	beq.n	8003cae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
    }
    return;
 8003c7c:	e017      	b.n	8003cae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
 8003c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fc82 	bl	80045a0 <UART_EndTransmit_IT>
    return;
 8003c9c:	e008      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003c9e:	bf00      	nop
 8003ca0:	e006      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ca2:	bf00      	nop
 8003ca4:	e004      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003cae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cb0:	37e8      	adds	r7, #232	; 0xe8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop

08003cb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b08a      	sub	sp, #40	; 0x28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4bb4      	ldr	r3, [pc, #720]	; (8003ff8 <UART_SetConfig+0x300>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4aa9      	ldr	r2, [pc, #676]	; (8003ffc <UART_SetConfig+0x304>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	4313      	orrs	r3, r2
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4aa0      	ldr	r2, [pc, #640]	; (8004000 <UART_SetConfig+0x308>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d126      	bne.n	8003dd0 <UART_SetConfig+0xd8>
 8003d82:	4ba0      	ldr	r3, [pc, #640]	; (8004004 <UART_SetConfig+0x30c>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d81b      	bhi.n	8003dc8 <UART_SetConfig+0xd0>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0xa0>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db9 	.word	0x08003db9
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dc1 	.word	0x08003dc1
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dae:	e080      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003db0:	2302      	movs	r3, #2
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db6:	e07c      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003db8:	2304      	movs	r3, #4
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e078      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e074      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e070      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a8c      	ldr	r2, [pc, #560]	; (8004008 <UART_SetConfig+0x310>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d138      	bne.n	8003e4c <UART_SetConfig+0x154>
 8003dda:	4b8a      	ldr	r3, [pc, #552]	; (8004004 <UART_SetConfig+0x30c>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f003 030c 	and.w	r3, r3, #12
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d82d      	bhi.n	8003e44 <UART_SetConfig+0x14c>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0xf8>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e45 	.word	0x08003e45
 8003df8:	08003e45 	.word	0x08003e45
 8003dfc:	08003e45 	.word	0x08003e45
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e45 	.word	0x08003e45
 8003e08:	08003e45 	.word	0x08003e45
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e2d 	.word	0x08003e2d
 8003e14:	08003e45 	.word	0x08003e45
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e3d 	.word	0x08003e3d
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e042      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e03e      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e03a      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e036      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e032      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6a      	ldr	r2, [pc, #424]	; (8003ffc <UART_SetConfig+0x304>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d12a      	bne.n	8003eac <UART_SetConfig+0x1b4>
 8003e56:	4b6b      	ldr	r3, [pc, #428]	; (8004004 <UART_SetConfig+0x30c>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e64:	d01a      	beq.n	8003e9c <UART_SetConfig+0x1a4>
 8003e66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e6a:	d81b      	bhi.n	8003ea4 <UART_SetConfig+0x1ac>
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e70:	d00c      	beq.n	8003e8c <UART_SetConfig+0x194>
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d815      	bhi.n	8003ea4 <UART_SetConfig+0x1ac>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <UART_SetConfig+0x18c>
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d008      	beq.n	8003e94 <UART_SetConfig+0x19c>
 8003e82:	e00f      	b.n	8003ea4 <UART_SetConfig+0x1ac>
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8a:	e012      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e92:	e00e      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e94:	2304      	movs	r3, #4
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9a:	e00a      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e006      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eaa:	e002      	b.n	8003eb2 <UART_SetConfig+0x1ba>
 8003eac:	2310      	movs	r3, #16
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a51      	ldr	r2, [pc, #324]	; (8003ffc <UART_SetConfig+0x304>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d17a      	bne.n	8003fb2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d824      	bhi.n	8003f0e <UART_SetConfig+0x216>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x1d4>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003eff 	.word	0x08003eff
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f0f 	.word	0x08003f0f
 8003eec:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe fed8 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
        break;
 8003ef6:	e010      	b.n	8003f1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b44      	ldr	r3, [pc, #272]	; (800400c <UART_SetConfig+0x314>)
 8003efa:	61fb      	str	r3, [r7, #28]
        break;
 8003efc:	e00d      	b.n	8003f1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe fe39 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8003f02:	61f8      	str	r0, [r7, #28]
        break;
 8003f04:	e009      	b.n	8003f1a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	61fb      	str	r3, [r7, #28]
        break;
 8003f0c:	e005      	b.n	8003f1a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8107 	beq.w	8004130 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d305      	bcc.n	8003f3e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d903      	bls.n	8003f46 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f44:	e0f4      	b.n	8004130 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	022b      	lsls	r3, r5, #8
 8003f58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f5c:	0222      	lsls	r2, r4, #8
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	6849      	ldr	r1, [r1, #4]
 8003f62:	0849      	lsrs	r1, r1, #1
 8003f64:	2000      	movs	r0, #0
 8003f66:	4688      	mov	r8, r1
 8003f68:	4681      	mov	r9, r0
 8003f6a:	eb12 0a08 	adds.w	sl, r2, r8
 8003f6e:	eb43 0b09 	adc.w	fp, r3, r9
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	603b      	str	r3, [r7, #0]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f80:	4650      	mov	r0, sl
 8003f82:	4659      	mov	r1, fp
 8003f84:	f7fc fe40 	bl	8000c08 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f96:	d308      	bcc.n	8003faa <UART_SetConfig+0x2b2>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9e:	d204      	bcs.n	8003faa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	e0c2      	b.n	8004130 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fb0:	e0be      	b.n	8004130 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d16a      	bne.n	8004092 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d834      	bhi.n	800402e <UART_SetConfig+0x336>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x2d4>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	0800402f 	.word	0x0800402f
 8003fdc:	0800401f 	.word	0x0800401f
 8003fe0:	0800402f 	.word	0x0800402f
 8003fe4:	0800402f 	.word	0x0800402f
 8003fe8:	0800402f 	.word	0x0800402f
 8003fec:	08004027 	.word	0x08004027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7fe fe58 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	61f8      	str	r0, [r7, #28]
        break;
 8003ff6:	e020      	b.n	800403a <UART_SetConfig+0x342>
 8003ff8:	efff69f3 	.word	0xefff69f3
 8003ffc:	40008000 	.word	0x40008000
 8004000:	40013800 	.word	0x40013800
 8004004:	40021000 	.word	0x40021000
 8004008:	40004400 	.word	0x40004400
 800400c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004010:	f7fe fe5e 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 8004014:	61f8      	str	r0, [r7, #28]
        break;
 8004016:	e010      	b.n	800403a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <UART_SetConfig+0x454>)
 800401a:	61fb      	str	r3, [r7, #28]
        break;
 800401c:	e00d      	b.n	800403a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401e:	f7fe fda9 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8004022:	61f8      	str	r0, [r7, #28]
        break;
 8004024:	e009      	b.n	800403a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402a:	61fb      	str	r3, [r7, #28]
        break;
 800402c:	e005      	b.n	800403a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004038:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d077      	beq.n	8004130 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	005a      	lsls	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	441a      	add	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b0f      	cmp	r3, #15
 800405a:	d916      	bls.n	800408a <UART_SetConfig+0x392>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004062:	d212      	bcs.n	800408a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f023 030f 	bic.w	r3, r3, #15
 800406c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	b29a      	uxth	r2, r3
 800407a:	8afb      	ldrh	r3, [r7, #22]
 800407c:	4313      	orrs	r3, r2
 800407e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	8afa      	ldrh	r2, [r7, #22]
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	e052      	b.n	8004130 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004090:	e04e      	b.n	8004130 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004096:	2b08      	cmp	r3, #8
 8004098:	d827      	bhi.n	80040ea <UART_SetConfig+0x3f2>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x3a8>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	080040cd 	.word	0x080040cd
 80040a8:	080040d5 	.word	0x080040d5
 80040ac:	080040eb 	.word	0x080040eb
 80040b0:	080040db 	.word	0x080040db
 80040b4:	080040eb 	.word	0x080040eb
 80040b8:	080040eb 	.word	0x080040eb
 80040bc:	080040eb 	.word	0x080040eb
 80040c0:	080040e3 	.word	0x080040e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7fe fdee 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 80040c8:	61f8      	str	r0, [r7, #28]
        break;
 80040ca:	e014      	b.n	80040f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fe fe00 	bl	8002cd0 <HAL_RCC_GetPCLK2Freq>
 80040d0:	61f8      	str	r0, [r7, #28]
        break;
 80040d2:	e010      	b.n	80040f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <UART_SetConfig+0x454>)
 80040d6:	61fb      	str	r3, [r7, #28]
        break;
 80040d8:	e00d      	b.n	80040f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe fd4b 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 80040de:	61f8      	str	r0, [r7, #28]
        break;
 80040e0:	e009      	b.n	80040f6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e6:	61fb      	str	r3, [r7, #28]
        break;
 80040e8:	e005      	b.n	80040f6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040f4:	bf00      	nop
    }

    if (pclk != 0U)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	085a      	lsrs	r2, r3, #1
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	441a      	add	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	d909      	bls.n	800412a <UART_SetConfig+0x432>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411c:	d205      	bcs.n	800412a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60da      	str	r2, [r3, #12]
 8004128:	e002      	b.n	8004130 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800413c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004140:	4618      	mov	r0, r3
 8004142:	3728      	adds	r7, #40	; 0x28
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	00f42400 	.word	0x00f42400

08004150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01a      	beq.n	8004266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424e:	d10a      	bne.n	8004266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]
  }
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042a4:	f7fd fbd0 	bl	8001a48 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d10e      	bne.n	80042d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f82d 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e023      	b.n	800431e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d10e      	bne.n	8004302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f817 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e00d      	b.n	800431e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b09c      	sub	sp, #112	; 0x70
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004336:	e0a5      	b.n	8004484 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	f000 80a1 	beq.w	8004484 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fd fb81 	bl	8001a48 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <UART_WaitOnFlagUntilTimeout+0x32>
 8004352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004354:	2b00      	cmp	r3, #0
 8004356:	d13e      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800436c:	667b      	str	r3, [r7, #100]	; 0x64
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004376:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004378:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800437c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e6      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	663b      	str	r3, [r7, #96]	; 0x60
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3308      	adds	r3, #8
 80043a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80043ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e067      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d04f      	beq.n	8004484 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f2:	d147      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
 800441e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	613b      	str	r3, [r7, #16]
   return(result);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	66bb      	str	r3, [r7, #104]	; 0x68
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004450:	623a      	str	r2, [r7, #32]
 8004452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	61bb      	str	r3, [r7, #24]
   return(result);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e010      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	429a      	cmp	r2, r3
 80044a0:	f43f af4a 	beq.w	8004338 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3770      	adds	r7, #112	; 0x70
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b095      	sub	sp, #84	; 0x54
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	643b      	str	r3, [r7, #64]	; 0x40
 80044d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004520:	2b01      	cmp	r3, #1
 8004522:	d118      	bne.n	8004556 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	60bb      	str	r3, [r7, #8]
   return(result);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f023 0310 	bic.w	r3, r3, #16
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6979      	ldr	r1, [r7, #20]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	613b      	str	r3, [r7, #16]
   return(result);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e6      	bne.n	8004524 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004568:	bf00      	nop
 800456a:	3754      	adds	r7, #84	; 0x54
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff fb9a 	bl	8003ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	613b      	str	r3, [r7, #16]
   return(result);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e6      	bne.n	80045a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff fb66 	bl	8003cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <atof>:
 8004608:	2100      	movs	r1, #0
 800460a:	f001 baef 	b.w	8005bec <strtod>
	...

08004610 <__errno>:
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <__errno+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f004 f8a8 	bl	8008784 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08008d9c 	.word	0x08008d9c
 8004658:	08008d9c 	.word	0x08008d9c
 800465c:	08008d9c 	.word	0x08008d9c
 8004660:	08008da0 	.word	0x08008da0

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <__cvt>:
 8004674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	ec55 4b10 	vmov	r4, r5, d0
 800467c:	2d00      	cmp	r5, #0
 800467e:	460e      	mov	r6, r1
 8004680:	4619      	mov	r1, r3
 8004682:	462b      	mov	r3, r5
 8004684:	bfbb      	ittet	lt
 8004686:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800468a:	461d      	movlt	r5, r3
 800468c:	2300      	movge	r3, #0
 800468e:	232d      	movlt	r3, #45	; 0x2d
 8004690:	700b      	strb	r3, [r1, #0]
 8004692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004694:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004698:	4691      	mov	r9, r2
 800469a:	f023 0820 	bic.w	r8, r3, #32
 800469e:	bfbc      	itt	lt
 80046a0:	4622      	movlt	r2, r4
 80046a2:	4614      	movlt	r4, r2
 80046a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046a8:	d005      	beq.n	80046b6 <__cvt+0x42>
 80046aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046ae:	d100      	bne.n	80046b2 <__cvt+0x3e>
 80046b0:	3601      	adds	r6, #1
 80046b2:	2102      	movs	r1, #2
 80046b4:	e000      	b.n	80046b8 <__cvt+0x44>
 80046b6:	2103      	movs	r1, #3
 80046b8:	ab03      	add	r3, sp, #12
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	ab02      	add	r3, sp, #8
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	ec45 4b10 	vmov	d0, r4, r5
 80046c4:	4653      	mov	r3, sl
 80046c6:	4632      	mov	r2, r6
 80046c8:	f001 fb2a 	bl	8005d20 <_dtoa_r>
 80046cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046d0:	4607      	mov	r7, r0
 80046d2:	d102      	bne.n	80046da <__cvt+0x66>
 80046d4:	f019 0f01 	tst.w	r9, #1
 80046d8:	d022      	beq.n	8004720 <__cvt+0xac>
 80046da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046de:	eb07 0906 	add.w	r9, r7, r6
 80046e2:	d110      	bne.n	8004706 <__cvt+0x92>
 80046e4:	783b      	ldrb	r3, [r7, #0]
 80046e6:	2b30      	cmp	r3, #48	; 0x30
 80046e8:	d10a      	bne.n	8004700 <__cvt+0x8c>
 80046ea:	2200      	movs	r2, #0
 80046ec:	2300      	movs	r3, #0
 80046ee:	4620      	mov	r0, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7fc f9f9 	bl	8000ae8 <__aeabi_dcmpeq>
 80046f6:	b918      	cbnz	r0, 8004700 <__cvt+0x8c>
 80046f8:	f1c6 0601 	rsb	r6, r6, #1
 80046fc:	f8ca 6000 	str.w	r6, [sl]
 8004700:	f8da 3000 	ldr.w	r3, [sl]
 8004704:	4499      	add	r9, r3
 8004706:	2200      	movs	r2, #0
 8004708:	2300      	movs	r3, #0
 800470a:	4620      	mov	r0, r4
 800470c:	4629      	mov	r1, r5
 800470e:	f7fc f9eb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004712:	b108      	cbz	r0, 8004718 <__cvt+0xa4>
 8004714:	f8cd 900c 	str.w	r9, [sp, #12]
 8004718:	2230      	movs	r2, #48	; 0x30
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	454b      	cmp	r3, r9
 800471e:	d307      	bcc.n	8004730 <__cvt+0xbc>
 8004720:	9b03      	ldr	r3, [sp, #12]
 8004722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004724:	1bdb      	subs	r3, r3, r7
 8004726:	4638      	mov	r0, r7
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	b004      	add	sp, #16
 800472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	9103      	str	r1, [sp, #12]
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e7f0      	b.n	800471a <__cvt+0xa6>

08004738 <__exponent>:
 8004738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800473a:	4603      	mov	r3, r0
 800473c:	2900      	cmp	r1, #0
 800473e:	bfb8      	it	lt
 8004740:	4249      	neglt	r1, r1
 8004742:	f803 2b02 	strb.w	r2, [r3], #2
 8004746:	bfb4      	ite	lt
 8004748:	222d      	movlt	r2, #45	; 0x2d
 800474a:	222b      	movge	r2, #43	; 0x2b
 800474c:	2909      	cmp	r1, #9
 800474e:	7042      	strb	r2, [r0, #1]
 8004750:	dd2a      	ble.n	80047a8 <__exponent+0x70>
 8004752:	f10d 0407 	add.w	r4, sp, #7
 8004756:	46a4      	mov	ip, r4
 8004758:	270a      	movs	r7, #10
 800475a:	46a6      	mov	lr, r4
 800475c:	460a      	mov	r2, r1
 800475e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004762:	fb07 1516 	mls	r5, r7, r6, r1
 8004766:	3530      	adds	r5, #48	; 0x30
 8004768:	2a63      	cmp	r2, #99	; 0x63
 800476a:	f104 34ff 	add.w	r4, r4, #4294967295
 800476e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004772:	4631      	mov	r1, r6
 8004774:	dcf1      	bgt.n	800475a <__exponent+0x22>
 8004776:	3130      	adds	r1, #48	; 0x30
 8004778:	f1ae 0502 	sub.w	r5, lr, #2
 800477c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004780:	1c44      	adds	r4, r0, #1
 8004782:	4629      	mov	r1, r5
 8004784:	4561      	cmp	r1, ip
 8004786:	d30a      	bcc.n	800479e <__exponent+0x66>
 8004788:	f10d 0209 	add.w	r2, sp, #9
 800478c:	eba2 020e 	sub.w	r2, r2, lr
 8004790:	4565      	cmp	r5, ip
 8004792:	bf88      	it	hi
 8004794:	2200      	movhi	r2, #0
 8004796:	4413      	add	r3, r2
 8004798:	1a18      	subs	r0, r3, r0
 800479a:	b003      	add	sp, #12
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80047a6:	e7ed      	b.n	8004784 <__exponent+0x4c>
 80047a8:	2330      	movs	r3, #48	; 0x30
 80047aa:	3130      	adds	r1, #48	; 0x30
 80047ac:	7083      	strb	r3, [r0, #2]
 80047ae:	70c1      	strb	r1, [r0, #3]
 80047b0:	1d03      	adds	r3, r0, #4
 80047b2:	e7f1      	b.n	8004798 <__exponent+0x60>

080047b4 <_printf_float>:
 80047b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b8:	ed2d 8b02 	vpush	{d8}
 80047bc:	b08d      	sub	sp, #52	; 0x34
 80047be:	460c      	mov	r4, r1
 80047c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047c4:	4616      	mov	r6, r2
 80047c6:	461f      	mov	r7, r3
 80047c8:	4605      	mov	r5, r0
 80047ca:	f002 fcfb 	bl	80071c4 <_localeconv_r>
 80047ce:	f8d0 a000 	ldr.w	sl, [r0]
 80047d2:	4650      	mov	r0, sl
 80047d4:	f7fb fd06 	bl	80001e4 <strlen>
 80047d8:	2300      	movs	r3, #0
 80047da:	930a      	str	r3, [sp, #40]	; 0x28
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	f8d8 3000 	ldr.w	r3, [r8]
 80047e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047e8:	3307      	adds	r3, #7
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	f103 0208 	add.w	r2, r3, #8
 80047f2:	f8c8 2000 	str.w	r2, [r8]
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004806:	9307      	str	r3, [sp, #28]
 8004808:	f8cd 8018 	str.w	r8, [sp, #24]
 800480c:	ee08 0a10 	vmov	s16, r0
 8004810:	4b9f      	ldr	r3, [pc, #636]	; (8004a90 <_printf_float+0x2dc>)
 8004812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	f7fc f997 	bl	8000b4c <__aeabi_dcmpun>
 800481e:	bb88      	cbnz	r0, 8004884 <_printf_float+0xd0>
 8004820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004824:	4b9a      	ldr	r3, [pc, #616]	; (8004a90 <_printf_float+0x2dc>)
 8004826:	f04f 32ff 	mov.w	r2, #4294967295
 800482a:	f7fc f971 	bl	8000b10 <__aeabi_dcmple>
 800482e:	bb48      	cbnz	r0, 8004884 <_printf_float+0xd0>
 8004830:	2200      	movs	r2, #0
 8004832:	2300      	movs	r3, #0
 8004834:	4640      	mov	r0, r8
 8004836:	4649      	mov	r1, r9
 8004838:	f7fc f960 	bl	8000afc <__aeabi_dcmplt>
 800483c:	b110      	cbz	r0, 8004844 <_printf_float+0x90>
 800483e:	232d      	movs	r3, #45	; 0x2d
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004844:	4b93      	ldr	r3, [pc, #588]	; (8004a94 <_printf_float+0x2e0>)
 8004846:	4894      	ldr	r0, [pc, #592]	; (8004a98 <_printf_float+0x2e4>)
 8004848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800484c:	bf94      	ite	ls
 800484e:	4698      	movls	r8, r3
 8004850:	4680      	movhi	r8, r0
 8004852:	2303      	movs	r3, #3
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	9b05      	ldr	r3, [sp, #20]
 8004858:	f023 0204 	bic.w	r2, r3, #4
 800485c:	6022      	str	r2, [r4, #0]
 800485e:	f04f 0900 	mov.w	r9, #0
 8004862:	9700      	str	r7, [sp, #0]
 8004864:	4633      	mov	r3, r6
 8004866:	aa0b      	add	r2, sp, #44	; 0x2c
 8004868:	4621      	mov	r1, r4
 800486a:	4628      	mov	r0, r5
 800486c:	f000 f9d8 	bl	8004c20 <_printf_common>
 8004870:	3001      	adds	r0, #1
 8004872:	f040 8090 	bne.w	8004996 <_printf_float+0x1e2>
 8004876:	f04f 30ff 	mov.w	r0, #4294967295
 800487a:	b00d      	add	sp, #52	; 0x34
 800487c:	ecbd 8b02 	vpop	{d8}
 8004880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	4640      	mov	r0, r8
 800488a:	4649      	mov	r1, r9
 800488c:	f7fc f95e 	bl	8000b4c <__aeabi_dcmpun>
 8004890:	b140      	cbz	r0, 80048a4 <_printf_float+0xf0>
 8004892:	464b      	mov	r3, r9
 8004894:	2b00      	cmp	r3, #0
 8004896:	bfbc      	itt	lt
 8004898:	232d      	movlt	r3, #45	; 0x2d
 800489a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800489e:	487f      	ldr	r0, [pc, #508]	; (8004a9c <_printf_float+0x2e8>)
 80048a0:	4b7f      	ldr	r3, [pc, #508]	; (8004aa0 <_printf_float+0x2ec>)
 80048a2:	e7d1      	b.n	8004848 <_printf_float+0x94>
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048aa:	9206      	str	r2, [sp, #24]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	d13f      	bne.n	8004930 <_printf_float+0x17c>
 80048b0:	2306      	movs	r3, #6
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	9b05      	ldr	r3, [sp, #20]
 80048b6:	6861      	ldr	r1, [r4, #4]
 80048b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048bc:	2300      	movs	r3, #0
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	ab0a      	add	r3, sp, #40	; 0x28
 80048c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048c6:	ab09      	add	r3, sp, #36	; 0x24
 80048c8:	ec49 8b10 	vmov	d0, r8, r9
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	6022      	str	r2, [r4, #0]
 80048d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048d4:	4628      	mov	r0, r5
 80048d6:	f7ff fecd 	bl	8004674 <__cvt>
 80048da:	9b06      	ldr	r3, [sp, #24]
 80048dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048de:	2b47      	cmp	r3, #71	; 0x47
 80048e0:	4680      	mov	r8, r0
 80048e2:	d108      	bne.n	80048f6 <_printf_float+0x142>
 80048e4:	1cc8      	adds	r0, r1, #3
 80048e6:	db02      	blt.n	80048ee <_printf_float+0x13a>
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	4299      	cmp	r1, r3
 80048ec:	dd41      	ble.n	8004972 <_printf_float+0x1be>
 80048ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80048f2:	fa5f fb8b 	uxtb.w	fp, fp
 80048f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048fa:	d820      	bhi.n	800493e <_printf_float+0x18a>
 80048fc:	3901      	subs	r1, #1
 80048fe:	465a      	mov	r2, fp
 8004900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004904:	9109      	str	r1, [sp, #36]	; 0x24
 8004906:	f7ff ff17 	bl	8004738 <__exponent>
 800490a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800490c:	1813      	adds	r3, r2, r0
 800490e:	2a01      	cmp	r2, #1
 8004910:	4681      	mov	r9, r0
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	dc02      	bgt.n	800491c <_printf_float+0x168>
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	07d2      	lsls	r2, r2, #31
 800491a:	d501      	bpl.n	8004920 <_printf_float+0x16c>
 800491c:	3301      	adds	r3, #1
 800491e:	6123      	str	r3, [r4, #16]
 8004920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004924:	2b00      	cmp	r3, #0
 8004926:	d09c      	beq.n	8004862 <_printf_float+0xae>
 8004928:	232d      	movs	r3, #45	; 0x2d
 800492a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800492e:	e798      	b.n	8004862 <_printf_float+0xae>
 8004930:	9a06      	ldr	r2, [sp, #24]
 8004932:	2a47      	cmp	r2, #71	; 0x47
 8004934:	d1be      	bne.n	80048b4 <_printf_float+0x100>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1bc      	bne.n	80048b4 <_printf_float+0x100>
 800493a:	2301      	movs	r3, #1
 800493c:	e7b9      	b.n	80048b2 <_printf_float+0xfe>
 800493e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004942:	d118      	bne.n	8004976 <_printf_float+0x1c2>
 8004944:	2900      	cmp	r1, #0
 8004946:	6863      	ldr	r3, [r4, #4]
 8004948:	dd0b      	ble.n	8004962 <_printf_float+0x1ae>
 800494a:	6121      	str	r1, [r4, #16]
 800494c:	b913      	cbnz	r3, 8004954 <_printf_float+0x1a0>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	07d0      	lsls	r0, r2, #31
 8004952:	d502      	bpl.n	800495a <_printf_float+0x1a6>
 8004954:	3301      	adds	r3, #1
 8004956:	440b      	add	r3, r1
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	65a1      	str	r1, [r4, #88]	; 0x58
 800495c:	f04f 0900 	mov.w	r9, #0
 8004960:	e7de      	b.n	8004920 <_printf_float+0x16c>
 8004962:	b913      	cbnz	r3, 800496a <_printf_float+0x1b6>
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	07d2      	lsls	r2, r2, #31
 8004968:	d501      	bpl.n	800496e <_printf_float+0x1ba>
 800496a:	3302      	adds	r3, #2
 800496c:	e7f4      	b.n	8004958 <_printf_float+0x1a4>
 800496e:	2301      	movs	r3, #1
 8004970:	e7f2      	b.n	8004958 <_printf_float+0x1a4>
 8004972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004978:	4299      	cmp	r1, r3
 800497a:	db05      	blt.n	8004988 <_printf_float+0x1d4>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	6121      	str	r1, [r4, #16]
 8004980:	07d8      	lsls	r0, r3, #31
 8004982:	d5ea      	bpl.n	800495a <_printf_float+0x1a6>
 8004984:	1c4b      	adds	r3, r1, #1
 8004986:	e7e7      	b.n	8004958 <_printf_float+0x1a4>
 8004988:	2900      	cmp	r1, #0
 800498a:	bfd4      	ite	le
 800498c:	f1c1 0202 	rsble	r2, r1, #2
 8004990:	2201      	movgt	r2, #1
 8004992:	4413      	add	r3, r2
 8004994:	e7e0      	b.n	8004958 <_printf_float+0x1a4>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	055a      	lsls	r2, r3, #21
 800499a:	d407      	bmi.n	80049ac <_printf_float+0x1f8>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	4642      	mov	r2, r8
 80049a0:	4631      	mov	r1, r6
 80049a2:	4628      	mov	r0, r5
 80049a4:	47b8      	blx	r7
 80049a6:	3001      	adds	r0, #1
 80049a8:	d12c      	bne.n	8004a04 <_printf_float+0x250>
 80049aa:	e764      	b.n	8004876 <_printf_float+0xc2>
 80049ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049b0:	f240 80e0 	bls.w	8004b74 <_printf_float+0x3c0>
 80049b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b8:	2200      	movs	r2, #0
 80049ba:	2300      	movs	r3, #0
 80049bc:	f7fc f894 	bl	8000ae8 <__aeabi_dcmpeq>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d034      	beq.n	8004a2e <_printf_float+0x27a>
 80049c4:	4a37      	ldr	r2, [pc, #220]	; (8004aa4 <_printf_float+0x2f0>)
 80049c6:	2301      	movs	r3, #1
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af51 	beq.w	8004876 <_printf_float+0xc2>
 80049d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d8:	429a      	cmp	r2, r3
 80049da:	db02      	blt.n	80049e2 <_printf_float+0x22e>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	07d8      	lsls	r0, r3, #31
 80049e0:	d510      	bpl.n	8004a04 <_printf_float+0x250>
 80049e2:	ee18 3a10 	vmov	r3, s16
 80049e6:	4652      	mov	r2, sl
 80049e8:	4631      	mov	r1, r6
 80049ea:	4628      	mov	r0, r5
 80049ec:	47b8      	blx	r7
 80049ee:	3001      	adds	r0, #1
 80049f0:	f43f af41 	beq.w	8004876 <_printf_float+0xc2>
 80049f4:	f04f 0800 	mov.w	r8, #0
 80049f8:	f104 091a 	add.w	r9, r4, #26
 80049fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049fe:	3b01      	subs	r3, #1
 8004a00:	4543      	cmp	r3, r8
 8004a02:	dc09      	bgt.n	8004a18 <_printf_float+0x264>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	079b      	lsls	r3, r3, #30
 8004a08:	f100 8105 	bmi.w	8004c16 <_printf_float+0x462>
 8004a0c:	68e0      	ldr	r0, [r4, #12]
 8004a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a10:	4298      	cmp	r0, r3
 8004a12:	bfb8      	it	lt
 8004a14:	4618      	movlt	r0, r3
 8004a16:	e730      	b.n	800487a <_printf_float+0xc6>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	464a      	mov	r2, r9
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b8      	blx	r7
 8004a22:	3001      	adds	r0, #1
 8004a24:	f43f af27 	beq.w	8004876 <_printf_float+0xc2>
 8004a28:	f108 0801 	add.w	r8, r8, #1
 8004a2c:	e7e6      	b.n	80049fc <_printf_float+0x248>
 8004a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	dc39      	bgt.n	8004aa8 <_printf_float+0x2f4>
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <_printf_float+0x2f0>)
 8004a36:	2301      	movs	r3, #1
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	f43f af19 	beq.w	8004876 <_printf_float+0xc2>
 8004a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	d102      	bne.n	8004a52 <_printf_float+0x29e>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	d5d8      	bpl.n	8004a04 <_printf_float+0x250>
 8004a52:	ee18 3a10 	vmov	r3, s16
 8004a56:	4652      	mov	r2, sl
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f af09 	beq.w	8004876 <_printf_float+0xc2>
 8004a64:	f04f 0900 	mov.w	r9, #0
 8004a68:	f104 0a1a 	add.w	sl, r4, #26
 8004a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6e:	425b      	negs	r3, r3
 8004a70:	454b      	cmp	r3, r9
 8004a72:	dc01      	bgt.n	8004a78 <_printf_float+0x2c4>
 8004a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a76:	e792      	b.n	800499e <_printf_float+0x1ea>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4652      	mov	r2, sl
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4628      	mov	r0, r5
 8004a80:	47b8      	blx	r7
 8004a82:	3001      	adds	r0, #1
 8004a84:	f43f aef7 	beq.w	8004876 <_printf_float+0xc2>
 8004a88:	f109 0901 	add.w	r9, r9, #1
 8004a8c:	e7ee      	b.n	8004a6c <_printf_float+0x2b8>
 8004a8e:	bf00      	nop
 8004a90:	7fefffff 	.word	0x7fefffff
 8004a94:	080088fc 	.word	0x080088fc
 8004a98:	08008900 	.word	0x08008900
 8004a9c:	08008908 	.word	0x08008908
 8004aa0:	08008904 	.word	0x08008904
 8004aa4:	0800890c 	.word	0x0800890c
 8004aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aac:	429a      	cmp	r2, r3
 8004aae:	bfa8      	it	ge
 8004ab0:	461a      	movge	r2, r3
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	4691      	mov	r9, r2
 8004ab6:	dc37      	bgt.n	8004b28 <_printf_float+0x374>
 8004ab8:	f04f 0b00 	mov.w	fp, #0
 8004abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ac0:	f104 021a 	add.w	r2, r4, #26
 8004ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	eba3 0309 	sub.w	r3, r3, r9
 8004acc:	455b      	cmp	r3, fp
 8004ace:	dc33      	bgt.n	8004b38 <_printf_float+0x384>
 8004ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	db3b      	blt.n	8004b50 <_printf_float+0x39c>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	07da      	lsls	r2, r3, #31
 8004adc:	d438      	bmi.n	8004b50 <_printf_float+0x39c>
 8004ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae0:	9a05      	ldr	r2, [sp, #20]
 8004ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ae4:	1a9a      	subs	r2, r3, r2
 8004ae6:	eba3 0901 	sub.w	r9, r3, r1
 8004aea:	4591      	cmp	r9, r2
 8004aec:	bfa8      	it	ge
 8004aee:	4691      	movge	r9, r2
 8004af0:	f1b9 0f00 	cmp.w	r9, #0
 8004af4:	dc35      	bgt.n	8004b62 <_printf_float+0x3ae>
 8004af6:	f04f 0800 	mov.w	r8, #0
 8004afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004afe:	f104 0a1a 	add.w	sl, r4, #26
 8004b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	eba3 0309 	sub.w	r3, r3, r9
 8004b0c:	4543      	cmp	r3, r8
 8004b0e:	f77f af79 	ble.w	8004a04 <_printf_float+0x250>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4652      	mov	r2, sl
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	47b8      	blx	r7
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f43f aeaa 	beq.w	8004876 <_printf_float+0xc2>
 8004b22:	f108 0801 	add.w	r8, r8, #1
 8004b26:	e7ec      	b.n	8004b02 <_printf_float+0x34e>
 8004b28:	4613      	mov	r3, r2
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b8      	blx	r7
 8004b32:	3001      	adds	r0, #1
 8004b34:	d1c0      	bne.n	8004ab8 <_printf_float+0x304>
 8004b36:	e69e      	b.n	8004876 <_printf_float+0xc2>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	9205      	str	r2, [sp, #20]
 8004b40:	47b8      	blx	r7
 8004b42:	3001      	adds	r0, #1
 8004b44:	f43f ae97 	beq.w	8004876 <_printf_float+0xc2>
 8004b48:	9a05      	ldr	r2, [sp, #20]
 8004b4a:	f10b 0b01 	add.w	fp, fp, #1
 8004b4e:	e7b9      	b.n	8004ac4 <_printf_float+0x310>
 8004b50:	ee18 3a10 	vmov	r3, s16
 8004b54:	4652      	mov	r2, sl
 8004b56:	4631      	mov	r1, r6
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d1be      	bne.n	8004ade <_printf_float+0x32a>
 8004b60:	e689      	b.n	8004876 <_printf_float+0xc2>
 8004b62:	9a05      	ldr	r2, [sp, #20]
 8004b64:	464b      	mov	r3, r9
 8004b66:	4442      	add	r2, r8
 8004b68:	4631      	mov	r1, r6
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d1c1      	bne.n	8004af6 <_printf_float+0x342>
 8004b72:	e680      	b.n	8004876 <_printf_float+0xc2>
 8004b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b76:	2a01      	cmp	r2, #1
 8004b78:	dc01      	bgt.n	8004b7e <_printf_float+0x3ca>
 8004b7a:	07db      	lsls	r3, r3, #31
 8004b7c:	d538      	bpl.n	8004bf0 <_printf_float+0x43c>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4642      	mov	r2, r8
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	47b8      	blx	r7
 8004b88:	3001      	adds	r0, #1
 8004b8a:	f43f ae74 	beq.w	8004876 <_printf_float+0xc2>
 8004b8e:	ee18 3a10 	vmov	r3, s16
 8004b92:	4652      	mov	r2, sl
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f ae6b 	beq.w	8004876 <_printf_float+0xc2>
 8004ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f7fb ff9e 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bac:	b9d8      	cbnz	r0, 8004be6 <_printf_float+0x432>
 8004bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb0:	f108 0201 	add.w	r2, r8, #1
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d10e      	bne.n	8004bde <_printf_float+0x42a>
 8004bc0:	e659      	b.n	8004876 <_printf_float+0xc2>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b8      	blx	r7
 8004bcc:	3001      	adds	r0, #1
 8004bce:	f43f ae52 	beq.w	8004876 <_printf_float+0xc2>
 8004bd2:	f108 0801 	add.w	r8, r8, #1
 8004bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4543      	cmp	r3, r8
 8004bdc:	dcf1      	bgt.n	8004bc2 <_printf_float+0x40e>
 8004bde:	464b      	mov	r3, r9
 8004be0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004be4:	e6dc      	b.n	80049a0 <_printf_float+0x1ec>
 8004be6:	f04f 0800 	mov.w	r8, #0
 8004bea:	f104 0a1a 	add.w	sl, r4, #26
 8004bee:	e7f2      	b.n	8004bd6 <_printf_float+0x422>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	e7df      	b.n	8004bb6 <_printf_float+0x402>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	464a      	mov	r2, r9
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	f43f ae38 	beq.w	8004876 <_printf_float+0xc2>
 8004c06:	f108 0801 	add.w	r8, r8, #1
 8004c0a:	68e3      	ldr	r3, [r4, #12]
 8004c0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c0e:	1a5b      	subs	r3, r3, r1
 8004c10:	4543      	cmp	r3, r8
 8004c12:	dcf0      	bgt.n	8004bf6 <_printf_float+0x442>
 8004c14:	e6fa      	b.n	8004a0c <_printf_float+0x258>
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	f104 0919 	add.w	r9, r4, #25
 8004c1e:	e7f4      	b.n	8004c0a <_printf_float+0x456>

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4616      	mov	r6, r2
 8004c26:	4699      	mov	r9, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bfb8      	it	lt
 8004c34:	4613      	movlt	r3, r2
 8004c36:	6033      	str	r3, [r6, #0]
 8004c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	b10a      	cbz	r2, 8004c46 <_printf_common+0x26>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	6833      	ldrmi	r3, [r6, #0]
 8004c4e:	3302      	addmi	r3, #2
 8004c50:	6033      	strmi	r3, [r6, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f015 0506 	ands.w	r5, r5, #6
 8004c58:	d106      	bne.n	8004c68 <_printf_common+0x48>
 8004c5a:	f104 0a19 	add.w	sl, r4, #25
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	6832      	ldr	r2, [r6, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dc26      	bgt.n	8004cb6 <_printf_common+0x96>
 8004c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c6c:	1e13      	subs	r3, r2, #0
 8004c6e:	6822      	ldr	r2, [r4, #0]
 8004c70:	bf18      	it	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d42b      	bmi.n	8004cd0 <_printf_common+0xb0>
 8004c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	4638      	mov	r0, r7
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d01e      	beq.n	8004cc4 <_printf_common+0xa4>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	68e5      	ldr	r5, [r4, #12]
 8004c8a:	6832      	ldr	r2, [r6, #0]
 8004c8c:	f003 0306 	and.w	r3, r3, #6
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	bf08      	it	eq
 8004c94:	1aad      	subeq	r5, r5, r2
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf0c      	ite	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfc4      	itt	gt
 8004ca6:	1a9b      	subgt	r3, r3, r2
 8004ca8:	18ed      	addgt	r5, r5, r3
 8004caa:	2600      	movs	r6, #0
 8004cac:	341a      	adds	r4, #26
 8004cae:	42b5      	cmp	r5, r6
 8004cb0:	d11a      	bne.n	8004ce8 <_printf_common+0xc8>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e008      	b.n	8004cc8 <_printf_common+0xa8>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4649      	mov	r1, r9
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	47c0      	blx	r8
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d103      	bne.n	8004ccc <_printf_common+0xac>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ccc:	3501      	adds	r5, #1
 8004cce:	e7c6      	b.n	8004c5e <_printf_common+0x3e>
 8004cd0:	18e1      	adds	r1, r4, r3
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	2030      	movs	r0, #48	; 0x30
 8004cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cda:	4422      	add	r2, r4
 8004cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	e7c7      	b.n	8004c78 <_printf_common+0x58>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	4622      	mov	r2, r4
 8004cec:	4649      	mov	r1, r9
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d0e6      	beq.n	8004cc4 <_printf_common+0xa4>
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7d9      	b.n	8004cae <_printf_common+0x8e>
	...

08004cfc <_printf_i>:
 8004cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	7e0f      	ldrb	r7, [r1, #24]
 8004d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d04:	2f78      	cmp	r7, #120	; 0x78
 8004d06:	4691      	mov	r9, r2
 8004d08:	4680      	mov	r8, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	469a      	mov	sl, r3
 8004d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d12:	d807      	bhi.n	8004d24 <_printf_i+0x28>
 8004d14:	2f62      	cmp	r7, #98	; 0x62
 8004d16:	d80a      	bhi.n	8004d2e <_printf_i+0x32>
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	f000 80d8 	beq.w	8004ece <_printf_i+0x1d2>
 8004d1e:	2f58      	cmp	r7, #88	; 0x58
 8004d20:	f000 80a3 	beq.w	8004e6a <_printf_i+0x16e>
 8004d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d2c:	e03a      	b.n	8004da4 <_printf_i+0xa8>
 8004d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d32:	2b15      	cmp	r3, #21
 8004d34:	d8f6      	bhi.n	8004d24 <_printf_i+0x28>
 8004d36:	a101      	add	r1, pc, #4	; (adr r1, 8004d3c <_printf_i+0x40>)
 8004d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004da9 	.word	0x08004da9
 8004d44:	08004d25 	.word	0x08004d25
 8004d48:	08004d25 	.word	0x08004d25
 8004d4c:	08004d25 	.word	0x08004d25
 8004d50:	08004d25 	.word	0x08004d25
 8004d54:	08004da9 	.word	0x08004da9
 8004d58:	08004d25 	.word	0x08004d25
 8004d5c:	08004d25 	.word	0x08004d25
 8004d60:	08004d25 	.word	0x08004d25
 8004d64:	08004d25 	.word	0x08004d25
 8004d68:	08004eb5 	.word	0x08004eb5
 8004d6c:	08004dd9 	.word	0x08004dd9
 8004d70:	08004e97 	.word	0x08004e97
 8004d74:	08004d25 	.word	0x08004d25
 8004d78:	08004d25 	.word	0x08004d25
 8004d7c:	08004ed7 	.word	0x08004ed7
 8004d80:	08004d25 	.word	0x08004d25
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d25 	.word	0x08004d25
 8004d8c:	08004d25 	.word	0x08004d25
 8004d90:	08004e9f 	.word	0x08004e9f
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	602a      	str	r2, [r5, #0]
 8004d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0a3      	b.n	8004ef0 <_printf_i+0x1f4>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	6829      	ldr	r1, [r5, #0]
 8004dac:	0606      	lsls	r6, r0, #24
 8004dae:	f101 0304 	add.w	r3, r1, #4
 8004db2:	d50a      	bpl.n	8004dca <_printf_i+0xce>
 8004db4:	680e      	ldr	r6, [r1, #0]
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	2e00      	cmp	r6, #0
 8004dba:	da03      	bge.n	8004dc4 <_printf_i+0xc8>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	4276      	negs	r6, r6
 8004dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc4:	485e      	ldr	r0, [pc, #376]	; (8004f40 <_printf_i+0x244>)
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	e019      	b.n	8004dfe <_printf_i+0x102>
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dd2:	bf18      	it	ne
 8004dd4:	b236      	sxthne	r6, r6
 8004dd6:	e7ef      	b.n	8004db8 <_printf_i+0xbc>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	6820      	ldr	r0, [r4, #0]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	6029      	str	r1, [r5, #0]
 8004de0:	0601      	lsls	r1, r0, #24
 8004de2:	d501      	bpl.n	8004de8 <_printf_i+0xec>
 8004de4:	681e      	ldr	r6, [r3, #0]
 8004de6:	e002      	b.n	8004dee <_printf_i+0xf2>
 8004de8:	0646      	lsls	r6, r0, #25
 8004dea:	d5fb      	bpl.n	8004de4 <_printf_i+0xe8>
 8004dec:	881e      	ldrh	r6, [r3, #0]
 8004dee:	4854      	ldr	r0, [pc, #336]	; (8004f40 <_printf_i+0x244>)
 8004df0:	2f6f      	cmp	r7, #111	; 0x6f
 8004df2:	bf0c      	ite	eq
 8004df4:	2308      	moveq	r3, #8
 8004df6:	230a      	movne	r3, #10
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfe:	6865      	ldr	r5, [r4, #4]
 8004e00:	60a5      	str	r5, [r4, #8]
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	bfa2      	ittt	ge
 8004e06:	6821      	ldrge	r1, [r4, #0]
 8004e08:	f021 0104 	bicge.w	r1, r1, #4
 8004e0c:	6021      	strge	r1, [r4, #0]
 8004e0e:	b90e      	cbnz	r6, 8004e14 <_printf_i+0x118>
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	d04d      	beq.n	8004eb0 <_printf_i+0x1b4>
 8004e14:	4615      	mov	r5, r2
 8004e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e1e:	5dc7      	ldrb	r7, [r0, r7]
 8004e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e24:	4637      	mov	r7, r6
 8004e26:	42bb      	cmp	r3, r7
 8004e28:	460e      	mov	r6, r1
 8004e2a:	d9f4      	bls.n	8004e16 <_printf_i+0x11a>
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d10b      	bne.n	8004e48 <_printf_i+0x14c>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	07de      	lsls	r6, r3, #31
 8004e34:	d508      	bpl.n	8004e48 <_printf_i+0x14c>
 8004e36:	6923      	ldr	r3, [r4, #16]
 8004e38:	6861      	ldr	r1, [r4, #4]
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	bfde      	ittt	le
 8004e3e:	2330      	movle	r3, #48	; 0x30
 8004e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e48:	1b52      	subs	r2, r2, r5
 8004e4a:	6122      	str	r2, [r4, #16]
 8004e4c:	f8cd a000 	str.w	sl, [sp]
 8004e50:	464b      	mov	r3, r9
 8004e52:	aa03      	add	r2, sp, #12
 8004e54:	4621      	mov	r1, r4
 8004e56:	4640      	mov	r0, r8
 8004e58:	f7ff fee2 	bl	8004c20 <_printf_common>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d14c      	bne.n	8004efa <_printf_i+0x1fe>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	b004      	add	sp, #16
 8004e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6a:	4835      	ldr	r0, [pc, #212]	; (8004f40 <_printf_i+0x244>)
 8004e6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e70:	6829      	ldr	r1, [r5, #0]
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e78:	6029      	str	r1, [r5, #0]
 8004e7a:	061d      	lsls	r5, r3, #24
 8004e7c:	d514      	bpl.n	8004ea8 <_printf_i+0x1ac>
 8004e7e:	07df      	lsls	r7, r3, #31
 8004e80:	bf44      	itt	mi
 8004e82:	f043 0320 	orrmi.w	r3, r3, #32
 8004e86:	6023      	strmi	r3, [r4, #0]
 8004e88:	b91e      	cbnz	r6, 8004e92 <_printf_i+0x196>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f023 0320 	bic.w	r3, r3, #32
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	2310      	movs	r3, #16
 8004e94:	e7b0      	b.n	8004df8 <_printf_i+0xfc>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	f043 0320 	orr.w	r3, r3, #32
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	2378      	movs	r3, #120	; 0x78
 8004ea0:	4828      	ldr	r0, [pc, #160]	; (8004f44 <_printf_i+0x248>)
 8004ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ea6:	e7e3      	b.n	8004e70 <_printf_i+0x174>
 8004ea8:	0659      	lsls	r1, r3, #25
 8004eaa:	bf48      	it	mi
 8004eac:	b2b6      	uxthmi	r6, r6
 8004eae:	e7e6      	b.n	8004e7e <_printf_i+0x182>
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	e7bb      	b.n	8004e2c <_printf_i+0x130>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	6826      	ldr	r6, [r4, #0]
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	1d18      	adds	r0, r3, #4
 8004ebc:	6028      	str	r0, [r5, #0]
 8004ebe:	0635      	lsls	r5, r6, #24
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0x1cc>
 8004ec4:	6019      	str	r1, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <_printf_i+0x1d2>
 8004ec8:	0670      	lsls	r0, r6, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0x1c8>
 8004ecc:	8019      	strh	r1, [r3, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	e7ba      	b.n	8004e4c <_printf_i+0x150>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	602a      	str	r2, [r5, #0]
 8004edc:	681d      	ldr	r5, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7fb f98c 	bl	8000200 <memchr>
 8004ee8:	b108      	cbz	r0, 8004eee <_printf_i+0x1f2>
 8004eea:	1b40      	subs	r0, r0, r5
 8004eec:	6060      	str	r0, [r4, #4]
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef8:	e7a8      	b.n	8004e4c <_printf_i+0x150>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	462a      	mov	r2, r5
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	47d0      	blx	sl
 8004f04:	3001      	adds	r0, #1
 8004f06:	d0ab      	beq.n	8004e60 <_printf_i+0x164>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	079b      	lsls	r3, r3, #30
 8004f0c:	d413      	bmi.n	8004f36 <_printf_i+0x23a>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	4298      	cmp	r0, r3
 8004f14:	bfb8      	it	lt
 8004f16:	4618      	movlt	r0, r3
 8004f18:	e7a4      	b.n	8004e64 <_printf_i+0x168>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	47d0      	blx	sl
 8004f24:	3001      	adds	r0, #1
 8004f26:	d09b      	beq.n	8004e60 <_printf_i+0x164>
 8004f28:	3501      	adds	r5, #1
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	9903      	ldr	r1, [sp, #12]
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dcf2      	bgt.n	8004f1a <_printf_i+0x21e>
 8004f34:	e7eb      	b.n	8004f0e <_printf_i+0x212>
 8004f36:	2500      	movs	r5, #0
 8004f38:	f104 0619 	add.w	r6, r4, #25
 8004f3c:	e7f5      	b.n	8004f2a <_printf_i+0x22e>
 8004f3e:	bf00      	nop
 8004f40:	0800890e 	.word	0x0800890e
 8004f44:	0800891f 	.word	0x0800891f

08004f48 <iprintf>:
 8004f48:	b40f      	push	{r0, r1, r2, r3}
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <iprintf+0x2c>)
 8004f4c:	b513      	push	{r0, r1, r4, lr}
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	b124      	cbz	r4, 8004f5c <iprintf+0x14>
 8004f52:	69a3      	ldr	r3, [r4, #24]
 8004f54:	b913      	cbnz	r3, 8004f5c <iprintf+0x14>
 8004f56:	4620      	mov	r0, r4
 8004f58:	f001 fd28 	bl	80069ac <__sinit>
 8004f5c:	ab05      	add	r3, sp, #20
 8004f5e:	9a04      	ldr	r2, [sp, #16]
 8004f60:	68a1      	ldr	r1, [r4, #8]
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	4620      	mov	r0, r4
 8004f66:	f002 ff3f 	bl	8007de8 <_vfiprintf_r>
 8004f6a:	b002      	add	sp, #8
 8004f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f70:	b004      	add	sp, #16
 8004f72:	4770      	bx	lr
 8004f74:	2000000c 	.word	0x2000000c

08004f78 <putchar>:
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <putchar+0x28>)
 8004f7a:	b513      	push	{r0, r1, r4, lr}
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	4601      	mov	r1, r0
 8004f80:	b134      	cbz	r4, 8004f90 <putchar+0x18>
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	b923      	cbnz	r3, 8004f90 <putchar+0x18>
 8004f86:	9001      	str	r0, [sp, #4]
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f001 fd0f 	bl	80069ac <__sinit>
 8004f8e:	9901      	ldr	r1, [sp, #4]
 8004f90:	68a2      	ldr	r2, [r4, #8]
 8004f92:	4620      	mov	r0, r4
 8004f94:	b002      	add	sp, #8
 8004f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f9a:	f003 b855 	b.w	8008048 <_putc_r>
 8004f9e:	bf00      	nop
 8004fa0:	2000000c 	.word	0x2000000c

08004fa4 <sulp>:
 8004fa4:	b570      	push	{r4, r5, r6, lr}
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
 8004faa:	ec45 4b10 	vmov	d0, r4, r5
 8004fae:	4616      	mov	r6, r2
 8004fb0:	f002 fcaa 	bl	8007908 <__ulp>
 8004fb4:	ec51 0b10 	vmov	r0, r1, d0
 8004fb8:	b17e      	cbz	r6, 8004fda <sulp+0x36>
 8004fba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004fbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd09      	ble.n	8004fda <sulp+0x36>
 8004fc6:	051b      	lsls	r3, r3, #20
 8004fc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004fcc:	2400      	movs	r4, #0
 8004fce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	f7fb fb1f 	bl	8000618 <__aeabi_dmul>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	0000      	movs	r0, r0
	...

08004fe0 <_strtod_l>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	ed2d 8b02 	vpush	{d8}
 8004fe8:	b09d      	sub	sp, #116	; 0x74
 8004fea:	461f      	mov	r7, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	9318      	str	r3, [sp, #96]	; 0x60
 8004ff0:	4ba2      	ldr	r3, [pc, #648]	; (800527c <_strtod_l+0x29c>)
 8004ff2:	9213      	str	r2, [sp, #76]	; 0x4c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	9305      	str	r3, [sp, #20]
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4688      	mov	r8, r1
 8004ffe:	f7fb f8f1 	bl	80001e4 <strlen>
 8005002:	f04f 0a00 	mov.w	sl, #0
 8005006:	4605      	mov	r5, r0
 8005008:	f04f 0b00 	mov.w	fp, #0
 800500c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	2a2b      	cmp	r2, #43	; 0x2b
 8005016:	d04e      	beq.n	80050b6 <_strtod_l+0xd6>
 8005018:	d83b      	bhi.n	8005092 <_strtod_l+0xb2>
 800501a:	2a0d      	cmp	r2, #13
 800501c:	d834      	bhi.n	8005088 <_strtod_l+0xa8>
 800501e:	2a08      	cmp	r2, #8
 8005020:	d834      	bhi.n	800508c <_strtod_l+0xac>
 8005022:	2a00      	cmp	r2, #0
 8005024:	d03e      	beq.n	80050a4 <_strtod_l+0xc4>
 8005026:	2300      	movs	r3, #0
 8005028:	930a      	str	r3, [sp, #40]	; 0x28
 800502a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800502c:	7833      	ldrb	r3, [r6, #0]
 800502e:	2b30      	cmp	r3, #48	; 0x30
 8005030:	f040 80b0 	bne.w	8005194 <_strtod_l+0x1b4>
 8005034:	7873      	ldrb	r3, [r6, #1]
 8005036:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800503a:	2b58      	cmp	r3, #88	; 0x58
 800503c:	d168      	bne.n	8005110 <_strtod_l+0x130>
 800503e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	ab18      	add	r3, sp, #96	; 0x60
 8005044:	9702      	str	r7, [sp, #8]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	4a8d      	ldr	r2, [pc, #564]	; (8005280 <_strtod_l+0x2a0>)
 800504a:	ab19      	add	r3, sp, #100	; 0x64
 800504c:	a917      	add	r1, sp, #92	; 0x5c
 800504e:	4620      	mov	r0, r4
 8005050:	f001 fdb0 	bl	8006bb4 <__gethex>
 8005054:	f010 0707 	ands.w	r7, r0, #7
 8005058:	4605      	mov	r5, r0
 800505a:	d005      	beq.n	8005068 <_strtod_l+0x88>
 800505c:	2f06      	cmp	r7, #6
 800505e:	d12c      	bne.n	80050ba <_strtod_l+0xda>
 8005060:	3601      	adds	r6, #1
 8005062:	2300      	movs	r3, #0
 8005064:	9617      	str	r6, [sp, #92]	; 0x5c
 8005066:	930a      	str	r3, [sp, #40]	; 0x28
 8005068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 8590 	bne.w	8005b90 <_strtod_l+0xbb0>
 8005070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005072:	b1eb      	cbz	r3, 80050b0 <_strtod_l+0xd0>
 8005074:	4652      	mov	r2, sl
 8005076:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800507a:	ec43 2b10 	vmov	d0, r2, r3
 800507e:	b01d      	add	sp, #116	; 0x74
 8005080:	ecbd 8b02 	vpop	{d8}
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	2a20      	cmp	r2, #32
 800508a:	d1cc      	bne.n	8005026 <_strtod_l+0x46>
 800508c:	3301      	adds	r3, #1
 800508e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005090:	e7be      	b.n	8005010 <_strtod_l+0x30>
 8005092:	2a2d      	cmp	r2, #45	; 0x2d
 8005094:	d1c7      	bne.n	8005026 <_strtod_l+0x46>
 8005096:	2201      	movs	r2, #1
 8005098:	920a      	str	r2, [sp, #40]	; 0x28
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	9217      	str	r2, [sp, #92]	; 0x5c
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1c2      	bne.n	800502a <_strtod_l+0x4a>
 80050a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f040 856e 	bne.w	8005b8c <_strtod_l+0xbac>
 80050b0:	4652      	mov	r2, sl
 80050b2:	465b      	mov	r3, fp
 80050b4:	e7e1      	b.n	800507a <_strtod_l+0x9a>
 80050b6:	2200      	movs	r2, #0
 80050b8:	e7ee      	b.n	8005098 <_strtod_l+0xb8>
 80050ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80050bc:	b13a      	cbz	r2, 80050ce <_strtod_l+0xee>
 80050be:	2135      	movs	r1, #53	; 0x35
 80050c0:	a81a      	add	r0, sp, #104	; 0x68
 80050c2:	f002 fd2c 	bl	8007b1e <__copybits>
 80050c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050c8:	4620      	mov	r0, r4
 80050ca:	f002 f8eb 	bl	80072a4 <_Bfree>
 80050ce:	3f01      	subs	r7, #1
 80050d0:	2f04      	cmp	r7, #4
 80050d2:	d806      	bhi.n	80050e2 <_strtod_l+0x102>
 80050d4:	e8df f007 	tbb	[pc, r7]
 80050d8:	1714030a 	.word	0x1714030a
 80050dc:	0a          	.byte	0x0a
 80050dd:	00          	.byte	0x00
 80050de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80050e2:	0728      	lsls	r0, r5, #28
 80050e4:	d5c0      	bpl.n	8005068 <_strtod_l+0x88>
 80050e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80050ea:	e7bd      	b.n	8005068 <_strtod_l+0x88>
 80050ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80050f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80050f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80050fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80050fe:	e7f0      	b.n	80050e2 <_strtod_l+0x102>
 8005100:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005284 <_strtod_l+0x2a4>
 8005104:	e7ed      	b.n	80050e2 <_strtod_l+0x102>
 8005106:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800510a:	f04f 3aff 	mov.w	sl, #4294967295
 800510e:	e7e8      	b.n	80050e2 <_strtod_l+0x102>
 8005110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	9217      	str	r2, [sp, #92]	; 0x5c
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b30      	cmp	r3, #48	; 0x30
 800511a:	d0f9      	beq.n	8005110 <_strtod_l+0x130>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0a3      	beq.n	8005068 <_strtod_l+0x88>
 8005120:	2301      	movs	r3, #1
 8005122:	f04f 0900 	mov.w	r9, #0
 8005126:	9304      	str	r3, [sp, #16]
 8005128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800512a:	9308      	str	r3, [sp, #32]
 800512c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005130:	464f      	mov	r7, r9
 8005132:	220a      	movs	r2, #10
 8005134:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005136:	7806      	ldrb	r6, [r0, #0]
 8005138:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800513c:	b2d9      	uxtb	r1, r3
 800513e:	2909      	cmp	r1, #9
 8005140:	d92a      	bls.n	8005198 <_strtod_l+0x1b8>
 8005142:	9905      	ldr	r1, [sp, #20]
 8005144:	462a      	mov	r2, r5
 8005146:	f003 f822 	bl	800818e <strncmp>
 800514a:	b398      	cbz	r0, 80051b4 <_strtod_l+0x1d4>
 800514c:	2000      	movs	r0, #0
 800514e:	4632      	mov	r2, r6
 8005150:	463d      	mov	r5, r7
 8005152:	9005      	str	r0, [sp, #20]
 8005154:	4603      	mov	r3, r0
 8005156:	2a65      	cmp	r2, #101	; 0x65
 8005158:	d001      	beq.n	800515e <_strtod_l+0x17e>
 800515a:	2a45      	cmp	r2, #69	; 0x45
 800515c:	d118      	bne.n	8005190 <_strtod_l+0x1b0>
 800515e:	b91d      	cbnz	r5, 8005168 <_strtod_l+0x188>
 8005160:	9a04      	ldr	r2, [sp, #16]
 8005162:	4302      	orrs	r2, r0
 8005164:	d09e      	beq.n	80050a4 <_strtod_l+0xc4>
 8005166:	2500      	movs	r5, #0
 8005168:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800516c:	f108 0201 	add.w	r2, r8, #1
 8005170:	9217      	str	r2, [sp, #92]	; 0x5c
 8005172:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005176:	2a2b      	cmp	r2, #43	; 0x2b
 8005178:	d075      	beq.n	8005266 <_strtod_l+0x286>
 800517a:	2a2d      	cmp	r2, #45	; 0x2d
 800517c:	d07b      	beq.n	8005276 <_strtod_l+0x296>
 800517e:	f04f 0c00 	mov.w	ip, #0
 8005182:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005186:	2909      	cmp	r1, #9
 8005188:	f240 8082 	bls.w	8005290 <_strtod_l+0x2b0>
 800518c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005190:	2600      	movs	r6, #0
 8005192:	e09d      	b.n	80052d0 <_strtod_l+0x2f0>
 8005194:	2300      	movs	r3, #0
 8005196:	e7c4      	b.n	8005122 <_strtod_l+0x142>
 8005198:	2f08      	cmp	r7, #8
 800519a:	bfd8      	it	le
 800519c:	9907      	ldrle	r1, [sp, #28]
 800519e:	f100 0001 	add.w	r0, r0, #1
 80051a2:	bfda      	itte	le
 80051a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80051a8:	9307      	strle	r3, [sp, #28]
 80051aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80051ae:	3701      	adds	r7, #1
 80051b0:	9017      	str	r0, [sp, #92]	; 0x5c
 80051b2:	e7bf      	b.n	8005134 <_strtod_l+0x154>
 80051b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051b6:	195a      	adds	r2, r3, r5
 80051b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80051ba:	5d5a      	ldrb	r2, [r3, r5]
 80051bc:	2f00      	cmp	r7, #0
 80051be:	d037      	beq.n	8005230 <_strtod_l+0x250>
 80051c0:	9005      	str	r0, [sp, #20]
 80051c2:	463d      	mov	r5, r7
 80051c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80051c8:	2b09      	cmp	r3, #9
 80051ca:	d912      	bls.n	80051f2 <_strtod_l+0x212>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e7c2      	b.n	8005156 <_strtod_l+0x176>
 80051d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80051d6:	785a      	ldrb	r2, [r3, #1]
 80051d8:	3001      	adds	r0, #1
 80051da:	2a30      	cmp	r2, #48	; 0x30
 80051dc:	d0f8      	beq.n	80051d0 <_strtod_l+0x1f0>
 80051de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	f200 84d9 	bhi.w	8005b9a <_strtod_l+0xbba>
 80051e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051ea:	9005      	str	r0, [sp, #20]
 80051ec:	2000      	movs	r0, #0
 80051ee:	9308      	str	r3, [sp, #32]
 80051f0:	4605      	mov	r5, r0
 80051f2:	3a30      	subs	r2, #48	; 0x30
 80051f4:	f100 0301 	add.w	r3, r0, #1
 80051f8:	d014      	beq.n	8005224 <_strtod_l+0x244>
 80051fa:	9905      	ldr	r1, [sp, #20]
 80051fc:	4419      	add	r1, r3
 80051fe:	9105      	str	r1, [sp, #20]
 8005200:	462b      	mov	r3, r5
 8005202:	eb00 0e05 	add.w	lr, r0, r5
 8005206:	210a      	movs	r1, #10
 8005208:	4573      	cmp	r3, lr
 800520a:	d113      	bne.n	8005234 <_strtod_l+0x254>
 800520c:	182b      	adds	r3, r5, r0
 800520e:	2b08      	cmp	r3, #8
 8005210:	f105 0501 	add.w	r5, r5, #1
 8005214:	4405      	add	r5, r0
 8005216:	dc1c      	bgt.n	8005252 <_strtod_l+0x272>
 8005218:	9907      	ldr	r1, [sp, #28]
 800521a:	230a      	movs	r3, #10
 800521c:	fb03 2301 	mla	r3, r3, r1, r2
 8005220:	9307      	str	r3, [sp, #28]
 8005222:	2300      	movs	r3, #0
 8005224:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005226:	1c51      	adds	r1, r2, #1
 8005228:	9117      	str	r1, [sp, #92]	; 0x5c
 800522a:	7852      	ldrb	r2, [r2, #1]
 800522c:	4618      	mov	r0, r3
 800522e:	e7c9      	b.n	80051c4 <_strtod_l+0x1e4>
 8005230:	4638      	mov	r0, r7
 8005232:	e7d2      	b.n	80051da <_strtod_l+0x1fa>
 8005234:	2b08      	cmp	r3, #8
 8005236:	dc04      	bgt.n	8005242 <_strtod_l+0x262>
 8005238:	9e07      	ldr	r6, [sp, #28]
 800523a:	434e      	muls	r6, r1
 800523c:	9607      	str	r6, [sp, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	e7e2      	b.n	8005208 <_strtod_l+0x228>
 8005242:	f103 0c01 	add.w	ip, r3, #1
 8005246:	f1bc 0f10 	cmp.w	ip, #16
 800524a:	bfd8      	it	le
 800524c:	fb01 f909 	mulle.w	r9, r1, r9
 8005250:	e7f5      	b.n	800523e <_strtod_l+0x25e>
 8005252:	2d10      	cmp	r5, #16
 8005254:	bfdc      	itt	le
 8005256:	230a      	movle	r3, #10
 8005258:	fb03 2909 	mlale	r9, r3, r9, r2
 800525c:	e7e1      	b.n	8005222 <_strtod_l+0x242>
 800525e:	2300      	movs	r3, #0
 8005260:	9305      	str	r3, [sp, #20]
 8005262:	2301      	movs	r3, #1
 8005264:	e77c      	b.n	8005160 <_strtod_l+0x180>
 8005266:	f04f 0c00 	mov.w	ip, #0
 800526a:	f108 0202 	add.w	r2, r8, #2
 800526e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005270:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005274:	e785      	b.n	8005182 <_strtod_l+0x1a2>
 8005276:	f04f 0c01 	mov.w	ip, #1
 800527a:	e7f6      	b.n	800526a <_strtod_l+0x28a>
 800527c:	08008ad8 	.word	0x08008ad8
 8005280:	08008930 	.word	0x08008930
 8005284:	7ff00000 	.word	0x7ff00000
 8005288:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800528a:	1c51      	adds	r1, r2, #1
 800528c:	9117      	str	r1, [sp, #92]	; 0x5c
 800528e:	7852      	ldrb	r2, [r2, #1]
 8005290:	2a30      	cmp	r2, #48	; 0x30
 8005292:	d0f9      	beq.n	8005288 <_strtod_l+0x2a8>
 8005294:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005298:	2908      	cmp	r1, #8
 800529a:	f63f af79 	bhi.w	8005190 <_strtod_l+0x1b0>
 800529e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80052a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80052a4:	9206      	str	r2, [sp, #24]
 80052a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80052a8:	1c51      	adds	r1, r2, #1
 80052aa:	9117      	str	r1, [sp, #92]	; 0x5c
 80052ac:	7852      	ldrb	r2, [r2, #1]
 80052ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80052b2:	2e09      	cmp	r6, #9
 80052b4:	d937      	bls.n	8005326 <_strtod_l+0x346>
 80052b6:	9e06      	ldr	r6, [sp, #24]
 80052b8:	1b89      	subs	r1, r1, r6
 80052ba:	2908      	cmp	r1, #8
 80052bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80052c0:	dc02      	bgt.n	80052c8 <_strtod_l+0x2e8>
 80052c2:	4576      	cmp	r6, lr
 80052c4:	bfa8      	it	ge
 80052c6:	4676      	movge	r6, lr
 80052c8:	f1bc 0f00 	cmp.w	ip, #0
 80052cc:	d000      	beq.n	80052d0 <_strtod_l+0x2f0>
 80052ce:	4276      	negs	r6, r6
 80052d0:	2d00      	cmp	r5, #0
 80052d2:	d14d      	bne.n	8005370 <_strtod_l+0x390>
 80052d4:	9904      	ldr	r1, [sp, #16]
 80052d6:	4301      	orrs	r1, r0
 80052d8:	f47f aec6 	bne.w	8005068 <_strtod_l+0x88>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f47f aee1 	bne.w	80050a4 <_strtod_l+0xc4>
 80052e2:	2a69      	cmp	r2, #105	; 0x69
 80052e4:	d027      	beq.n	8005336 <_strtod_l+0x356>
 80052e6:	dc24      	bgt.n	8005332 <_strtod_l+0x352>
 80052e8:	2a49      	cmp	r2, #73	; 0x49
 80052ea:	d024      	beq.n	8005336 <_strtod_l+0x356>
 80052ec:	2a4e      	cmp	r2, #78	; 0x4e
 80052ee:	f47f aed9 	bne.w	80050a4 <_strtod_l+0xc4>
 80052f2:	499f      	ldr	r1, [pc, #636]	; (8005570 <_strtod_l+0x590>)
 80052f4:	a817      	add	r0, sp, #92	; 0x5c
 80052f6:	f001 feb5 	bl	8007064 <__match>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	f43f aed2 	beq.w	80050a4 <_strtod_l+0xc4>
 8005300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b28      	cmp	r3, #40	; 0x28
 8005306:	d12d      	bne.n	8005364 <_strtod_l+0x384>
 8005308:	499a      	ldr	r1, [pc, #616]	; (8005574 <_strtod_l+0x594>)
 800530a:	aa1a      	add	r2, sp, #104	; 0x68
 800530c:	a817      	add	r0, sp, #92	; 0x5c
 800530e:	f001 febd 	bl	800708c <__hexnan>
 8005312:	2805      	cmp	r0, #5
 8005314:	d126      	bne.n	8005364 <_strtod_l+0x384>
 8005316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005318:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800531c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005320:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005324:	e6a0      	b.n	8005068 <_strtod_l+0x88>
 8005326:	210a      	movs	r1, #10
 8005328:	fb01 2e0e 	mla	lr, r1, lr, r2
 800532c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005330:	e7b9      	b.n	80052a6 <_strtod_l+0x2c6>
 8005332:	2a6e      	cmp	r2, #110	; 0x6e
 8005334:	e7db      	b.n	80052ee <_strtod_l+0x30e>
 8005336:	4990      	ldr	r1, [pc, #576]	; (8005578 <_strtod_l+0x598>)
 8005338:	a817      	add	r0, sp, #92	; 0x5c
 800533a:	f001 fe93 	bl	8007064 <__match>
 800533e:	2800      	cmp	r0, #0
 8005340:	f43f aeb0 	beq.w	80050a4 <_strtod_l+0xc4>
 8005344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005346:	498d      	ldr	r1, [pc, #564]	; (800557c <_strtod_l+0x59c>)
 8005348:	3b01      	subs	r3, #1
 800534a:	a817      	add	r0, sp, #92	; 0x5c
 800534c:	9317      	str	r3, [sp, #92]	; 0x5c
 800534e:	f001 fe89 	bl	8007064 <__match>
 8005352:	b910      	cbnz	r0, 800535a <_strtod_l+0x37a>
 8005354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005356:	3301      	adds	r3, #1
 8005358:	9317      	str	r3, [sp, #92]	; 0x5c
 800535a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800558c <_strtod_l+0x5ac>
 800535e:	f04f 0a00 	mov.w	sl, #0
 8005362:	e681      	b.n	8005068 <_strtod_l+0x88>
 8005364:	4886      	ldr	r0, [pc, #536]	; (8005580 <_strtod_l+0x5a0>)
 8005366:	f002 feb7 	bl	80080d8 <nan>
 800536a:	ec5b ab10 	vmov	sl, fp, d0
 800536e:	e67b      	b.n	8005068 <_strtod_l+0x88>
 8005370:	9b05      	ldr	r3, [sp, #20]
 8005372:	9807      	ldr	r0, [sp, #28]
 8005374:	1af3      	subs	r3, r6, r3
 8005376:	2f00      	cmp	r7, #0
 8005378:	bf08      	it	eq
 800537a:	462f      	moveq	r7, r5
 800537c:	2d10      	cmp	r5, #16
 800537e:	9306      	str	r3, [sp, #24]
 8005380:	46a8      	mov	r8, r5
 8005382:	bfa8      	it	ge
 8005384:	f04f 0810 	movge.w	r8, #16
 8005388:	f7fb f8cc 	bl	8000524 <__aeabi_ui2d>
 800538c:	2d09      	cmp	r5, #9
 800538e:	4682      	mov	sl, r0
 8005390:	468b      	mov	fp, r1
 8005392:	dd13      	ble.n	80053bc <_strtod_l+0x3dc>
 8005394:	4b7b      	ldr	r3, [pc, #492]	; (8005584 <_strtod_l+0x5a4>)
 8005396:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800539a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800539e:	f7fb f93b 	bl	8000618 <__aeabi_dmul>
 80053a2:	4682      	mov	sl, r0
 80053a4:	4648      	mov	r0, r9
 80053a6:	468b      	mov	fp, r1
 80053a8:	f7fb f8bc 	bl	8000524 <__aeabi_ui2d>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4650      	mov	r0, sl
 80053b2:	4659      	mov	r1, fp
 80053b4:	f7fa ff7a 	bl	80002ac <__adddf3>
 80053b8:	4682      	mov	sl, r0
 80053ba:	468b      	mov	fp, r1
 80053bc:	2d0f      	cmp	r5, #15
 80053be:	dc38      	bgt.n	8005432 <_strtod_l+0x452>
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f43f ae50 	beq.w	8005068 <_strtod_l+0x88>
 80053c8:	dd24      	ble.n	8005414 <_strtod_l+0x434>
 80053ca:	2b16      	cmp	r3, #22
 80053cc:	dc0b      	bgt.n	80053e6 <_strtod_l+0x406>
 80053ce:	496d      	ldr	r1, [pc, #436]	; (8005584 <_strtod_l+0x5a4>)
 80053d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80053d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d8:	4652      	mov	r2, sl
 80053da:	465b      	mov	r3, fp
 80053dc:	f7fb f91c 	bl	8000618 <__aeabi_dmul>
 80053e0:	4682      	mov	sl, r0
 80053e2:	468b      	mov	fp, r1
 80053e4:	e640      	b.n	8005068 <_strtod_l+0x88>
 80053e6:	9a06      	ldr	r2, [sp, #24]
 80053e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80053ec:	4293      	cmp	r3, r2
 80053ee:	db20      	blt.n	8005432 <_strtod_l+0x452>
 80053f0:	4c64      	ldr	r4, [pc, #400]	; (8005584 <_strtod_l+0x5a4>)
 80053f2:	f1c5 050f 	rsb	r5, r5, #15
 80053f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80053fa:	4652      	mov	r2, sl
 80053fc:	465b      	mov	r3, fp
 80053fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005402:	f7fb f909 	bl	8000618 <__aeabi_dmul>
 8005406:	9b06      	ldr	r3, [sp, #24]
 8005408:	1b5d      	subs	r5, r3, r5
 800540a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800540e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005412:	e7e3      	b.n	80053dc <_strtod_l+0x3fc>
 8005414:	9b06      	ldr	r3, [sp, #24]
 8005416:	3316      	adds	r3, #22
 8005418:	db0b      	blt.n	8005432 <_strtod_l+0x452>
 800541a:	9b05      	ldr	r3, [sp, #20]
 800541c:	1b9e      	subs	r6, r3, r6
 800541e:	4b59      	ldr	r3, [pc, #356]	; (8005584 <_strtod_l+0x5a4>)
 8005420:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005424:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005428:	4650      	mov	r0, sl
 800542a:	4659      	mov	r1, fp
 800542c:	f7fb fa1e 	bl	800086c <__aeabi_ddiv>
 8005430:	e7d6      	b.n	80053e0 <_strtod_l+0x400>
 8005432:	9b06      	ldr	r3, [sp, #24]
 8005434:	eba5 0808 	sub.w	r8, r5, r8
 8005438:	4498      	add	r8, r3
 800543a:	f1b8 0f00 	cmp.w	r8, #0
 800543e:	dd74      	ble.n	800552a <_strtod_l+0x54a>
 8005440:	f018 030f 	ands.w	r3, r8, #15
 8005444:	d00a      	beq.n	800545c <_strtod_l+0x47c>
 8005446:	494f      	ldr	r1, [pc, #316]	; (8005584 <_strtod_l+0x5a4>)
 8005448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800544c:	4652      	mov	r2, sl
 800544e:	465b      	mov	r3, fp
 8005450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005454:	f7fb f8e0 	bl	8000618 <__aeabi_dmul>
 8005458:	4682      	mov	sl, r0
 800545a:	468b      	mov	fp, r1
 800545c:	f038 080f 	bics.w	r8, r8, #15
 8005460:	d04f      	beq.n	8005502 <_strtod_l+0x522>
 8005462:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005466:	dd22      	ble.n	80054ae <_strtod_l+0x4ce>
 8005468:	2500      	movs	r5, #0
 800546a:	462e      	mov	r6, r5
 800546c:	9507      	str	r5, [sp, #28]
 800546e:	9505      	str	r5, [sp, #20]
 8005470:	2322      	movs	r3, #34	; 0x22
 8005472:	f8df b118 	ldr.w	fp, [pc, #280]	; 800558c <_strtod_l+0x5ac>
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	f04f 0a00 	mov.w	sl, #0
 800547c:	9b07      	ldr	r3, [sp, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f43f adf2 	beq.w	8005068 <_strtod_l+0x88>
 8005484:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005486:	4620      	mov	r0, r4
 8005488:	f001 ff0c 	bl	80072a4 <_Bfree>
 800548c:	9905      	ldr	r1, [sp, #20]
 800548e:	4620      	mov	r0, r4
 8005490:	f001 ff08 	bl	80072a4 <_Bfree>
 8005494:	4631      	mov	r1, r6
 8005496:	4620      	mov	r0, r4
 8005498:	f001 ff04 	bl	80072a4 <_Bfree>
 800549c:	9907      	ldr	r1, [sp, #28]
 800549e:	4620      	mov	r0, r4
 80054a0:	f001 ff00 	bl	80072a4 <_Bfree>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4620      	mov	r0, r4
 80054a8:	f001 fefc 	bl	80072a4 <_Bfree>
 80054ac:	e5dc      	b.n	8005068 <_strtod_l+0x88>
 80054ae:	4b36      	ldr	r3, [pc, #216]	; (8005588 <_strtod_l+0x5a8>)
 80054b0:	9304      	str	r3, [sp, #16]
 80054b2:	2300      	movs	r3, #0
 80054b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80054b8:	4650      	mov	r0, sl
 80054ba:	4659      	mov	r1, fp
 80054bc:	4699      	mov	r9, r3
 80054be:	f1b8 0f01 	cmp.w	r8, #1
 80054c2:	dc21      	bgt.n	8005508 <_strtod_l+0x528>
 80054c4:	b10b      	cbz	r3, 80054ca <_strtod_l+0x4ea>
 80054c6:	4682      	mov	sl, r0
 80054c8:	468b      	mov	fp, r1
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <_strtod_l+0x5a8>)
 80054cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80054d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80054d4:	4652      	mov	r2, sl
 80054d6:	465b      	mov	r3, fp
 80054d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80054dc:	f7fb f89c 	bl	8000618 <__aeabi_dmul>
 80054e0:	4b2a      	ldr	r3, [pc, #168]	; (800558c <_strtod_l+0x5ac>)
 80054e2:	460a      	mov	r2, r1
 80054e4:	400b      	ands	r3, r1
 80054e6:	492a      	ldr	r1, [pc, #168]	; (8005590 <_strtod_l+0x5b0>)
 80054e8:	428b      	cmp	r3, r1
 80054ea:	4682      	mov	sl, r0
 80054ec:	d8bc      	bhi.n	8005468 <_strtod_l+0x488>
 80054ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80054f2:	428b      	cmp	r3, r1
 80054f4:	bf86      	itte	hi
 80054f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005594 <_strtod_l+0x5b4>
 80054fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80054fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005502:	2300      	movs	r3, #0
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	e084      	b.n	8005612 <_strtod_l+0x632>
 8005508:	f018 0f01 	tst.w	r8, #1
 800550c:	d005      	beq.n	800551a <_strtod_l+0x53a>
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fb f880 	bl	8000618 <__aeabi_dmul>
 8005518:	2301      	movs	r3, #1
 800551a:	9a04      	ldr	r2, [sp, #16]
 800551c:	3208      	adds	r2, #8
 800551e:	f109 0901 	add.w	r9, r9, #1
 8005522:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005526:	9204      	str	r2, [sp, #16]
 8005528:	e7c9      	b.n	80054be <_strtod_l+0x4de>
 800552a:	d0ea      	beq.n	8005502 <_strtod_l+0x522>
 800552c:	f1c8 0800 	rsb	r8, r8, #0
 8005530:	f018 020f 	ands.w	r2, r8, #15
 8005534:	d00a      	beq.n	800554c <_strtod_l+0x56c>
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <_strtod_l+0x5a4>)
 8005538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005544:	f7fb f992 	bl	800086c <__aeabi_ddiv>
 8005548:	4682      	mov	sl, r0
 800554a:	468b      	mov	fp, r1
 800554c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005550:	d0d7      	beq.n	8005502 <_strtod_l+0x522>
 8005552:	f1b8 0f1f 	cmp.w	r8, #31
 8005556:	dd1f      	ble.n	8005598 <_strtod_l+0x5b8>
 8005558:	2500      	movs	r5, #0
 800555a:	462e      	mov	r6, r5
 800555c:	9507      	str	r5, [sp, #28]
 800555e:	9505      	str	r5, [sp, #20]
 8005560:	2322      	movs	r3, #34	; 0x22
 8005562:	f04f 0a00 	mov.w	sl, #0
 8005566:	f04f 0b00 	mov.w	fp, #0
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	e786      	b.n	800547c <_strtod_l+0x49c>
 800556e:	bf00      	nop
 8005570:	08008909 	.word	0x08008909
 8005574:	08008944 	.word	0x08008944
 8005578:	08008901 	.word	0x08008901
 800557c:	08008983 	.word	0x08008983
 8005580:	08008c90 	.word	0x08008c90
 8005584:	08008b70 	.word	0x08008b70
 8005588:	08008b48 	.word	0x08008b48
 800558c:	7ff00000 	.word	0x7ff00000
 8005590:	7ca00000 	.word	0x7ca00000
 8005594:	7fefffff 	.word	0x7fefffff
 8005598:	f018 0310 	ands.w	r3, r8, #16
 800559c:	bf18      	it	ne
 800559e:	236a      	movne	r3, #106	; 0x6a
 80055a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005950 <_strtod_l+0x970>
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	4650      	mov	r0, sl
 80055a8:	4659      	mov	r1, fp
 80055aa:	2300      	movs	r3, #0
 80055ac:	f018 0f01 	tst.w	r8, #1
 80055b0:	d004      	beq.n	80055bc <_strtod_l+0x5dc>
 80055b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80055b6:	f7fb f82f 	bl	8000618 <__aeabi_dmul>
 80055ba:	2301      	movs	r3, #1
 80055bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80055c0:	f109 0908 	add.w	r9, r9, #8
 80055c4:	d1f2      	bne.n	80055ac <_strtod_l+0x5cc>
 80055c6:	b10b      	cbz	r3, 80055cc <_strtod_l+0x5ec>
 80055c8:	4682      	mov	sl, r0
 80055ca:	468b      	mov	fp, r1
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	b1c3      	cbz	r3, 8005602 <_strtod_l+0x622>
 80055d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80055d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80055d8:	2b00      	cmp	r3, #0
 80055da:	4659      	mov	r1, fp
 80055dc:	dd11      	ble.n	8005602 <_strtod_l+0x622>
 80055de:	2b1f      	cmp	r3, #31
 80055e0:	f340 8124 	ble.w	800582c <_strtod_l+0x84c>
 80055e4:	2b34      	cmp	r3, #52	; 0x34
 80055e6:	bfde      	ittt	le
 80055e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80055ec:	f04f 33ff 	movle.w	r3, #4294967295
 80055f0:	fa03 f202 	lslle.w	r2, r3, r2
 80055f4:	f04f 0a00 	mov.w	sl, #0
 80055f8:	bfcc      	ite	gt
 80055fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80055fe:	ea02 0b01 	andle.w	fp, r2, r1
 8005602:	2200      	movs	r2, #0
 8005604:	2300      	movs	r3, #0
 8005606:	4650      	mov	r0, sl
 8005608:	4659      	mov	r1, fp
 800560a:	f7fb fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800560e:	2800      	cmp	r0, #0
 8005610:	d1a2      	bne.n	8005558 <_strtod_l+0x578>
 8005612:	9b07      	ldr	r3, [sp, #28]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	9908      	ldr	r1, [sp, #32]
 8005618:	462b      	mov	r3, r5
 800561a:	463a      	mov	r2, r7
 800561c:	4620      	mov	r0, r4
 800561e:	f001 fea9 	bl	8007374 <__s2b>
 8005622:	9007      	str	r0, [sp, #28]
 8005624:	2800      	cmp	r0, #0
 8005626:	f43f af1f 	beq.w	8005468 <_strtod_l+0x488>
 800562a:	9b05      	ldr	r3, [sp, #20]
 800562c:	1b9e      	subs	r6, r3, r6
 800562e:	9b06      	ldr	r3, [sp, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	bfb4      	ite	lt
 8005634:	4633      	movlt	r3, r6
 8005636:	2300      	movge	r3, #0
 8005638:	930c      	str	r3, [sp, #48]	; 0x30
 800563a:	9b06      	ldr	r3, [sp, #24]
 800563c:	2500      	movs	r5, #0
 800563e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005642:	9312      	str	r3, [sp, #72]	; 0x48
 8005644:	462e      	mov	r6, r5
 8005646:	9b07      	ldr	r3, [sp, #28]
 8005648:	4620      	mov	r0, r4
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	f001 fdea 	bl	8007224 <_Balloc>
 8005650:	9005      	str	r0, [sp, #20]
 8005652:	2800      	cmp	r0, #0
 8005654:	f43f af0c 	beq.w	8005470 <_strtod_l+0x490>
 8005658:	9b07      	ldr	r3, [sp, #28]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	3202      	adds	r2, #2
 800565e:	f103 010c 	add.w	r1, r3, #12
 8005662:	0092      	lsls	r2, r2, #2
 8005664:	300c      	adds	r0, #12
 8005666:	f001 fdcf 	bl	8007208 <memcpy>
 800566a:	ec4b ab10 	vmov	d0, sl, fp
 800566e:	aa1a      	add	r2, sp, #104	; 0x68
 8005670:	a919      	add	r1, sp, #100	; 0x64
 8005672:	4620      	mov	r0, r4
 8005674:	f002 f9c4 	bl	8007a00 <__d2b>
 8005678:	ec4b ab18 	vmov	d8, sl, fp
 800567c:	9018      	str	r0, [sp, #96]	; 0x60
 800567e:	2800      	cmp	r0, #0
 8005680:	f43f aef6 	beq.w	8005470 <_strtod_l+0x490>
 8005684:	2101      	movs	r1, #1
 8005686:	4620      	mov	r0, r4
 8005688:	f001 ff0e 	bl	80074a8 <__i2b>
 800568c:	4606      	mov	r6, r0
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f aeee 	beq.w	8005470 <_strtod_l+0x490>
 8005694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005696:	9904      	ldr	r1, [sp, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfab      	itete	ge
 800569c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800569e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80056a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80056a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80056a6:	bfac      	ite	ge
 80056a8:	eb03 0902 	addge.w	r9, r3, r2
 80056ac:	1ad7      	sublt	r7, r2, r3
 80056ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80056b0:	eba3 0801 	sub.w	r8, r3, r1
 80056b4:	4490      	add	r8, r2
 80056b6:	4ba1      	ldr	r3, [pc, #644]	; (800593c <_strtod_l+0x95c>)
 80056b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80056bc:	4598      	cmp	r8, r3
 80056be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80056c2:	f280 80c7 	bge.w	8005854 <_strtod_l+0x874>
 80056c6:	eba3 0308 	sub.w	r3, r3, r8
 80056ca:	2b1f      	cmp	r3, #31
 80056cc:	eba2 0203 	sub.w	r2, r2, r3
 80056d0:	f04f 0101 	mov.w	r1, #1
 80056d4:	f300 80b1 	bgt.w	800583a <_strtod_l+0x85a>
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	930d      	str	r3, [sp, #52]	; 0x34
 80056de:	2300      	movs	r3, #0
 80056e0:	9308      	str	r3, [sp, #32]
 80056e2:	eb09 0802 	add.w	r8, r9, r2
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	45c1      	cmp	r9, r8
 80056ea:	4417      	add	r7, r2
 80056ec:	441f      	add	r7, r3
 80056ee:	464b      	mov	r3, r9
 80056f0:	bfa8      	it	ge
 80056f2:	4643      	movge	r3, r8
 80056f4:	42bb      	cmp	r3, r7
 80056f6:	bfa8      	it	ge
 80056f8:	463b      	movge	r3, r7
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfc2      	ittt	gt
 80056fe:	eba8 0803 	subgt.w	r8, r8, r3
 8005702:	1aff      	subgt	r7, r7, r3
 8005704:	eba9 0903 	subgt.w	r9, r9, r3
 8005708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800570a:	2b00      	cmp	r3, #0
 800570c:	dd17      	ble.n	800573e <_strtod_l+0x75e>
 800570e:	4631      	mov	r1, r6
 8005710:	461a      	mov	r2, r3
 8005712:	4620      	mov	r0, r4
 8005714:	f001 ff88 	bl	8007628 <__pow5mult>
 8005718:	4606      	mov	r6, r0
 800571a:	2800      	cmp	r0, #0
 800571c:	f43f aea8 	beq.w	8005470 <_strtod_l+0x490>
 8005720:	4601      	mov	r1, r0
 8005722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005724:	4620      	mov	r0, r4
 8005726:	f001 fed5 	bl	80074d4 <__multiply>
 800572a:	900b      	str	r0, [sp, #44]	; 0x2c
 800572c:	2800      	cmp	r0, #0
 800572e:	f43f ae9f 	beq.w	8005470 <_strtod_l+0x490>
 8005732:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005734:	4620      	mov	r0, r4
 8005736:	f001 fdb5 	bl	80072a4 <_Bfree>
 800573a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573c:	9318      	str	r3, [sp, #96]	; 0x60
 800573e:	f1b8 0f00 	cmp.w	r8, #0
 8005742:	f300 808c 	bgt.w	800585e <_strtod_l+0x87e>
 8005746:	9b06      	ldr	r3, [sp, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dd08      	ble.n	800575e <_strtod_l+0x77e>
 800574c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800574e:	9905      	ldr	r1, [sp, #20]
 8005750:	4620      	mov	r0, r4
 8005752:	f001 ff69 	bl	8007628 <__pow5mult>
 8005756:	9005      	str	r0, [sp, #20]
 8005758:	2800      	cmp	r0, #0
 800575a:	f43f ae89 	beq.w	8005470 <_strtod_l+0x490>
 800575e:	2f00      	cmp	r7, #0
 8005760:	dd08      	ble.n	8005774 <_strtod_l+0x794>
 8005762:	9905      	ldr	r1, [sp, #20]
 8005764:	463a      	mov	r2, r7
 8005766:	4620      	mov	r0, r4
 8005768:	f001 ffb8 	bl	80076dc <__lshift>
 800576c:	9005      	str	r0, [sp, #20]
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f ae7e 	beq.w	8005470 <_strtod_l+0x490>
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	dd08      	ble.n	800578c <_strtod_l+0x7ac>
 800577a:	4631      	mov	r1, r6
 800577c:	464a      	mov	r2, r9
 800577e:	4620      	mov	r0, r4
 8005780:	f001 ffac 	bl	80076dc <__lshift>
 8005784:	4606      	mov	r6, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f ae72 	beq.w	8005470 <_strtod_l+0x490>
 800578c:	9a05      	ldr	r2, [sp, #20]
 800578e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005790:	4620      	mov	r0, r4
 8005792:	f002 f82f 	bl	80077f4 <__mdiff>
 8005796:	4605      	mov	r5, r0
 8005798:	2800      	cmp	r0, #0
 800579a:	f43f ae69 	beq.w	8005470 <_strtod_l+0x490>
 800579e:	68c3      	ldr	r3, [r0, #12]
 80057a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80057a2:	2300      	movs	r3, #0
 80057a4:	60c3      	str	r3, [r0, #12]
 80057a6:	4631      	mov	r1, r6
 80057a8:	f002 f808 	bl	80077bc <__mcmp>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	da60      	bge.n	8005872 <_strtod_l+0x892>
 80057b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b2:	ea53 030a 	orrs.w	r3, r3, sl
 80057b6:	f040 8082 	bne.w	80058be <_strtod_l+0x8de>
 80057ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d17d      	bne.n	80058be <_strtod_l+0x8de>
 80057c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057c6:	0d1b      	lsrs	r3, r3, #20
 80057c8:	051b      	lsls	r3, r3, #20
 80057ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80057ce:	d976      	bls.n	80058be <_strtod_l+0x8de>
 80057d0:	696b      	ldr	r3, [r5, #20]
 80057d2:	b913      	cbnz	r3, 80057da <_strtod_l+0x7fa>
 80057d4:	692b      	ldr	r3, [r5, #16]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	dd71      	ble.n	80058be <_strtod_l+0x8de>
 80057da:	4629      	mov	r1, r5
 80057dc:	2201      	movs	r2, #1
 80057de:	4620      	mov	r0, r4
 80057e0:	f001 ff7c 	bl	80076dc <__lshift>
 80057e4:	4631      	mov	r1, r6
 80057e6:	4605      	mov	r5, r0
 80057e8:	f001 ffe8 	bl	80077bc <__mcmp>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dd66      	ble.n	80058be <_strtod_l+0x8de>
 80057f0:	9904      	ldr	r1, [sp, #16]
 80057f2:	4a53      	ldr	r2, [pc, #332]	; (8005940 <_strtod_l+0x960>)
 80057f4:	465b      	mov	r3, fp
 80057f6:	2900      	cmp	r1, #0
 80057f8:	f000 8081 	beq.w	80058fe <_strtod_l+0x91e>
 80057fc:	ea02 010b 	and.w	r1, r2, fp
 8005800:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005804:	dc7b      	bgt.n	80058fe <_strtod_l+0x91e>
 8005806:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800580a:	f77f aea9 	ble.w	8005560 <_strtod_l+0x580>
 800580e:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <_strtod_l+0x964>)
 8005810:	4650      	mov	r0, sl
 8005812:	4659      	mov	r1, fp
 8005814:	2200      	movs	r2, #0
 8005816:	f7fa feff 	bl	8000618 <__aeabi_dmul>
 800581a:	460b      	mov	r3, r1
 800581c:	4303      	orrs	r3, r0
 800581e:	bf08      	it	eq
 8005820:	2322      	moveq	r3, #34	; 0x22
 8005822:	4682      	mov	sl, r0
 8005824:	468b      	mov	fp, r1
 8005826:	bf08      	it	eq
 8005828:	6023      	streq	r3, [r4, #0]
 800582a:	e62b      	b.n	8005484 <_strtod_l+0x4a4>
 800582c:	f04f 32ff 	mov.w	r2, #4294967295
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	ea03 0a0a 	and.w	sl, r3, sl
 8005838:	e6e3      	b.n	8005602 <_strtod_l+0x622>
 800583a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800583e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005842:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005846:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800584a:	fa01 f308 	lsl.w	r3, r1, r8
 800584e:	9308      	str	r3, [sp, #32]
 8005850:	910d      	str	r1, [sp, #52]	; 0x34
 8005852:	e746      	b.n	80056e2 <_strtod_l+0x702>
 8005854:	2300      	movs	r3, #0
 8005856:	9308      	str	r3, [sp, #32]
 8005858:	2301      	movs	r3, #1
 800585a:	930d      	str	r3, [sp, #52]	; 0x34
 800585c:	e741      	b.n	80056e2 <_strtod_l+0x702>
 800585e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005860:	4642      	mov	r2, r8
 8005862:	4620      	mov	r0, r4
 8005864:	f001 ff3a 	bl	80076dc <__lshift>
 8005868:	9018      	str	r0, [sp, #96]	; 0x60
 800586a:	2800      	cmp	r0, #0
 800586c:	f47f af6b 	bne.w	8005746 <_strtod_l+0x766>
 8005870:	e5fe      	b.n	8005470 <_strtod_l+0x490>
 8005872:	465f      	mov	r7, fp
 8005874:	d16e      	bne.n	8005954 <_strtod_l+0x974>
 8005876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005878:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800587c:	b342      	cbz	r2, 80058d0 <_strtod_l+0x8f0>
 800587e:	4a32      	ldr	r2, [pc, #200]	; (8005948 <_strtod_l+0x968>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d128      	bne.n	80058d6 <_strtod_l+0x8f6>
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	4651      	mov	r1, sl
 8005888:	b1eb      	cbz	r3, 80058c6 <_strtod_l+0x8e6>
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <_strtod_l+0x960>)
 800588c:	403b      	ands	r3, r7
 800588e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005892:	f04f 32ff 	mov.w	r2, #4294967295
 8005896:	d819      	bhi.n	80058cc <_strtod_l+0x8ec>
 8005898:	0d1b      	lsrs	r3, r3, #20
 800589a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d117      	bne.n	80058d6 <_strtod_l+0x8f6>
 80058a6:	4b29      	ldr	r3, [pc, #164]	; (800594c <_strtod_l+0x96c>)
 80058a8:	429f      	cmp	r7, r3
 80058aa:	d102      	bne.n	80058b2 <_strtod_l+0x8d2>
 80058ac:	3101      	adds	r1, #1
 80058ae:	f43f addf 	beq.w	8005470 <_strtod_l+0x490>
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <_strtod_l+0x960>)
 80058b4:	403b      	ands	r3, r7
 80058b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80058ba:	f04f 0a00 	mov.w	sl, #0
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1a4      	bne.n	800580e <_strtod_l+0x82e>
 80058c4:	e5de      	b.n	8005484 <_strtod_l+0x4a4>
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	e7ea      	b.n	80058a2 <_strtod_l+0x8c2>
 80058cc:	4613      	mov	r3, r2
 80058ce:	e7e8      	b.n	80058a2 <_strtod_l+0x8c2>
 80058d0:	ea53 030a 	orrs.w	r3, r3, sl
 80058d4:	d08c      	beq.n	80057f0 <_strtod_l+0x810>
 80058d6:	9b08      	ldr	r3, [sp, #32]
 80058d8:	b1db      	cbz	r3, 8005912 <_strtod_l+0x932>
 80058da:	423b      	tst	r3, r7
 80058dc:	d0ef      	beq.n	80058be <_strtod_l+0x8de>
 80058de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e0:	9a04      	ldr	r2, [sp, #16]
 80058e2:	4650      	mov	r0, sl
 80058e4:	4659      	mov	r1, fp
 80058e6:	b1c3      	cbz	r3, 800591a <_strtod_l+0x93a>
 80058e8:	f7ff fb5c 	bl	8004fa4 <sulp>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	ec51 0b18 	vmov	r0, r1, d8
 80058f4:	f7fa fcda 	bl	80002ac <__adddf3>
 80058f8:	4682      	mov	sl, r0
 80058fa:	468b      	mov	fp, r1
 80058fc:	e7df      	b.n	80058be <_strtod_l+0x8de>
 80058fe:	4013      	ands	r3, r2
 8005900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005904:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005908:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800590c:	f04f 3aff 	mov.w	sl, #4294967295
 8005910:	e7d5      	b.n	80058be <_strtod_l+0x8de>
 8005912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005914:	ea13 0f0a 	tst.w	r3, sl
 8005918:	e7e0      	b.n	80058dc <_strtod_l+0x8fc>
 800591a:	f7ff fb43 	bl	8004fa4 <sulp>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	ec51 0b18 	vmov	r0, r1, d8
 8005926:	f7fa fcbf 	bl	80002a8 <__aeabi_dsub>
 800592a:	2200      	movs	r2, #0
 800592c:	2300      	movs	r3, #0
 800592e:	4682      	mov	sl, r0
 8005930:	468b      	mov	fp, r1
 8005932:	f7fb f8d9 	bl	8000ae8 <__aeabi_dcmpeq>
 8005936:	2800      	cmp	r0, #0
 8005938:	d0c1      	beq.n	80058be <_strtod_l+0x8de>
 800593a:	e611      	b.n	8005560 <_strtod_l+0x580>
 800593c:	fffffc02 	.word	0xfffffc02
 8005940:	7ff00000 	.word	0x7ff00000
 8005944:	39500000 	.word	0x39500000
 8005948:	000fffff 	.word	0x000fffff
 800594c:	7fefffff 	.word	0x7fefffff
 8005950:	08008958 	.word	0x08008958
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	f002 f8ae 	bl	8007ab8 <__ratio>
 800595c:	ec59 8b10 	vmov	r8, r9, d0
 8005960:	ee10 0a10 	vmov	r0, s0
 8005964:	2200      	movs	r2, #0
 8005966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800596a:	4649      	mov	r1, r9
 800596c:	f7fb f8d0 	bl	8000b10 <__aeabi_dcmple>
 8005970:	2800      	cmp	r0, #0
 8005972:	d07a      	beq.n	8005a6a <_strtod_l+0xa8a>
 8005974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04a      	beq.n	8005a10 <_strtod_l+0xa30>
 800597a:	4b95      	ldr	r3, [pc, #596]	; (8005bd0 <_strtod_l+0xbf0>)
 800597c:	2200      	movs	r2, #0
 800597e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005982:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005bd0 <_strtod_l+0xbf0>
 8005986:	f04f 0800 	mov.w	r8, #0
 800598a:	4b92      	ldr	r3, [pc, #584]	; (8005bd4 <_strtod_l+0xbf4>)
 800598c:	403b      	ands	r3, r7
 800598e:	930d      	str	r3, [sp, #52]	; 0x34
 8005990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005992:	4b91      	ldr	r3, [pc, #580]	; (8005bd8 <_strtod_l+0xbf8>)
 8005994:	429a      	cmp	r2, r3
 8005996:	f040 80b0 	bne.w	8005afa <_strtod_l+0xb1a>
 800599a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800599e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80059a2:	ec4b ab10 	vmov	d0, sl, fp
 80059a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059aa:	f001 ffad 	bl	8007908 <__ulp>
 80059ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059b2:	ec53 2b10 	vmov	r2, r3, d0
 80059b6:	f7fa fe2f 	bl	8000618 <__aeabi_dmul>
 80059ba:	4652      	mov	r2, sl
 80059bc:	465b      	mov	r3, fp
 80059be:	f7fa fc75 	bl	80002ac <__adddf3>
 80059c2:	460b      	mov	r3, r1
 80059c4:	4983      	ldr	r1, [pc, #524]	; (8005bd4 <_strtod_l+0xbf4>)
 80059c6:	4a85      	ldr	r2, [pc, #532]	; (8005bdc <_strtod_l+0xbfc>)
 80059c8:	4019      	ands	r1, r3
 80059ca:	4291      	cmp	r1, r2
 80059cc:	4682      	mov	sl, r0
 80059ce:	d960      	bls.n	8005a92 <_strtod_l+0xab2>
 80059d0:	ee18 3a90 	vmov	r3, s17
 80059d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80059d8:	4293      	cmp	r3, r2
 80059da:	d104      	bne.n	80059e6 <_strtod_l+0xa06>
 80059dc:	ee18 3a10 	vmov	r3, s16
 80059e0:	3301      	adds	r3, #1
 80059e2:	f43f ad45 	beq.w	8005470 <_strtod_l+0x490>
 80059e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005be8 <_strtod_l+0xc08>
 80059ea:	f04f 3aff 	mov.w	sl, #4294967295
 80059ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059f0:	4620      	mov	r0, r4
 80059f2:	f001 fc57 	bl	80072a4 <_Bfree>
 80059f6:	9905      	ldr	r1, [sp, #20]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f001 fc53 	bl	80072a4 <_Bfree>
 80059fe:	4631      	mov	r1, r6
 8005a00:	4620      	mov	r0, r4
 8005a02:	f001 fc4f 	bl	80072a4 <_Bfree>
 8005a06:	4629      	mov	r1, r5
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f001 fc4b 	bl	80072a4 <_Bfree>
 8005a0e:	e61a      	b.n	8005646 <_strtod_l+0x666>
 8005a10:	f1ba 0f00 	cmp.w	sl, #0
 8005a14:	d11b      	bne.n	8005a4e <_strtod_l+0xa6e>
 8005a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a1a:	b9f3      	cbnz	r3, 8005a5a <_strtod_l+0xa7a>
 8005a1c:	4b6c      	ldr	r3, [pc, #432]	; (8005bd0 <_strtod_l+0xbf0>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	f7fb f86a 	bl	8000afc <__aeabi_dcmplt>
 8005a28:	b9d0      	cbnz	r0, 8005a60 <_strtod_l+0xa80>
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4b6c      	ldr	r3, [pc, #432]	; (8005be0 <_strtod_l+0xc00>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	f7fa fdf1 	bl	8000618 <__aeabi_dmul>
 8005a36:	4680      	mov	r8, r0
 8005a38:	4689      	mov	r9, r1
 8005a3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005a3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005a42:	9315      	str	r3, [sp, #84]	; 0x54
 8005a44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005a48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005a4c:	e79d      	b.n	800598a <_strtod_l+0x9aa>
 8005a4e:	f1ba 0f01 	cmp.w	sl, #1
 8005a52:	d102      	bne.n	8005a5a <_strtod_l+0xa7a>
 8005a54:	2f00      	cmp	r7, #0
 8005a56:	f43f ad83 	beq.w	8005560 <_strtod_l+0x580>
 8005a5a:	4b62      	ldr	r3, [pc, #392]	; (8005be4 <_strtod_l+0xc04>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	e78e      	b.n	800597e <_strtod_l+0x99e>
 8005a60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005be0 <_strtod_l+0xc00>
 8005a64:	f04f 0800 	mov.w	r8, #0
 8005a68:	e7e7      	b.n	8005a3a <_strtod_l+0xa5a>
 8005a6a:	4b5d      	ldr	r3, [pc, #372]	; (8005be0 <_strtod_l+0xc00>)
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	2200      	movs	r2, #0
 8005a72:	f7fa fdd1 	bl	8000618 <__aeabi_dmul>
 8005a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a78:	4680      	mov	r8, r0
 8005a7a:	4689      	mov	r9, r1
 8005a7c:	b933      	cbnz	r3, 8005a8c <_strtod_l+0xaac>
 8005a7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a82:	900e      	str	r0, [sp, #56]	; 0x38
 8005a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005a8a:	e7dd      	b.n	8005a48 <_strtod_l+0xa68>
 8005a8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005a90:	e7f9      	b.n	8005a86 <_strtod_l+0xaa6>
 8005a92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1a8      	bne.n	80059ee <_strtod_l+0xa0e>
 8005a9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005aa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aa2:	0d1b      	lsrs	r3, r3, #20
 8005aa4:	051b      	lsls	r3, r3, #20
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d1a1      	bne.n	80059ee <_strtod_l+0xa0e>
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fb f8c3 	bl	8000c38 <__aeabi_d2lz>
 8005ab2:	f7fa fd83 	bl	80005bc <__aeabi_l2d>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4640      	mov	r0, r8
 8005abc:	4649      	mov	r1, r9
 8005abe:	f7fa fbf3 	bl	80002a8 <__aeabi_dsub>
 8005ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ac8:	ea43 030a 	orr.w	r3, r3, sl
 8005acc:	4313      	orrs	r3, r2
 8005ace:	4680      	mov	r8, r0
 8005ad0:	4689      	mov	r9, r1
 8005ad2:	d055      	beq.n	8005b80 <_strtod_l+0xba0>
 8005ad4:	a336      	add	r3, pc, #216	; (adr r3, 8005bb0 <_strtod_l+0xbd0>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f7fb f80f 	bl	8000afc <__aeabi_dcmplt>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f47f acd0 	bne.w	8005484 <_strtod_l+0x4a4>
 8005ae4:	a334      	add	r3, pc, #208	; (adr r3, 8005bb8 <_strtod_l+0xbd8>)
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	f7fb f823 	bl	8000b38 <__aeabi_dcmpgt>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	f43f af7b 	beq.w	80059ee <_strtod_l+0xa0e>
 8005af8:	e4c4      	b.n	8005484 <_strtod_l+0x4a4>
 8005afa:	9b04      	ldr	r3, [sp, #16]
 8005afc:	b333      	cbz	r3, 8005b4c <_strtod_l+0xb6c>
 8005afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b04:	d822      	bhi.n	8005b4c <_strtod_l+0xb6c>
 8005b06:	a32e      	add	r3, pc, #184	; (adr r3, 8005bc0 <_strtod_l+0xbe0>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	4649      	mov	r1, r9
 8005b10:	f7fa fffe 	bl	8000b10 <__aeabi_dcmple>
 8005b14:	b1a0      	cbz	r0, 8005b40 <_strtod_l+0xb60>
 8005b16:	4649      	mov	r1, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	f7fb f855 	bl	8000bc8 <__aeabi_d2uiz>
 8005b1e:	2801      	cmp	r0, #1
 8005b20:	bf38      	it	cc
 8005b22:	2001      	movcc	r0, #1
 8005b24:	f7fa fcfe 	bl	8000524 <__aeabi_ui2d>
 8005b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	bb23      	cbnz	r3, 8005b7a <_strtod_l+0xb9a>
 8005b30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b34:	9010      	str	r0, [sp, #64]	; 0x40
 8005b36:	9311      	str	r3, [sp, #68]	; 0x44
 8005b38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005b50:	eeb0 0a48 	vmov.f32	s0, s16
 8005b54:	eef0 0a68 	vmov.f32	s1, s17
 8005b58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b5c:	f001 fed4 	bl	8007908 <__ulp>
 8005b60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005b64:	ec53 2b10 	vmov	r2, r3, d0
 8005b68:	f7fa fd56 	bl	8000618 <__aeabi_dmul>
 8005b6c:	ec53 2b18 	vmov	r2, r3, d8
 8005b70:	f7fa fb9c 	bl	80002ac <__adddf3>
 8005b74:	4682      	mov	sl, r0
 8005b76:	468b      	mov	fp, r1
 8005b78:	e78d      	b.n	8005a96 <_strtod_l+0xab6>
 8005b7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005b7e:	e7db      	b.n	8005b38 <_strtod_l+0xb58>
 8005b80:	a311      	add	r3, pc, #68	; (adr r3, 8005bc8 <_strtod_l+0xbe8>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa ffb9 	bl	8000afc <__aeabi_dcmplt>
 8005b8a:	e7b2      	b.n	8005af2 <_strtod_l+0xb12>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	f7ff ba6b 	b.w	8005070 <_strtod_l+0x90>
 8005b9a:	2a65      	cmp	r2, #101	; 0x65
 8005b9c:	f43f ab5f 	beq.w	800525e <_strtod_l+0x27e>
 8005ba0:	2a45      	cmp	r2, #69	; 0x45
 8005ba2:	f43f ab5c 	beq.w	800525e <_strtod_l+0x27e>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f7ff bb94 	b.w	80052d4 <_strtod_l+0x2f4>
 8005bac:	f3af 8000 	nop.w
 8005bb0:	94a03595 	.word	0x94a03595
 8005bb4:	3fdfffff 	.word	0x3fdfffff
 8005bb8:	35afe535 	.word	0x35afe535
 8005bbc:	3fe00000 	.word	0x3fe00000
 8005bc0:	ffc00000 	.word	0xffc00000
 8005bc4:	41dfffff 	.word	0x41dfffff
 8005bc8:	94a03595 	.word	0x94a03595
 8005bcc:	3fcfffff 	.word	0x3fcfffff
 8005bd0:	3ff00000 	.word	0x3ff00000
 8005bd4:	7ff00000 	.word	0x7ff00000
 8005bd8:	7fe00000 	.word	0x7fe00000
 8005bdc:	7c9fffff 	.word	0x7c9fffff
 8005be0:	3fe00000 	.word	0x3fe00000
 8005be4:	bff00000 	.word	0xbff00000
 8005be8:	7fefffff 	.word	0x7fefffff

08005bec <strtod>:
 8005bec:	460a      	mov	r2, r1
 8005bee:	4601      	mov	r1, r0
 8005bf0:	4802      	ldr	r0, [pc, #8]	; (8005bfc <strtod+0x10>)
 8005bf2:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <strtod+0x14>)
 8005bf4:	6800      	ldr	r0, [r0, #0]
 8005bf6:	f7ff b9f3 	b.w	8004fe0 <_strtod_l>
 8005bfa:	bf00      	nop
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	20000074 	.word	0x20000074

08005c04 <quorem>:
 8005c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c08:	6903      	ldr	r3, [r0, #16]
 8005c0a:	690c      	ldr	r4, [r1, #16]
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	4607      	mov	r7, r0
 8005c10:	f2c0 8081 	blt.w	8005d16 <quorem+0x112>
 8005c14:	3c01      	subs	r4, #1
 8005c16:	f101 0814 	add.w	r8, r1, #20
 8005c1a:	f100 0514 	add.w	r5, r0, #20
 8005c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c38:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c3c:	d331      	bcc.n	8005ca2 <quorem+0x9e>
 8005c3e:	f04f 0e00 	mov.w	lr, #0
 8005c42:	4640      	mov	r0, r8
 8005c44:	46ac      	mov	ip, r5
 8005c46:	46f2      	mov	sl, lr
 8005c48:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c4c:	b293      	uxth	r3, r2
 8005c4e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	ebaa 0303 	sub.w	r3, sl, r3
 8005c5c:	f8dc a000 	ldr.w	sl, [ip]
 8005c60:	0c12      	lsrs	r2, r2, #16
 8005c62:	fa13 f38a 	uxtah	r3, r3, sl
 8005c66:	fb06 e202 	mla	r2, r6, r2, lr
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	9b00      	ldr	r3, [sp, #0]
 8005c6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c72:	b292      	uxth	r2, r2
 8005c74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005c80:	4581      	cmp	r9, r0
 8005c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c86:	f84c 3b04 	str.w	r3, [ip], #4
 8005c8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c8e:	d2db      	bcs.n	8005c48 <quorem+0x44>
 8005c90:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c94:	b92b      	cbnz	r3, 8005ca2 <quorem+0x9e>
 8005c96:	9b01      	ldr	r3, [sp, #4]
 8005c98:	3b04      	subs	r3, #4
 8005c9a:	429d      	cmp	r5, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	d32e      	bcc.n	8005cfe <quorem+0xfa>
 8005ca0:	613c      	str	r4, [r7, #16]
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f001 fd8a 	bl	80077bc <__mcmp>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	db24      	blt.n	8005cf6 <quorem+0xf2>
 8005cac:	3601      	adds	r6, #1
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f04f 0c00 	mov.w	ip, #0
 8005cb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cb8:	f8d0 e000 	ldr.w	lr, [r0]
 8005cbc:	b293      	uxth	r3, r2
 8005cbe:	ebac 0303 	sub.w	r3, ip, r3
 8005cc2:	0c12      	lsrs	r2, r2, #16
 8005cc4:	fa13 f38e 	uxtah	r3, r3, lr
 8005cc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ccc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd6:	45c1      	cmp	r9, r8
 8005cd8:	f840 3b04 	str.w	r3, [r0], #4
 8005cdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ce0:	d2e8      	bcs.n	8005cb4 <quorem+0xb0>
 8005ce2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cea:	b922      	cbnz	r2, 8005cf6 <quorem+0xf2>
 8005cec:	3b04      	subs	r3, #4
 8005cee:	429d      	cmp	r5, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	d30a      	bcc.n	8005d0a <quorem+0x106>
 8005cf4:	613c      	str	r4, [r7, #16]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	b003      	add	sp, #12
 8005cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	d1cc      	bne.n	8005ca0 <quorem+0x9c>
 8005d06:	3c01      	subs	r4, #1
 8005d08:	e7c7      	b.n	8005c9a <quorem+0x96>
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	3b04      	subs	r3, #4
 8005d0e:	2a00      	cmp	r2, #0
 8005d10:	d1f0      	bne.n	8005cf4 <quorem+0xf0>
 8005d12:	3c01      	subs	r4, #1
 8005d14:	e7eb      	b.n	8005cee <quorem+0xea>
 8005d16:	2000      	movs	r0, #0
 8005d18:	e7ee      	b.n	8005cf8 <quorem+0xf4>
 8005d1a:	0000      	movs	r0, r0
 8005d1c:	0000      	movs	r0, r0
	...

08005d20 <_dtoa_r>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	ed2d 8b04 	vpush	{d8-d9}
 8005d28:	ec57 6b10 	vmov	r6, r7, d0
 8005d2c:	b093      	sub	sp, #76	; 0x4c
 8005d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d34:	9106      	str	r1, [sp, #24]
 8005d36:	ee10 aa10 	vmov	sl, s0
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8005d40:	46bb      	mov	fp, r7
 8005d42:	b975      	cbnz	r5, 8005d62 <_dtoa_r+0x42>
 8005d44:	2010      	movs	r0, #16
 8005d46:	f001 fa45 	bl	80071d4 <malloc>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d4e:	b920      	cbnz	r0, 8005d5a <_dtoa_r+0x3a>
 8005d50:	4ba7      	ldr	r3, [pc, #668]	; (8005ff0 <_dtoa_r+0x2d0>)
 8005d52:	21ea      	movs	r1, #234	; 0xea
 8005d54:	48a7      	ldr	r0, [pc, #668]	; (8005ff4 <_dtoa_r+0x2d4>)
 8005d56:	f002 fb0f 	bl	8008378 <__assert_func>
 8005d5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d5e:	6005      	str	r5, [r0, #0]
 8005d60:	60c5      	str	r5, [r0, #12]
 8005d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d64:	6819      	ldr	r1, [r3, #0]
 8005d66:	b151      	cbz	r1, 8005d7e <_dtoa_r+0x5e>
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	604a      	str	r2, [r1, #4]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4093      	lsls	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
 8005d72:	4620      	mov	r0, r4
 8005d74:	f001 fa96 	bl	80072a4 <_Bfree>
 8005d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	1e3b      	subs	r3, r7, #0
 8005d80:	bfaa      	itet	ge
 8005d82:	2300      	movge	r3, #0
 8005d84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005d88:	f8c8 3000 	strge.w	r3, [r8]
 8005d8c:	4b9a      	ldr	r3, [pc, #616]	; (8005ff8 <_dtoa_r+0x2d8>)
 8005d8e:	bfbc      	itt	lt
 8005d90:	2201      	movlt	r2, #1
 8005d92:	f8c8 2000 	strlt.w	r2, [r8]
 8005d96:	ea33 030b 	bics.w	r3, r3, fp
 8005d9a:	d11b      	bne.n	8005dd4 <_dtoa_r+0xb4>
 8005d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005da8:	4333      	orrs	r3, r6
 8005daa:	f000 8592 	beq.w	80068d2 <_dtoa_r+0xbb2>
 8005dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db0:	b963      	cbnz	r3, 8005dcc <_dtoa_r+0xac>
 8005db2:	4b92      	ldr	r3, [pc, #584]	; (8005ffc <_dtoa_r+0x2dc>)
 8005db4:	e022      	b.n	8005dfc <_dtoa_r+0xdc>
 8005db6:	4b92      	ldr	r3, [pc, #584]	; (8006000 <_dtoa_r+0x2e0>)
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	9801      	ldr	r0, [sp, #4]
 8005dc2:	b013      	add	sp, #76	; 0x4c
 8005dc4:	ecbd 8b04 	vpop	{d8-d9}
 8005dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	4b8b      	ldr	r3, [pc, #556]	; (8005ffc <_dtoa_r+0x2dc>)
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	3303      	adds	r3, #3
 8005dd2:	e7f3      	b.n	8005dbc <_dtoa_r+0x9c>
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4650      	mov	r0, sl
 8005dda:	4659      	mov	r1, fp
 8005ddc:	f7fa fe84 	bl	8000ae8 <__aeabi_dcmpeq>
 8005de0:	ec4b ab19 	vmov	d9, sl, fp
 8005de4:	4680      	mov	r8, r0
 8005de6:	b158      	cbz	r0, 8005e00 <_dtoa_r+0xe0>
 8005de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dea:	2301      	movs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 856b 	beq.w	80068cc <_dtoa_r+0xbac>
 8005df6:	4883      	ldr	r0, [pc, #524]	; (8006004 <_dtoa_r+0x2e4>)
 8005df8:	6018      	str	r0, [r3, #0]
 8005dfa:	1e43      	subs	r3, r0, #1
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	e7df      	b.n	8005dc0 <_dtoa_r+0xa0>
 8005e00:	ec4b ab10 	vmov	d0, sl, fp
 8005e04:	aa10      	add	r2, sp, #64	; 0x40
 8005e06:	a911      	add	r1, sp, #68	; 0x44
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f001 fdf9 	bl	8007a00 <__d2b>
 8005e0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e12:	ee08 0a10 	vmov	s16, r0
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	f000 8084 	beq.w	8005f24 <_dtoa_r+0x204>
 8005e1c:	ee19 3a90 	vmov	r3, s19
 8005e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e28:	4656      	mov	r6, sl
 8005e2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005e36:	4b74      	ldr	r3, [pc, #464]	; (8006008 <_dtoa_r+0x2e8>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa fa33 	bl	80002a8 <__aeabi_dsub>
 8005e42:	a365      	add	r3, pc, #404	; (adr r3, 8005fd8 <_dtoa_r+0x2b8>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa fbe6 	bl	8000618 <__aeabi_dmul>
 8005e4c:	a364      	add	r3, pc, #400	; (adr r3, 8005fe0 <_dtoa_r+0x2c0>)
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f7fa fa2b 	bl	80002ac <__adddf3>
 8005e56:	4606      	mov	r6, r0
 8005e58:	4628      	mov	r0, r5
 8005e5a:	460f      	mov	r7, r1
 8005e5c:	f7fa fb72 	bl	8000544 <__aeabi_i2d>
 8005e60:	a361      	add	r3, pc, #388	; (adr r3, 8005fe8 <_dtoa_r+0x2c8>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa fbd7 	bl	8000618 <__aeabi_dmul>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4630      	mov	r0, r6
 8005e70:	4639      	mov	r1, r7
 8005e72:	f7fa fa1b 	bl	80002ac <__adddf3>
 8005e76:	4606      	mov	r6, r0
 8005e78:	460f      	mov	r7, r1
 8005e7a:	f7fa fe7d 	bl	8000b78 <__aeabi_d2iz>
 8005e7e:	2200      	movs	r2, #0
 8005e80:	9000      	str	r0, [sp, #0]
 8005e82:	2300      	movs	r3, #0
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fe38 	bl	8000afc <__aeabi_dcmplt>
 8005e8c:	b150      	cbz	r0, 8005ea4 <_dtoa_r+0x184>
 8005e8e:	9800      	ldr	r0, [sp, #0]
 8005e90:	f7fa fb58 	bl	8000544 <__aeabi_i2d>
 8005e94:	4632      	mov	r2, r6
 8005e96:	463b      	mov	r3, r7
 8005e98:	f7fa fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e9c:	b910      	cbnz	r0, 8005ea4 <_dtoa_r+0x184>
 8005e9e:	9b00      	ldr	r3, [sp, #0]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	9b00      	ldr	r3, [sp, #0]
 8005ea6:	2b16      	cmp	r3, #22
 8005ea8:	d85a      	bhi.n	8005f60 <_dtoa_r+0x240>
 8005eaa:	9a00      	ldr	r2, [sp, #0]
 8005eac:	4b57      	ldr	r3, [pc, #348]	; (800600c <_dtoa_r+0x2ec>)
 8005eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	ec51 0b19 	vmov	r0, r1, d9
 8005eba:	f7fa fe1f 	bl	8000afc <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d050      	beq.n	8005f64 <_dtoa_r+0x244>
 8005ec2:	9b00      	ldr	r3, [sp, #0]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ece:	1b5d      	subs	r5, r3, r5
 8005ed0:	1e6b      	subs	r3, r5, #1
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	bf45      	ittet	mi
 8005ed6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005eda:	9304      	strmi	r3, [sp, #16]
 8005edc:	2300      	movpl	r3, #0
 8005ede:	2300      	movmi	r3, #0
 8005ee0:	bf4c      	ite	mi
 8005ee2:	9305      	strmi	r3, [sp, #20]
 8005ee4:	9304      	strpl	r3, [sp, #16]
 8005ee6:	9b00      	ldr	r3, [sp, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db3d      	blt.n	8005f68 <_dtoa_r+0x248>
 8005eec:	9b05      	ldr	r3, [sp, #20]
 8005eee:	9a00      	ldr	r2, [sp, #0]
 8005ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8005ef2:	4413      	add	r3, r2
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	f200 8089 	bhi.w	8006014 <_dtoa_r+0x2f4>
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	bfc4      	itt	gt
 8005f06:	3b04      	subgt	r3, #4
 8005f08:	9306      	strgt	r3, [sp, #24]
 8005f0a:	9b06      	ldr	r3, [sp, #24]
 8005f0c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f10:	bfcc      	ite	gt
 8005f12:	2500      	movgt	r5, #0
 8005f14:	2501      	movle	r5, #1
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	f200 8087 	bhi.w	800602a <_dtoa_r+0x30a>
 8005f1c:	e8df f003 	tbb	[pc, r3]
 8005f20:	59383a2d 	.word	0x59383a2d
 8005f24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005f28:	441d      	add	r5, r3
 8005f2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	bfc1      	itttt	gt
 8005f32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005f3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f42:	bfda      	itte	le
 8005f44:	f1c3 0320 	rsble	r3, r3, #32
 8005f48:	fa06 f003 	lslle.w	r0, r6, r3
 8005f4c:	4318      	orrgt	r0, r3
 8005f4e:	f7fa fae9 	bl	8000524 <__aeabi_ui2d>
 8005f52:	2301      	movs	r3, #1
 8005f54:	4606      	mov	r6, r0
 8005f56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f5a:	3d01      	subs	r5, #1
 8005f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f5e:	e76a      	b.n	8005e36 <_dtoa_r+0x116>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e7b2      	b.n	8005eca <_dtoa_r+0x1aa>
 8005f64:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f66:	e7b1      	b.n	8005ecc <_dtoa_r+0x1ac>
 8005f68:	9b04      	ldr	r3, [sp, #16]
 8005f6a:	9a00      	ldr	r2, [sp, #0]
 8005f6c:	1a9b      	subs	r3, r3, r2
 8005f6e:	9304      	str	r3, [sp, #16]
 8005f70:	4253      	negs	r3, r2
 8005f72:	9307      	str	r3, [sp, #28]
 8005f74:	2300      	movs	r3, #0
 8005f76:	930a      	str	r3, [sp, #40]	; 0x28
 8005f78:	e7bf      	b.n	8005efa <_dtoa_r+0x1da>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9308      	str	r3, [sp, #32]
 8005f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dc55      	bgt.n	8006030 <_dtoa_r+0x310>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f8e:	e00c      	b.n	8005faa <_dtoa_r+0x28a>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e7f3      	b.n	8005f7c <_dtoa_r+0x25c>
 8005f94:	2300      	movs	r3, #0
 8005f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f98:	9308      	str	r3, [sp, #32]
 8005f9a:	9b00      	ldr	r3, [sp, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	9302      	str	r3, [sp, #8]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	bfb8      	it	lt
 8005fa8:	2301      	movlt	r3, #1
 8005faa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fac:	2200      	movs	r2, #0
 8005fae:	6042      	str	r2, [r0, #4]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	f102 0614 	add.w	r6, r2, #20
 8005fb6:	429e      	cmp	r6, r3
 8005fb8:	6841      	ldr	r1, [r0, #4]
 8005fba:	d93d      	bls.n	8006038 <_dtoa_r+0x318>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f001 f931 	bl	8007224 <_Balloc>
 8005fc2:	9001      	str	r0, [sp, #4]
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d13b      	bne.n	8006040 <_dtoa_r+0x320>
 8005fc8:	4b11      	ldr	r3, [pc, #68]	; (8006010 <_dtoa_r+0x2f0>)
 8005fca:	4602      	mov	r2, r0
 8005fcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fd0:	e6c0      	b.n	8005d54 <_dtoa_r+0x34>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e7df      	b.n	8005f96 <_dtoa_r+0x276>
 8005fd6:	bf00      	nop
 8005fd8:	636f4361 	.word	0x636f4361
 8005fdc:	3fd287a7 	.word	0x3fd287a7
 8005fe0:	8b60c8b3 	.word	0x8b60c8b3
 8005fe4:	3fc68a28 	.word	0x3fc68a28
 8005fe8:	509f79fb 	.word	0x509f79fb
 8005fec:	3fd34413 	.word	0x3fd34413
 8005ff0:	0800898d 	.word	0x0800898d
 8005ff4:	080089a4 	.word	0x080089a4
 8005ff8:	7ff00000 	.word	0x7ff00000
 8005ffc:	08008989 	.word	0x08008989
 8006000:	08008980 	.word	0x08008980
 8006004:	0800890d 	.word	0x0800890d
 8006008:	3ff80000 	.word	0x3ff80000
 800600c:	08008b70 	.word	0x08008b70
 8006010:	080089ff 	.word	0x080089ff
 8006014:	2501      	movs	r5, #1
 8006016:	2300      	movs	r3, #0
 8006018:	9306      	str	r3, [sp, #24]
 800601a:	9508      	str	r5, [sp, #32]
 800601c:	f04f 33ff 	mov.w	r3, #4294967295
 8006020:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	2312      	movs	r3, #18
 8006028:	e7b0      	b.n	8005f8c <_dtoa_r+0x26c>
 800602a:	2301      	movs	r3, #1
 800602c:	9308      	str	r3, [sp, #32]
 800602e:	e7f5      	b.n	800601c <_dtoa_r+0x2fc>
 8006030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006032:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006036:	e7b8      	b.n	8005faa <_dtoa_r+0x28a>
 8006038:	3101      	adds	r1, #1
 800603a:	6041      	str	r1, [r0, #4]
 800603c:	0052      	lsls	r2, r2, #1
 800603e:	e7b8      	b.n	8005fb2 <_dtoa_r+0x292>
 8006040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006042:	9a01      	ldr	r2, [sp, #4]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	2b0e      	cmp	r3, #14
 800604a:	f200 809d 	bhi.w	8006188 <_dtoa_r+0x468>
 800604e:	2d00      	cmp	r5, #0
 8006050:	f000 809a 	beq.w	8006188 <_dtoa_r+0x468>
 8006054:	9b00      	ldr	r3, [sp, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	dd32      	ble.n	80060c0 <_dtoa_r+0x3a0>
 800605a:	4ab7      	ldr	r2, [pc, #732]	; (8006338 <_dtoa_r+0x618>)
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006068:	9b00      	ldr	r3, [sp, #0]
 800606a:	05d8      	lsls	r0, r3, #23
 800606c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006070:	d516      	bpl.n	80060a0 <_dtoa_r+0x380>
 8006072:	4bb2      	ldr	r3, [pc, #712]	; (800633c <_dtoa_r+0x61c>)
 8006074:	ec51 0b19 	vmov	r0, r1, d9
 8006078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800607c:	f7fa fbf6 	bl	800086c <__aeabi_ddiv>
 8006080:	f007 070f 	and.w	r7, r7, #15
 8006084:	4682      	mov	sl, r0
 8006086:	468b      	mov	fp, r1
 8006088:	2503      	movs	r5, #3
 800608a:	4eac      	ldr	r6, [pc, #688]	; (800633c <_dtoa_r+0x61c>)
 800608c:	b957      	cbnz	r7, 80060a4 <_dtoa_r+0x384>
 800608e:	4642      	mov	r2, r8
 8006090:	464b      	mov	r3, r9
 8006092:	4650      	mov	r0, sl
 8006094:	4659      	mov	r1, fp
 8006096:	f7fa fbe9 	bl	800086c <__aeabi_ddiv>
 800609a:	4682      	mov	sl, r0
 800609c:	468b      	mov	fp, r1
 800609e:	e028      	b.n	80060f2 <_dtoa_r+0x3d2>
 80060a0:	2502      	movs	r5, #2
 80060a2:	e7f2      	b.n	800608a <_dtoa_r+0x36a>
 80060a4:	07f9      	lsls	r1, r7, #31
 80060a6:	d508      	bpl.n	80060ba <_dtoa_r+0x39a>
 80060a8:	4640      	mov	r0, r8
 80060aa:	4649      	mov	r1, r9
 80060ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060b0:	f7fa fab2 	bl	8000618 <__aeabi_dmul>
 80060b4:	3501      	adds	r5, #1
 80060b6:	4680      	mov	r8, r0
 80060b8:	4689      	mov	r9, r1
 80060ba:	107f      	asrs	r7, r7, #1
 80060bc:	3608      	adds	r6, #8
 80060be:	e7e5      	b.n	800608c <_dtoa_r+0x36c>
 80060c0:	f000 809b 	beq.w	80061fa <_dtoa_r+0x4da>
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	4f9d      	ldr	r7, [pc, #628]	; (800633c <_dtoa_r+0x61c>)
 80060c8:	425e      	negs	r6, r3
 80060ca:	4b9b      	ldr	r3, [pc, #620]	; (8006338 <_dtoa_r+0x618>)
 80060cc:	f006 020f 	and.w	r2, r6, #15
 80060d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	ec51 0b19 	vmov	r0, r1, d9
 80060dc:	f7fa fa9c 	bl	8000618 <__aeabi_dmul>
 80060e0:	1136      	asrs	r6, r6, #4
 80060e2:	4682      	mov	sl, r0
 80060e4:	468b      	mov	fp, r1
 80060e6:	2300      	movs	r3, #0
 80060e8:	2502      	movs	r5, #2
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	d17a      	bne.n	80061e4 <_dtoa_r+0x4c4>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1d3      	bne.n	800609a <_dtoa_r+0x37a>
 80060f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8082 	beq.w	80061fe <_dtoa_r+0x4de>
 80060fa:	4b91      	ldr	r3, [pc, #580]	; (8006340 <_dtoa_r+0x620>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	4650      	mov	r0, sl
 8006100:	4659      	mov	r1, fp
 8006102:	f7fa fcfb 	bl	8000afc <__aeabi_dcmplt>
 8006106:	2800      	cmp	r0, #0
 8006108:	d079      	beq.n	80061fe <_dtoa_r+0x4de>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d076      	beq.n	80061fe <_dtoa_r+0x4de>
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	dd36      	ble.n	8006184 <_dtoa_r+0x464>
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	4650      	mov	r0, sl
 800611a:	4659      	mov	r1, fp
 800611c:	1e5f      	subs	r7, r3, #1
 800611e:	2200      	movs	r2, #0
 8006120:	4b88      	ldr	r3, [pc, #544]	; (8006344 <_dtoa_r+0x624>)
 8006122:	f7fa fa79 	bl	8000618 <__aeabi_dmul>
 8006126:	9e02      	ldr	r6, [sp, #8]
 8006128:	4682      	mov	sl, r0
 800612a:	468b      	mov	fp, r1
 800612c:	3501      	adds	r5, #1
 800612e:	4628      	mov	r0, r5
 8006130:	f7fa fa08 	bl	8000544 <__aeabi_i2d>
 8006134:	4652      	mov	r2, sl
 8006136:	465b      	mov	r3, fp
 8006138:	f7fa fa6e 	bl	8000618 <__aeabi_dmul>
 800613c:	4b82      	ldr	r3, [pc, #520]	; (8006348 <_dtoa_r+0x628>)
 800613e:	2200      	movs	r2, #0
 8006140:	f7fa f8b4 	bl	80002ac <__adddf3>
 8006144:	46d0      	mov	r8, sl
 8006146:	46d9      	mov	r9, fp
 8006148:	4682      	mov	sl, r0
 800614a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800614e:	2e00      	cmp	r6, #0
 8006150:	d158      	bne.n	8006204 <_dtoa_r+0x4e4>
 8006152:	4b7e      	ldr	r3, [pc, #504]	; (800634c <_dtoa_r+0x62c>)
 8006154:	2200      	movs	r2, #0
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa f8a5 	bl	80002a8 <__aeabi_dsub>
 800615e:	4652      	mov	r2, sl
 8006160:	465b      	mov	r3, fp
 8006162:	4680      	mov	r8, r0
 8006164:	4689      	mov	r9, r1
 8006166:	f7fa fce7 	bl	8000b38 <__aeabi_dcmpgt>
 800616a:	2800      	cmp	r0, #0
 800616c:	f040 8295 	bne.w	800669a <_dtoa_r+0x97a>
 8006170:	4652      	mov	r2, sl
 8006172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	f7fa fcbf 	bl	8000afc <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	f040 8289 	bne.w	8006696 <_dtoa_r+0x976>
 8006184:	ec5b ab19 	vmov	sl, fp, d9
 8006188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800618a:	2b00      	cmp	r3, #0
 800618c:	f2c0 8148 	blt.w	8006420 <_dtoa_r+0x700>
 8006190:	9a00      	ldr	r2, [sp, #0]
 8006192:	2a0e      	cmp	r2, #14
 8006194:	f300 8144 	bgt.w	8006420 <_dtoa_r+0x700>
 8006198:	4b67      	ldr	r3, [pc, #412]	; (8006338 <_dtoa_r+0x618>)
 800619a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800619e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f280 80d5 	bge.w	8006354 <_dtoa_r+0x634>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f300 80d1 	bgt.w	8006354 <_dtoa_r+0x634>
 80061b2:	f040 826f 	bne.w	8006694 <_dtoa_r+0x974>
 80061b6:	4b65      	ldr	r3, [pc, #404]	; (800634c <_dtoa_r+0x62c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa fa2b 	bl	8000618 <__aeabi_dmul>
 80061c2:	4652      	mov	r2, sl
 80061c4:	465b      	mov	r3, fp
 80061c6:	f7fa fcad 	bl	8000b24 <__aeabi_dcmpge>
 80061ca:	9e03      	ldr	r6, [sp, #12]
 80061cc:	4637      	mov	r7, r6
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f040 8245 	bne.w	800665e <_dtoa_r+0x93e>
 80061d4:	9d01      	ldr	r5, [sp, #4]
 80061d6:	2331      	movs	r3, #49	; 0x31
 80061d8:	f805 3b01 	strb.w	r3, [r5], #1
 80061dc:	9b00      	ldr	r3, [sp, #0]
 80061de:	3301      	adds	r3, #1
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	e240      	b.n	8006666 <_dtoa_r+0x946>
 80061e4:	07f2      	lsls	r2, r6, #31
 80061e6:	d505      	bpl.n	80061f4 <_dtoa_r+0x4d4>
 80061e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ec:	f7fa fa14 	bl	8000618 <__aeabi_dmul>
 80061f0:	3501      	adds	r5, #1
 80061f2:	2301      	movs	r3, #1
 80061f4:	1076      	asrs	r6, r6, #1
 80061f6:	3708      	adds	r7, #8
 80061f8:	e777      	b.n	80060ea <_dtoa_r+0x3ca>
 80061fa:	2502      	movs	r5, #2
 80061fc:	e779      	b.n	80060f2 <_dtoa_r+0x3d2>
 80061fe:	9f00      	ldr	r7, [sp, #0]
 8006200:	9e03      	ldr	r6, [sp, #12]
 8006202:	e794      	b.n	800612e <_dtoa_r+0x40e>
 8006204:	9901      	ldr	r1, [sp, #4]
 8006206:	4b4c      	ldr	r3, [pc, #304]	; (8006338 <_dtoa_r+0x618>)
 8006208:	4431      	add	r1, r6
 800620a:	910d      	str	r1, [sp, #52]	; 0x34
 800620c:	9908      	ldr	r1, [sp, #32]
 800620e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006216:	2900      	cmp	r1, #0
 8006218:	d043      	beq.n	80062a2 <_dtoa_r+0x582>
 800621a:	494d      	ldr	r1, [pc, #308]	; (8006350 <_dtoa_r+0x630>)
 800621c:	2000      	movs	r0, #0
 800621e:	f7fa fb25 	bl	800086c <__aeabi_ddiv>
 8006222:	4652      	mov	r2, sl
 8006224:	465b      	mov	r3, fp
 8006226:	f7fa f83f 	bl	80002a8 <__aeabi_dsub>
 800622a:	9d01      	ldr	r5, [sp, #4]
 800622c:	4682      	mov	sl, r0
 800622e:	468b      	mov	fp, r1
 8006230:	4649      	mov	r1, r9
 8006232:	4640      	mov	r0, r8
 8006234:	f7fa fca0 	bl	8000b78 <__aeabi_d2iz>
 8006238:	4606      	mov	r6, r0
 800623a:	f7fa f983 	bl	8000544 <__aeabi_i2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa f82f 	bl	80002a8 <__aeabi_dsub>
 800624a:	3630      	adds	r6, #48	; 0x30
 800624c:	f805 6b01 	strb.w	r6, [r5], #1
 8006250:	4652      	mov	r2, sl
 8006252:	465b      	mov	r3, fp
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	f7fa fc50 	bl	8000afc <__aeabi_dcmplt>
 800625c:	2800      	cmp	r0, #0
 800625e:	d163      	bne.n	8006328 <_dtoa_r+0x608>
 8006260:	4642      	mov	r2, r8
 8006262:	464b      	mov	r3, r9
 8006264:	4936      	ldr	r1, [pc, #216]	; (8006340 <_dtoa_r+0x620>)
 8006266:	2000      	movs	r0, #0
 8006268:	f7fa f81e 	bl	80002a8 <__aeabi_dsub>
 800626c:	4652      	mov	r2, sl
 800626e:	465b      	mov	r3, fp
 8006270:	f7fa fc44 	bl	8000afc <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80b5 	bne.w	80063e4 <_dtoa_r+0x6c4>
 800627a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800627c:	429d      	cmp	r5, r3
 800627e:	d081      	beq.n	8006184 <_dtoa_r+0x464>
 8006280:	4b30      	ldr	r3, [pc, #192]	; (8006344 <_dtoa_r+0x624>)
 8006282:	2200      	movs	r2, #0
 8006284:	4650      	mov	r0, sl
 8006286:	4659      	mov	r1, fp
 8006288:	f7fa f9c6 	bl	8000618 <__aeabi_dmul>
 800628c:	4b2d      	ldr	r3, [pc, #180]	; (8006344 <_dtoa_r+0x624>)
 800628e:	4682      	mov	sl, r0
 8006290:	468b      	mov	fp, r1
 8006292:	4640      	mov	r0, r8
 8006294:	4649      	mov	r1, r9
 8006296:	2200      	movs	r2, #0
 8006298:	f7fa f9be 	bl	8000618 <__aeabi_dmul>
 800629c:	4680      	mov	r8, r0
 800629e:	4689      	mov	r9, r1
 80062a0:	e7c6      	b.n	8006230 <_dtoa_r+0x510>
 80062a2:	4650      	mov	r0, sl
 80062a4:	4659      	mov	r1, fp
 80062a6:	f7fa f9b7 	bl	8000618 <__aeabi_dmul>
 80062aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ac:	9d01      	ldr	r5, [sp, #4]
 80062ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b0:	4682      	mov	sl, r0
 80062b2:	468b      	mov	fp, r1
 80062b4:	4649      	mov	r1, r9
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7fa fc5e 	bl	8000b78 <__aeabi_d2iz>
 80062bc:	4606      	mov	r6, r0
 80062be:	f7fa f941 	bl	8000544 <__aeabi_i2d>
 80062c2:	3630      	adds	r6, #48	; 0x30
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4640      	mov	r0, r8
 80062ca:	4649      	mov	r1, r9
 80062cc:	f7f9 ffec 	bl	80002a8 <__aeabi_dsub>
 80062d0:	f805 6b01 	strb.w	r6, [r5], #1
 80062d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d6:	429d      	cmp	r5, r3
 80062d8:	4680      	mov	r8, r0
 80062da:	4689      	mov	r9, r1
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	d124      	bne.n	800632c <_dtoa_r+0x60c>
 80062e2:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <_dtoa_r+0x630>)
 80062e4:	4650      	mov	r0, sl
 80062e6:	4659      	mov	r1, fp
 80062e8:	f7f9 ffe0 	bl	80002ac <__adddf3>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	4640      	mov	r0, r8
 80062f2:	4649      	mov	r1, r9
 80062f4:	f7fa fc20 	bl	8000b38 <__aeabi_dcmpgt>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d173      	bne.n	80063e4 <_dtoa_r+0x6c4>
 80062fc:	4652      	mov	r2, sl
 80062fe:	465b      	mov	r3, fp
 8006300:	4913      	ldr	r1, [pc, #76]	; (8006350 <_dtoa_r+0x630>)
 8006302:	2000      	movs	r0, #0
 8006304:	f7f9 ffd0 	bl	80002a8 <__aeabi_dsub>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4640      	mov	r0, r8
 800630e:	4649      	mov	r1, r9
 8006310:	f7fa fbf4 	bl	8000afc <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	f43f af35 	beq.w	8006184 <_dtoa_r+0x464>
 800631a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800631c:	1e6b      	subs	r3, r5, #1
 800631e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006320:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006324:	2b30      	cmp	r3, #48	; 0x30
 8006326:	d0f8      	beq.n	800631a <_dtoa_r+0x5fa>
 8006328:	9700      	str	r7, [sp, #0]
 800632a:	e049      	b.n	80063c0 <_dtoa_r+0x6a0>
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <_dtoa_r+0x624>)
 800632e:	f7fa f973 	bl	8000618 <__aeabi_dmul>
 8006332:	4680      	mov	r8, r0
 8006334:	4689      	mov	r9, r1
 8006336:	e7bd      	b.n	80062b4 <_dtoa_r+0x594>
 8006338:	08008b70 	.word	0x08008b70
 800633c:	08008b48 	.word	0x08008b48
 8006340:	3ff00000 	.word	0x3ff00000
 8006344:	40240000 	.word	0x40240000
 8006348:	401c0000 	.word	0x401c0000
 800634c:	40140000 	.word	0x40140000
 8006350:	3fe00000 	.word	0x3fe00000
 8006354:	9d01      	ldr	r5, [sp, #4]
 8006356:	4656      	mov	r6, sl
 8006358:	465f      	mov	r7, fp
 800635a:	4642      	mov	r2, r8
 800635c:	464b      	mov	r3, r9
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa fa83 	bl	800086c <__aeabi_ddiv>
 8006366:	f7fa fc07 	bl	8000b78 <__aeabi_d2iz>
 800636a:	4682      	mov	sl, r0
 800636c:	f7fa f8ea 	bl	8000544 <__aeabi_i2d>
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	f7fa f950 	bl	8000618 <__aeabi_dmul>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4630      	mov	r0, r6
 800637e:	4639      	mov	r1, r7
 8006380:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006384:	f7f9 ff90 	bl	80002a8 <__aeabi_dsub>
 8006388:	f805 6b01 	strb.w	r6, [r5], #1
 800638c:	9e01      	ldr	r6, [sp, #4]
 800638e:	9f03      	ldr	r7, [sp, #12]
 8006390:	1bae      	subs	r6, r5, r6
 8006392:	42b7      	cmp	r7, r6
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	d135      	bne.n	8006406 <_dtoa_r+0x6e6>
 800639a:	f7f9 ff87 	bl	80002ac <__adddf3>
 800639e:	4642      	mov	r2, r8
 80063a0:	464b      	mov	r3, r9
 80063a2:	4606      	mov	r6, r0
 80063a4:	460f      	mov	r7, r1
 80063a6:	f7fa fbc7 	bl	8000b38 <__aeabi_dcmpgt>
 80063aa:	b9d0      	cbnz	r0, 80063e2 <_dtoa_r+0x6c2>
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	f7fa fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80063b8:	b110      	cbz	r0, 80063c0 <_dtoa_r+0x6a0>
 80063ba:	f01a 0f01 	tst.w	sl, #1
 80063be:	d110      	bne.n	80063e2 <_dtoa_r+0x6c2>
 80063c0:	4620      	mov	r0, r4
 80063c2:	ee18 1a10 	vmov	r1, s16
 80063c6:	f000 ff6d 	bl	80072a4 <_Bfree>
 80063ca:	2300      	movs	r3, #0
 80063cc:	9800      	ldr	r0, [sp, #0]
 80063ce:	702b      	strb	r3, [r5, #0]
 80063d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063d2:	3001      	adds	r0, #1
 80063d4:	6018      	str	r0, [r3, #0]
 80063d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f43f acf1 	beq.w	8005dc0 <_dtoa_r+0xa0>
 80063de:	601d      	str	r5, [r3, #0]
 80063e0:	e4ee      	b.n	8005dc0 <_dtoa_r+0xa0>
 80063e2:	9f00      	ldr	r7, [sp, #0]
 80063e4:	462b      	mov	r3, r5
 80063e6:	461d      	mov	r5, r3
 80063e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ec:	2a39      	cmp	r2, #57	; 0x39
 80063ee:	d106      	bne.n	80063fe <_dtoa_r+0x6de>
 80063f0:	9a01      	ldr	r2, [sp, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d1f7      	bne.n	80063e6 <_dtoa_r+0x6c6>
 80063f6:	9901      	ldr	r1, [sp, #4]
 80063f8:	2230      	movs	r2, #48	; 0x30
 80063fa:	3701      	adds	r7, #1
 80063fc:	700a      	strb	r2, [r1, #0]
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	3201      	adds	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e790      	b.n	8006328 <_dtoa_r+0x608>
 8006406:	4ba6      	ldr	r3, [pc, #664]	; (80066a0 <_dtoa_r+0x980>)
 8006408:	2200      	movs	r2, #0
 800640a:	f7fa f905 	bl	8000618 <__aeabi_dmul>
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	4606      	mov	r6, r0
 8006414:	460f      	mov	r7, r1
 8006416:	f7fa fb67 	bl	8000ae8 <__aeabi_dcmpeq>
 800641a:	2800      	cmp	r0, #0
 800641c:	d09d      	beq.n	800635a <_dtoa_r+0x63a>
 800641e:	e7cf      	b.n	80063c0 <_dtoa_r+0x6a0>
 8006420:	9a08      	ldr	r2, [sp, #32]
 8006422:	2a00      	cmp	r2, #0
 8006424:	f000 80d7 	beq.w	80065d6 <_dtoa_r+0x8b6>
 8006428:	9a06      	ldr	r2, [sp, #24]
 800642a:	2a01      	cmp	r2, #1
 800642c:	f300 80ba 	bgt.w	80065a4 <_dtoa_r+0x884>
 8006430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006432:	2a00      	cmp	r2, #0
 8006434:	f000 80b2 	beq.w	800659c <_dtoa_r+0x87c>
 8006438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800643c:	9e07      	ldr	r6, [sp, #28]
 800643e:	9d04      	ldr	r5, [sp, #16]
 8006440:	9a04      	ldr	r2, [sp, #16]
 8006442:	441a      	add	r2, r3
 8006444:	9204      	str	r2, [sp, #16]
 8006446:	9a05      	ldr	r2, [sp, #20]
 8006448:	2101      	movs	r1, #1
 800644a:	441a      	add	r2, r3
 800644c:	4620      	mov	r0, r4
 800644e:	9205      	str	r2, [sp, #20]
 8006450:	f001 f82a 	bl	80074a8 <__i2b>
 8006454:	4607      	mov	r7, r0
 8006456:	2d00      	cmp	r5, #0
 8006458:	dd0c      	ble.n	8006474 <_dtoa_r+0x754>
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd09      	ble.n	8006474 <_dtoa_r+0x754>
 8006460:	42ab      	cmp	r3, r5
 8006462:	9a04      	ldr	r2, [sp, #16]
 8006464:	bfa8      	it	ge
 8006466:	462b      	movge	r3, r5
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	9204      	str	r2, [sp, #16]
 800646c:	9a05      	ldr	r2, [sp, #20]
 800646e:	1aed      	subs	r5, r5, r3
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	b31b      	cbz	r3, 80064c0 <_dtoa_r+0x7a0>
 8006478:	9b08      	ldr	r3, [sp, #32]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80af 	beq.w	80065de <_dtoa_r+0x8be>
 8006480:	2e00      	cmp	r6, #0
 8006482:	dd13      	ble.n	80064ac <_dtoa_r+0x78c>
 8006484:	4639      	mov	r1, r7
 8006486:	4632      	mov	r2, r6
 8006488:	4620      	mov	r0, r4
 800648a:	f001 f8cd 	bl	8007628 <__pow5mult>
 800648e:	ee18 2a10 	vmov	r2, s16
 8006492:	4601      	mov	r1, r0
 8006494:	4607      	mov	r7, r0
 8006496:	4620      	mov	r0, r4
 8006498:	f001 f81c 	bl	80074d4 <__multiply>
 800649c:	ee18 1a10 	vmov	r1, s16
 80064a0:	4680      	mov	r8, r0
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 fefe 	bl	80072a4 <_Bfree>
 80064a8:	ee08 8a10 	vmov	s16, r8
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	1b9a      	subs	r2, r3, r6
 80064b0:	d006      	beq.n	80064c0 <_dtoa_r+0x7a0>
 80064b2:	ee18 1a10 	vmov	r1, s16
 80064b6:	4620      	mov	r0, r4
 80064b8:	f001 f8b6 	bl	8007628 <__pow5mult>
 80064bc:	ee08 0a10 	vmov	s16, r0
 80064c0:	2101      	movs	r1, #1
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fff0 	bl	80074a8 <__i2b>
 80064c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	4606      	mov	r6, r0
 80064ce:	f340 8088 	ble.w	80065e2 <_dtoa_r+0x8c2>
 80064d2:	461a      	mov	r2, r3
 80064d4:	4601      	mov	r1, r0
 80064d6:	4620      	mov	r0, r4
 80064d8:	f001 f8a6 	bl	8007628 <__pow5mult>
 80064dc:	9b06      	ldr	r3, [sp, #24]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	4606      	mov	r6, r0
 80064e2:	f340 8081 	ble.w	80065e8 <_dtoa_r+0x8c8>
 80064e6:	f04f 0800 	mov.w	r8, #0
 80064ea:	6933      	ldr	r3, [r6, #16]
 80064ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80064f0:	6918      	ldr	r0, [r3, #16]
 80064f2:	f000 ff89 	bl	8007408 <__hi0bits>
 80064f6:	f1c0 0020 	rsb	r0, r0, #32
 80064fa:	9b05      	ldr	r3, [sp, #20]
 80064fc:	4418      	add	r0, r3
 80064fe:	f010 001f 	ands.w	r0, r0, #31
 8006502:	f000 8092 	beq.w	800662a <_dtoa_r+0x90a>
 8006506:	f1c0 0320 	rsb	r3, r0, #32
 800650a:	2b04      	cmp	r3, #4
 800650c:	f340 808a 	ble.w	8006624 <_dtoa_r+0x904>
 8006510:	f1c0 001c 	rsb	r0, r0, #28
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	4403      	add	r3, r0
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	9b05      	ldr	r3, [sp, #20]
 800651c:	4403      	add	r3, r0
 800651e:	4405      	add	r5, r0
 8006520:	9305      	str	r3, [sp, #20]
 8006522:	9b04      	ldr	r3, [sp, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	dd07      	ble.n	8006538 <_dtoa_r+0x818>
 8006528:	ee18 1a10 	vmov	r1, s16
 800652c:	461a      	mov	r2, r3
 800652e:	4620      	mov	r0, r4
 8006530:	f001 f8d4 	bl	80076dc <__lshift>
 8006534:	ee08 0a10 	vmov	s16, r0
 8006538:	9b05      	ldr	r3, [sp, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dd05      	ble.n	800654a <_dtoa_r+0x82a>
 800653e:	4631      	mov	r1, r6
 8006540:	461a      	mov	r2, r3
 8006542:	4620      	mov	r0, r4
 8006544:	f001 f8ca 	bl	80076dc <__lshift>
 8006548:	4606      	mov	r6, r0
 800654a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d06e      	beq.n	800662e <_dtoa_r+0x90e>
 8006550:	ee18 0a10 	vmov	r0, s16
 8006554:	4631      	mov	r1, r6
 8006556:	f001 f931 	bl	80077bc <__mcmp>
 800655a:	2800      	cmp	r0, #0
 800655c:	da67      	bge.n	800662e <_dtoa_r+0x90e>
 800655e:	9b00      	ldr	r3, [sp, #0]
 8006560:	3b01      	subs	r3, #1
 8006562:	ee18 1a10 	vmov	r1, s16
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	220a      	movs	r2, #10
 800656a:	2300      	movs	r3, #0
 800656c:	4620      	mov	r0, r4
 800656e:	f000 febb 	bl	80072e8 <__multadd>
 8006572:	9b08      	ldr	r3, [sp, #32]
 8006574:	ee08 0a10 	vmov	s16, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 81b1 	beq.w	80068e0 <_dtoa_r+0xbc0>
 800657e:	2300      	movs	r3, #0
 8006580:	4639      	mov	r1, r7
 8006582:	220a      	movs	r2, #10
 8006584:	4620      	mov	r0, r4
 8006586:	f000 feaf 	bl	80072e8 <__multadd>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	4607      	mov	r7, r0
 8006590:	f300 808e 	bgt.w	80066b0 <_dtoa_r+0x990>
 8006594:	9b06      	ldr	r3, [sp, #24]
 8006596:	2b02      	cmp	r3, #2
 8006598:	dc51      	bgt.n	800663e <_dtoa_r+0x91e>
 800659a:	e089      	b.n	80066b0 <_dtoa_r+0x990>
 800659c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800659e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065a2:	e74b      	b.n	800643c <_dtoa_r+0x71c>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	1e5e      	subs	r6, r3, #1
 80065a8:	9b07      	ldr	r3, [sp, #28]
 80065aa:	42b3      	cmp	r3, r6
 80065ac:	bfbf      	itttt	lt
 80065ae:	9b07      	ldrlt	r3, [sp, #28]
 80065b0:	9607      	strlt	r6, [sp, #28]
 80065b2:	1af2      	sublt	r2, r6, r3
 80065b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065b6:	bfb6      	itet	lt
 80065b8:	189b      	addlt	r3, r3, r2
 80065ba:	1b9e      	subge	r6, r3, r6
 80065bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	bfb8      	it	lt
 80065c2:	2600      	movlt	r6, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bfb7      	itett	lt
 80065c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80065cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80065d0:	1a9d      	sublt	r5, r3, r2
 80065d2:	2300      	movlt	r3, #0
 80065d4:	e734      	b.n	8006440 <_dtoa_r+0x720>
 80065d6:	9e07      	ldr	r6, [sp, #28]
 80065d8:	9d04      	ldr	r5, [sp, #16]
 80065da:	9f08      	ldr	r7, [sp, #32]
 80065dc:	e73b      	b.n	8006456 <_dtoa_r+0x736>
 80065de:	9a07      	ldr	r2, [sp, #28]
 80065e0:	e767      	b.n	80064b2 <_dtoa_r+0x792>
 80065e2:	9b06      	ldr	r3, [sp, #24]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	dc18      	bgt.n	800661a <_dtoa_r+0x8fa>
 80065e8:	f1ba 0f00 	cmp.w	sl, #0
 80065ec:	d115      	bne.n	800661a <_dtoa_r+0x8fa>
 80065ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065f2:	b993      	cbnz	r3, 800661a <_dtoa_r+0x8fa>
 80065f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80065f8:	0d1b      	lsrs	r3, r3, #20
 80065fa:	051b      	lsls	r3, r3, #20
 80065fc:	b183      	cbz	r3, 8006620 <_dtoa_r+0x900>
 80065fe:	9b04      	ldr	r3, [sp, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	3301      	adds	r3, #1
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f04f 0801 	mov.w	r8, #1
 800660e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	f47f af6a 	bne.w	80064ea <_dtoa_r+0x7ca>
 8006616:	2001      	movs	r0, #1
 8006618:	e76f      	b.n	80064fa <_dtoa_r+0x7da>
 800661a:	f04f 0800 	mov.w	r8, #0
 800661e:	e7f6      	b.n	800660e <_dtoa_r+0x8ee>
 8006620:	4698      	mov	r8, r3
 8006622:	e7f4      	b.n	800660e <_dtoa_r+0x8ee>
 8006624:	f43f af7d 	beq.w	8006522 <_dtoa_r+0x802>
 8006628:	4618      	mov	r0, r3
 800662a:	301c      	adds	r0, #28
 800662c:	e772      	b.n	8006514 <_dtoa_r+0x7f4>
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dc37      	bgt.n	80066a4 <_dtoa_r+0x984>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	2b02      	cmp	r3, #2
 8006638:	dd34      	ble.n	80066a4 <_dtoa_r+0x984>
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	9302      	str	r3, [sp, #8]
 800663e:	9b02      	ldr	r3, [sp, #8]
 8006640:	b96b      	cbnz	r3, 800665e <_dtoa_r+0x93e>
 8006642:	4631      	mov	r1, r6
 8006644:	2205      	movs	r2, #5
 8006646:	4620      	mov	r0, r4
 8006648:	f000 fe4e 	bl	80072e8 <__multadd>
 800664c:	4601      	mov	r1, r0
 800664e:	4606      	mov	r6, r0
 8006650:	ee18 0a10 	vmov	r0, s16
 8006654:	f001 f8b2 	bl	80077bc <__mcmp>
 8006658:	2800      	cmp	r0, #0
 800665a:	f73f adbb 	bgt.w	80061d4 <_dtoa_r+0x4b4>
 800665e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006660:	9d01      	ldr	r5, [sp, #4]
 8006662:	43db      	mvns	r3, r3
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	4631      	mov	r1, r6
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fe19 	bl	80072a4 <_Bfree>
 8006672:	2f00      	cmp	r7, #0
 8006674:	f43f aea4 	beq.w	80063c0 <_dtoa_r+0x6a0>
 8006678:	f1b8 0f00 	cmp.w	r8, #0
 800667c:	d005      	beq.n	800668a <_dtoa_r+0x96a>
 800667e:	45b8      	cmp	r8, r7
 8006680:	d003      	beq.n	800668a <_dtoa_r+0x96a>
 8006682:	4641      	mov	r1, r8
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fe0d 	bl	80072a4 <_Bfree>
 800668a:	4639      	mov	r1, r7
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fe09 	bl	80072a4 <_Bfree>
 8006692:	e695      	b.n	80063c0 <_dtoa_r+0x6a0>
 8006694:	2600      	movs	r6, #0
 8006696:	4637      	mov	r7, r6
 8006698:	e7e1      	b.n	800665e <_dtoa_r+0x93e>
 800669a:	9700      	str	r7, [sp, #0]
 800669c:	4637      	mov	r7, r6
 800669e:	e599      	b.n	80061d4 <_dtoa_r+0x4b4>
 80066a0:	40240000 	.word	0x40240000
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80ca 	beq.w	8006840 <_dtoa_r+0xb20>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	9302      	str	r3, [sp, #8]
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	dd05      	ble.n	80066c0 <_dtoa_r+0x9a0>
 80066b4:	4639      	mov	r1, r7
 80066b6:	462a      	mov	r2, r5
 80066b8:	4620      	mov	r0, r4
 80066ba:	f001 f80f 	bl	80076dc <__lshift>
 80066be:	4607      	mov	r7, r0
 80066c0:	f1b8 0f00 	cmp.w	r8, #0
 80066c4:	d05b      	beq.n	800677e <_dtoa_r+0xa5e>
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 fdab 	bl	8007224 <_Balloc>
 80066ce:	4605      	mov	r5, r0
 80066d0:	b928      	cbnz	r0, 80066de <_dtoa_r+0x9be>
 80066d2:	4b87      	ldr	r3, [pc, #540]	; (80068f0 <_dtoa_r+0xbd0>)
 80066d4:	4602      	mov	r2, r0
 80066d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066da:	f7ff bb3b 	b.w	8005d54 <_dtoa_r+0x34>
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	3202      	adds	r2, #2
 80066e2:	0092      	lsls	r2, r2, #2
 80066e4:	f107 010c 	add.w	r1, r7, #12
 80066e8:	300c      	adds	r0, #12
 80066ea:	f000 fd8d 	bl	8007208 <memcpy>
 80066ee:	2201      	movs	r2, #1
 80066f0:	4629      	mov	r1, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fff2 	bl	80076dc <__lshift>
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	f103 0901 	add.w	r9, r3, #1
 80066fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006702:	4413      	add	r3, r2
 8006704:	9305      	str	r3, [sp, #20]
 8006706:	f00a 0301 	and.w	r3, sl, #1
 800670a:	46b8      	mov	r8, r7
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	4607      	mov	r7, r0
 8006710:	4631      	mov	r1, r6
 8006712:	ee18 0a10 	vmov	r0, s16
 8006716:	f7ff fa75 	bl	8005c04 <quorem>
 800671a:	4641      	mov	r1, r8
 800671c:	9002      	str	r0, [sp, #8]
 800671e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006722:	ee18 0a10 	vmov	r0, s16
 8006726:	f001 f849 	bl	80077bc <__mcmp>
 800672a:	463a      	mov	r2, r7
 800672c:	9003      	str	r0, [sp, #12]
 800672e:	4631      	mov	r1, r6
 8006730:	4620      	mov	r0, r4
 8006732:	f001 f85f 	bl	80077f4 <__mdiff>
 8006736:	68c2      	ldr	r2, [r0, #12]
 8006738:	f109 3bff 	add.w	fp, r9, #4294967295
 800673c:	4605      	mov	r5, r0
 800673e:	bb02      	cbnz	r2, 8006782 <_dtoa_r+0xa62>
 8006740:	4601      	mov	r1, r0
 8006742:	ee18 0a10 	vmov	r0, s16
 8006746:	f001 f839 	bl	80077bc <__mcmp>
 800674a:	4602      	mov	r2, r0
 800674c:	4629      	mov	r1, r5
 800674e:	4620      	mov	r0, r4
 8006750:	9207      	str	r2, [sp, #28]
 8006752:	f000 fda7 	bl	80072a4 <_Bfree>
 8006756:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800675a:	ea43 0102 	orr.w	r1, r3, r2
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	430b      	orrs	r3, r1
 8006762:	464d      	mov	r5, r9
 8006764:	d10f      	bne.n	8006786 <_dtoa_r+0xa66>
 8006766:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800676a:	d02a      	beq.n	80067c2 <_dtoa_r+0xaa2>
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dd02      	ble.n	8006778 <_dtoa_r+0xa58>
 8006772:	9b02      	ldr	r3, [sp, #8]
 8006774:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006778:	f88b a000 	strb.w	sl, [fp]
 800677c:	e775      	b.n	800666a <_dtoa_r+0x94a>
 800677e:	4638      	mov	r0, r7
 8006780:	e7ba      	b.n	80066f8 <_dtoa_r+0x9d8>
 8006782:	2201      	movs	r2, #1
 8006784:	e7e2      	b.n	800674c <_dtoa_r+0xa2c>
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db04      	blt.n	8006796 <_dtoa_r+0xa76>
 800678c:	9906      	ldr	r1, [sp, #24]
 800678e:	430b      	orrs	r3, r1
 8006790:	9904      	ldr	r1, [sp, #16]
 8006792:	430b      	orrs	r3, r1
 8006794:	d122      	bne.n	80067dc <_dtoa_r+0xabc>
 8006796:	2a00      	cmp	r2, #0
 8006798:	ddee      	ble.n	8006778 <_dtoa_r+0xa58>
 800679a:	ee18 1a10 	vmov	r1, s16
 800679e:	2201      	movs	r2, #1
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 ff9b 	bl	80076dc <__lshift>
 80067a6:	4631      	mov	r1, r6
 80067a8:	ee08 0a10 	vmov	s16, r0
 80067ac:	f001 f806 	bl	80077bc <__mcmp>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	dc03      	bgt.n	80067bc <_dtoa_r+0xa9c>
 80067b4:	d1e0      	bne.n	8006778 <_dtoa_r+0xa58>
 80067b6:	f01a 0f01 	tst.w	sl, #1
 80067ba:	d0dd      	beq.n	8006778 <_dtoa_r+0xa58>
 80067bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067c0:	d1d7      	bne.n	8006772 <_dtoa_r+0xa52>
 80067c2:	2339      	movs	r3, #57	; 0x39
 80067c4:	f88b 3000 	strb.w	r3, [fp]
 80067c8:	462b      	mov	r3, r5
 80067ca:	461d      	mov	r5, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067d2:	2a39      	cmp	r2, #57	; 0x39
 80067d4:	d071      	beq.n	80068ba <_dtoa_r+0xb9a>
 80067d6:	3201      	adds	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e746      	b.n	800666a <_dtoa_r+0x94a>
 80067dc:	2a00      	cmp	r2, #0
 80067de:	dd07      	ble.n	80067f0 <_dtoa_r+0xad0>
 80067e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067e4:	d0ed      	beq.n	80067c2 <_dtoa_r+0xaa2>
 80067e6:	f10a 0301 	add.w	r3, sl, #1
 80067ea:	f88b 3000 	strb.w	r3, [fp]
 80067ee:	e73c      	b.n	800666a <_dtoa_r+0x94a>
 80067f0:	9b05      	ldr	r3, [sp, #20]
 80067f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80067f6:	4599      	cmp	r9, r3
 80067f8:	d047      	beq.n	800688a <_dtoa_r+0xb6a>
 80067fa:	ee18 1a10 	vmov	r1, s16
 80067fe:	2300      	movs	r3, #0
 8006800:	220a      	movs	r2, #10
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fd70 	bl	80072e8 <__multadd>
 8006808:	45b8      	cmp	r8, r7
 800680a:	ee08 0a10 	vmov	s16, r0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	f04f 020a 	mov.w	r2, #10
 8006816:	4641      	mov	r1, r8
 8006818:	4620      	mov	r0, r4
 800681a:	d106      	bne.n	800682a <_dtoa_r+0xb0a>
 800681c:	f000 fd64 	bl	80072e8 <__multadd>
 8006820:	4680      	mov	r8, r0
 8006822:	4607      	mov	r7, r0
 8006824:	f109 0901 	add.w	r9, r9, #1
 8006828:	e772      	b.n	8006710 <_dtoa_r+0x9f0>
 800682a:	f000 fd5d 	bl	80072e8 <__multadd>
 800682e:	4639      	mov	r1, r7
 8006830:	4680      	mov	r8, r0
 8006832:	2300      	movs	r3, #0
 8006834:	220a      	movs	r2, #10
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fd56 	bl	80072e8 <__multadd>
 800683c:	4607      	mov	r7, r0
 800683e:	e7f1      	b.n	8006824 <_dtoa_r+0xb04>
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	9d01      	ldr	r5, [sp, #4]
 8006846:	ee18 0a10 	vmov	r0, s16
 800684a:	4631      	mov	r1, r6
 800684c:	f7ff f9da 	bl	8005c04 <quorem>
 8006850:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	f805 ab01 	strb.w	sl, [r5], #1
 800685a:	1aea      	subs	r2, r5, r3
 800685c:	9b02      	ldr	r3, [sp, #8]
 800685e:	4293      	cmp	r3, r2
 8006860:	dd09      	ble.n	8006876 <_dtoa_r+0xb56>
 8006862:	ee18 1a10 	vmov	r1, s16
 8006866:	2300      	movs	r3, #0
 8006868:	220a      	movs	r2, #10
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fd3c 	bl	80072e8 <__multadd>
 8006870:	ee08 0a10 	vmov	s16, r0
 8006874:	e7e7      	b.n	8006846 <_dtoa_r+0xb26>
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfc8      	it	gt
 800687c:	461d      	movgt	r5, r3
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	bfd8      	it	le
 8006882:	2501      	movle	r5, #1
 8006884:	441d      	add	r5, r3
 8006886:	f04f 0800 	mov.w	r8, #0
 800688a:	ee18 1a10 	vmov	r1, s16
 800688e:	2201      	movs	r2, #1
 8006890:	4620      	mov	r0, r4
 8006892:	f000 ff23 	bl	80076dc <__lshift>
 8006896:	4631      	mov	r1, r6
 8006898:	ee08 0a10 	vmov	s16, r0
 800689c:	f000 ff8e 	bl	80077bc <__mcmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	dc91      	bgt.n	80067c8 <_dtoa_r+0xaa8>
 80068a4:	d102      	bne.n	80068ac <_dtoa_r+0xb8c>
 80068a6:	f01a 0f01 	tst.w	sl, #1
 80068aa:	d18d      	bne.n	80067c8 <_dtoa_r+0xaa8>
 80068ac:	462b      	mov	r3, r5
 80068ae:	461d      	mov	r5, r3
 80068b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068b4:	2a30      	cmp	r2, #48	; 0x30
 80068b6:	d0fa      	beq.n	80068ae <_dtoa_r+0xb8e>
 80068b8:	e6d7      	b.n	800666a <_dtoa_r+0x94a>
 80068ba:	9a01      	ldr	r2, [sp, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d184      	bne.n	80067ca <_dtoa_r+0xaaa>
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	2331      	movs	r3, #49	; 0x31
 80068c8:	7013      	strb	r3, [r2, #0]
 80068ca:	e6ce      	b.n	800666a <_dtoa_r+0x94a>
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <_dtoa_r+0xbd4>)
 80068ce:	f7ff ba95 	b.w	8005dfc <_dtoa_r+0xdc>
 80068d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f aa6e 	bne.w	8005db6 <_dtoa_r+0x96>
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <_dtoa_r+0xbd8>)
 80068dc:	f7ff ba8e 	b.w	8005dfc <_dtoa_r+0xdc>
 80068e0:	9b02      	ldr	r3, [sp, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dcae      	bgt.n	8006844 <_dtoa_r+0xb24>
 80068e6:	9b06      	ldr	r3, [sp, #24]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	f73f aea8 	bgt.w	800663e <_dtoa_r+0x91e>
 80068ee:	e7a9      	b.n	8006844 <_dtoa_r+0xb24>
 80068f0:	080089ff 	.word	0x080089ff
 80068f4:	0800890c 	.word	0x0800890c
 80068f8:	08008980 	.word	0x08008980

080068fc <std>:
 80068fc:	2300      	movs	r3, #0
 80068fe:	b510      	push	{r4, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	e9c0 3300 	strd	r3, r3, [r0]
 8006906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800690a:	6083      	str	r3, [r0, #8]
 800690c:	8181      	strh	r1, [r0, #12]
 800690e:	6643      	str	r3, [r0, #100]	; 0x64
 8006910:	81c2      	strh	r2, [r0, #14]
 8006912:	6183      	str	r3, [r0, #24]
 8006914:	4619      	mov	r1, r3
 8006916:	2208      	movs	r2, #8
 8006918:	305c      	adds	r0, #92	; 0x5c
 800691a:	f7fd fea3 	bl	8004664 <memset>
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <std+0x38>)
 8006920:	6263      	str	r3, [r4, #36]	; 0x24
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <std+0x3c>)
 8006924:	62a3      	str	r3, [r4, #40]	; 0x28
 8006926:	4b05      	ldr	r3, [pc, #20]	; (800693c <std+0x40>)
 8006928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <std+0x44>)
 800692c:	6224      	str	r4, [r4, #32]
 800692e:	6323      	str	r3, [r4, #48]	; 0x30
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	08008109 	.word	0x08008109
 8006938:	0800812b 	.word	0x0800812b
 800693c:	08008163 	.word	0x08008163
 8006940:	08008187 	.word	0x08008187

08006944 <_cleanup_r>:
 8006944:	4901      	ldr	r1, [pc, #4]	; (800694c <_cleanup_r+0x8>)
 8006946:	f000 b8af 	b.w	8006aa8 <_fwalk_reent>
 800694a:	bf00      	nop
 800694c:	080084e1 	.word	0x080084e1

08006950 <__sfmoreglue>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	2268      	movs	r2, #104	; 0x68
 8006954:	1e4d      	subs	r5, r1, #1
 8006956:	4355      	muls	r5, r2
 8006958:	460e      	mov	r6, r1
 800695a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800695e:	f001 f9a5 	bl	8007cac <_malloc_r>
 8006962:	4604      	mov	r4, r0
 8006964:	b140      	cbz	r0, 8006978 <__sfmoreglue+0x28>
 8006966:	2100      	movs	r1, #0
 8006968:	e9c0 1600 	strd	r1, r6, [r0]
 800696c:	300c      	adds	r0, #12
 800696e:	60a0      	str	r0, [r4, #8]
 8006970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006974:	f7fd fe76 	bl	8004664 <memset>
 8006978:	4620      	mov	r0, r4
 800697a:	bd70      	pop	{r4, r5, r6, pc}

0800697c <__sfp_lock_acquire>:
 800697c:	4801      	ldr	r0, [pc, #4]	; (8006984 <__sfp_lock_acquire+0x8>)
 800697e:	f000 bc26 	b.w	80071ce <__retarget_lock_acquire_recursive>
 8006982:	bf00      	nop
 8006984:	2000030d 	.word	0x2000030d

08006988 <__sfp_lock_release>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_release+0x8>)
 800698a:	f000 bc21 	b.w	80071d0 <__retarget_lock_release_recursive>
 800698e:	bf00      	nop
 8006990:	2000030d 	.word	0x2000030d

08006994 <__sinit_lock_acquire>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sinit_lock_acquire+0x8>)
 8006996:	f000 bc1a 	b.w	80071ce <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	2000030e 	.word	0x2000030e

080069a0 <__sinit_lock_release>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sinit_lock_release+0x8>)
 80069a2:	f000 bc15 	b.w	80071d0 <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	2000030e 	.word	0x2000030e

080069ac <__sinit>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4604      	mov	r4, r0
 80069b0:	f7ff fff0 	bl	8006994 <__sinit_lock_acquire>
 80069b4:	69a3      	ldr	r3, [r4, #24]
 80069b6:	b11b      	cbz	r3, 80069c0 <__sinit+0x14>
 80069b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069bc:	f7ff bff0 	b.w	80069a0 <__sinit_lock_release>
 80069c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069c4:	6523      	str	r3, [r4, #80]	; 0x50
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <__sinit+0x68>)
 80069c8:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <__sinit+0x6c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80069ce:	42a3      	cmp	r3, r4
 80069d0:	bf04      	itt	eq
 80069d2:	2301      	moveq	r3, #1
 80069d4:	61a3      	streq	r3, [r4, #24]
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 f820 	bl	8006a1c <__sfp>
 80069dc:	6060      	str	r0, [r4, #4]
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 f81c 	bl	8006a1c <__sfp>
 80069e4:	60a0      	str	r0, [r4, #8]
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 f818 	bl	8006a1c <__sfp>
 80069ec:	2200      	movs	r2, #0
 80069ee:	60e0      	str	r0, [r4, #12]
 80069f0:	2104      	movs	r1, #4
 80069f2:	6860      	ldr	r0, [r4, #4]
 80069f4:	f7ff ff82 	bl	80068fc <std>
 80069f8:	68a0      	ldr	r0, [r4, #8]
 80069fa:	2201      	movs	r2, #1
 80069fc:	2109      	movs	r1, #9
 80069fe:	f7ff ff7d 	bl	80068fc <std>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	2202      	movs	r2, #2
 8006a06:	2112      	movs	r1, #18
 8006a08:	f7ff ff78 	bl	80068fc <std>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	61a3      	str	r3, [r4, #24]
 8006a10:	e7d2      	b.n	80069b8 <__sinit+0xc>
 8006a12:	bf00      	nop
 8006a14:	080088f8 	.word	0x080088f8
 8006a18:	08006945 	.word	0x08006945

08006a1c <__sfp>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f7ff ffac 	bl	800697c <__sfp_lock_acquire>
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <__sfp+0x84>)
 8006a26:	681e      	ldr	r6, [r3, #0]
 8006a28:	69b3      	ldr	r3, [r6, #24]
 8006a2a:	b913      	cbnz	r3, 8006a32 <__sfp+0x16>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f7ff ffbd 	bl	80069ac <__sinit>
 8006a32:	3648      	adds	r6, #72	; 0x48
 8006a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	d503      	bpl.n	8006a44 <__sfp+0x28>
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	b30b      	cbz	r3, 8006a84 <__sfp+0x68>
 8006a40:	6836      	ldr	r6, [r6, #0]
 8006a42:	e7f7      	b.n	8006a34 <__sfp+0x18>
 8006a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a48:	b9d5      	cbnz	r5, 8006a80 <__sfp+0x64>
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <__sfp+0x88>)
 8006a4c:	60e3      	str	r3, [r4, #12]
 8006a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a52:	6665      	str	r5, [r4, #100]	; 0x64
 8006a54:	f000 fbba 	bl	80071cc <__retarget_lock_init_recursive>
 8006a58:	f7ff ff96 	bl	8006988 <__sfp_lock_release>
 8006a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a64:	6025      	str	r5, [r4, #0]
 8006a66:	61a5      	str	r5, [r4, #24]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a70:	f7fd fdf8 	bl	8004664 <memset>
 8006a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a80:	3468      	adds	r4, #104	; 0x68
 8006a82:	e7d9      	b.n	8006a38 <__sfp+0x1c>
 8006a84:	2104      	movs	r1, #4
 8006a86:	4638      	mov	r0, r7
 8006a88:	f7ff ff62 	bl	8006950 <__sfmoreglue>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	6030      	str	r0, [r6, #0]
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d1d5      	bne.n	8006a40 <__sfp+0x24>
 8006a94:	f7ff ff78 	bl	8006988 <__sfp_lock_release>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	e7ee      	b.n	8006a7c <__sfp+0x60>
 8006a9e:	bf00      	nop
 8006aa0:	080088f8 	.word	0x080088f8
 8006aa4:	ffff0001 	.word	0xffff0001

08006aa8 <_fwalk_reent>:
 8006aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aac:	4606      	mov	r6, r0
 8006aae:	4688      	mov	r8, r1
 8006ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ab4:	2700      	movs	r7, #0
 8006ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aba:	f1b9 0901 	subs.w	r9, r9, #1
 8006abe:	d505      	bpl.n	8006acc <_fwalk_reent+0x24>
 8006ac0:	6824      	ldr	r4, [r4, #0]
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	d1f7      	bne.n	8006ab6 <_fwalk_reent+0xe>
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006acc:	89ab      	ldrh	r3, [r5, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d907      	bls.n	8006ae2 <_fwalk_reent+0x3a>
 8006ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	d003      	beq.n	8006ae2 <_fwalk_reent+0x3a>
 8006ada:	4629      	mov	r1, r5
 8006adc:	4630      	mov	r0, r6
 8006ade:	47c0      	blx	r8
 8006ae0:	4307      	orrs	r7, r0
 8006ae2:	3568      	adds	r5, #104	; 0x68
 8006ae4:	e7e9      	b.n	8006aba <_fwalk_reent+0x12>

08006ae6 <rshift>:
 8006ae6:	6903      	ldr	r3, [r0, #16]
 8006ae8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006af4:	f100 0414 	add.w	r4, r0, #20
 8006af8:	dd45      	ble.n	8006b86 <rshift+0xa0>
 8006afa:	f011 011f 	ands.w	r1, r1, #31
 8006afe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b06:	d10c      	bne.n	8006b22 <rshift+0x3c>
 8006b08:	f100 0710 	add.w	r7, r0, #16
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	42b1      	cmp	r1, r6
 8006b10:	d334      	bcc.n	8006b7c <rshift+0x96>
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	1eea      	subs	r2, r5, #3
 8006b18:	4296      	cmp	r6, r2
 8006b1a:	bf38      	it	cc
 8006b1c:	2300      	movcc	r3, #0
 8006b1e:	4423      	add	r3, r4
 8006b20:	e015      	b.n	8006b4e <rshift+0x68>
 8006b22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b26:	f1c1 0820 	rsb	r8, r1, #32
 8006b2a:	40cf      	lsrs	r7, r1
 8006b2c:	f105 0e04 	add.w	lr, r5, #4
 8006b30:	46a1      	mov	r9, r4
 8006b32:	4576      	cmp	r6, lr
 8006b34:	46f4      	mov	ip, lr
 8006b36:	d815      	bhi.n	8006b64 <rshift+0x7e>
 8006b38:	1a9a      	subs	r2, r3, r2
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	3a04      	subs	r2, #4
 8006b3e:	3501      	adds	r5, #1
 8006b40:	42ae      	cmp	r6, r5
 8006b42:	bf38      	it	cc
 8006b44:	2200      	movcc	r2, #0
 8006b46:	18a3      	adds	r3, r4, r2
 8006b48:	50a7      	str	r7, [r4, r2]
 8006b4a:	b107      	cbz	r7, 8006b4e <rshift+0x68>
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	1b1a      	subs	r2, r3, r4
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b56:	bf08      	it	eq
 8006b58:	2300      	moveq	r3, #0
 8006b5a:	6102      	str	r2, [r0, #16]
 8006b5c:	bf08      	it	eq
 8006b5e:	6143      	streq	r3, [r0, #20]
 8006b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b64:	f8dc c000 	ldr.w	ip, [ip]
 8006b68:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b6c:	ea4c 0707 	orr.w	r7, ip, r7
 8006b70:	f849 7b04 	str.w	r7, [r9], #4
 8006b74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b78:	40cf      	lsrs	r7, r1
 8006b7a:	e7da      	b.n	8006b32 <rshift+0x4c>
 8006b7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b80:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b84:	e7c3      	b.n	8006b0e <rshift+0x28>
 8006b86:	4623      	mov	r3, r4
 8006b88:	e7e1      	b.n	8006b4e <rshift+0x68>

08006b8a <__hexdig_fun>:
 8006b8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d802      	bhi.n	8006b98 <__hexdig_fun+0xe>
 8006b92:	3820      	subs	r0, #32
 8006b94:	b2c0      	uxtb	r0, r0
 8006b96:	4770      	bx	lr
 8006b98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d801      	bhi.n	8006ba4 <__hexdig_fun+0x1a>
 8006ba0:	3847      	subs	r0, #71	; 0x47
 8006ba2:	e7f7      	b.n	8006b94 <__hexdig_fun+0xa>
 8006ba4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	d801      	bhi.n	8006bb0 <__hexdig_fun+0x26>
 8006bac:	3827      	subs	r0, #39	; 0x27
 8006bae:	e7f1      	b.n	8006b94 <__hexdig_fun+0xa>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	4770      	bx	lr

08006bb4 <__gethex>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	ed2d 8b02 	vpush	{d8}
 8006bbc:	b089      	sub	sp, #36	; 0x24
 8006bbe:	ee08 0a10 	vmov	s16, r0
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	4bb4      	ldr	r3, [pc, #720]	; (8006e98 <__gethex+0x2e4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	468b      	mov	fp, r1
 8006bce:	4690      	mov	r8, r2
 8006bd0:	f7f9 fb08 	bl	80001e4 <strlen>
 8006bd4:	9b01      	ldr	r3, [sp, #4]
 8006bd6:	f8db 2000 	ldr.w	r2, [fp]
 8006bda:	4403      	add	r3, r0
 8006bdc:	4682      	mov	sl, r0
 8006bde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	1c93      	adds	r3, r2, #2
 8006be6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006bea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006bee:	32fe      	adds	r2, #254	; 0xfe
 8006bf0:	18d1      	adds	r1, r2, r3
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006bf8:	9100      	str	r1, [sp, #0]
 8006bfa:	2830      	cmp	r0, #48	; 0x30
 8006bfc:	d0f8      	beq.n	8006bf0 <__gethex+0x3c>
 8006bfe:	f7ff ffc4 	bl	8006b8a <__hexdig_fun>
 8006c02:	4604      	mov	r4, r0
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d13a      	bne.n	8006c7e <__gethex+0xca>
 8006c08:	9901      	ldr	r1, [sp, #4]
 8006c0a:	4652      	mov	r2, sl
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f001 fabe 	bl	800818e <strncmp>
 8006c12:	4605      	mov	r5, r0
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d168      	bne.n	8006cea <__gethex+0x136>
 8006c18:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c1c:	eb07 060a 	add.w	r6, r7, sl
 8006c20:	f7ff ffb3 	bl	8006b8a <__hexdig_fun>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d062      	beq.n	8006cee <__gethex+0x13a>
 8006c28:	4633      	mov	r3, r6
 8006c2a:	7818      	ldrb	r0, [r3, #0]
 8006c2c:	2830      	cmp	r0, #48	; 0x30
 8006c2e:	461f      	mov	r7, r3
 8006c30:	f103 0301 	add.w	r3, r3, #1
 8006c34:	d0f9      	beq.n	8006c2a <__gethex+0x76>
 8006c36:	f7ff ffa8 	bl	8006b8a <__hexdig_fun>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	fab0 f480 	clz	r4, r0
 8006c40:	0964      	lsrs	r4, r4, #5
 8006c42:	4635      	mov	r5, r6
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	463a      	mov	r2, r7
 8006c48:	4616      	mov	r6, r2
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	7830      	ldrb	r0, [r6, #0]
 8006c4e:	f7ff ff9c 	bl	8006b8a <__hexdig_fun>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d1f8      	bne.n	8006c48 <__gethex+0x94>
 8006c56:	9901      	ldr	r1, [sp, #4]
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f001 fa97 	bl	800818e <strncmp>
 8006c60:	b980      	cbnz	r0, 8006c84 <__gethex+0xd0>
 8006c62:	b94d      	cbnz	r5, 8006c78 <__gethex+0xc4>
 8006c64:	eb06 050a 	add.w	r5, r6, sl
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4616      	mov	r6, r2
 8006c6c:	3201      	adds	r2, #1
 8006c6e:	7830      	ldrb	r0, [r6, #0]
 8006c70:	f7ff ff8b 	bl	8006b8a <__hexdig_fun>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d1f8      	bne.n	8006c6a <__gethex+0xb6>
 8006c78:	1bad      	subs	r5, r5, r6
 8006c7a:	00ad      	lsls	r5, r5, #2
 8006c7c:	e004      	b.n	8006c88 <__gethex+0xd4>
 8006c7e:	2400      	movs	r4, #0
 8006c80:	4625      	mov	r5, r4
 8006c82:	e7e0      	b.n	8006c46 <__gethex+0x92>
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	d1f7      	bne.n	8006c78 <__gethex+0xc4>
 8006c88:	7833      	ldrb	r3, [r6, #0]
 8006c8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c8e:	2b50      	cmp	r3, #80	; 0x50
 8006c90:	d13b      	bne.n	8006d0a <__gethex+0x156>
 8006c92:	7873      	ldrb	r3, [r6, #1]
 8006c94:	2b2b      	cmp	r3, #43	; 0x2b
 8006c96:	d02c      	beq.n	8006cf2 <__gethex+0x13e>
 8006c98:	2b2d      	cmp	r3, #45	; 0x2d
 8006c9a:	d02e      	beq.n	8006cfa <__gethex+0x146>
 8006c9c:	1c71      	adds	r1, r6, #1
 8006c9e:	f04f 0900 	mov.w	r9, #0
 8006ca2:	7808      	ldrb	r0, [r1, #0]
 8006ca4:	f7ff ff71 	bl	8006b8a <__hexdig_fun>
 8006ca8:	1e43      	subs	r3, r0, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b18      	cmp	r3, #24
 8006cae:	d82c      	bhi.n	8006d0a <__gethex+0x156>
 8006cb0:	f1a0 0210 	sub.w	r2, r0, #16
 8006cb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006cb8:	f7ff ff67 	bl	8006b8a <__hexdig_fun>
 8006cbc:	1e43      	subs	r3, r0, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b18      	cmp	r3, #24
 8006cc2:	d91d      	bls.n	8006d00 <__gethex+0x14c>
 8006cc4:	f1b9 0f00 	cmp.w	r9, #0
 8006cc8:	d000      	beq.n	8006ccc <__gethex+0x118>
 8006cca:	4252      	negs	r2, r2
 8006ccc:	4415      	add	r5, r2
 8006cce:	f8cb 1000 	str.w	r1, [fp]
 8006cd2:	b1e4      	cbz	r4, 8006d0e <__gethex+0x15a>
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bf14      	ite	ne
 8006cda:	2700      	movne	r7, #0
 8006cdc:	2706      	moveq	r7, #6
 8006cde:	4638      	mov	r0, r7
 8006ce0:	b009      	add	sp, #36	; 0x24
 8006ce2:	ecbd 8b02 	vpop	{d8}
 8006ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cea:	463e      	mov	r6, r7
 8006cec:	4625      	mov	r5, r4
 8006cee:	2401      	movs	r4, #1
 8006cf0:	e7ca      	b.n	8006c88 <__gethex+0xd4>
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	1cb1      	adds	r1, r6, #2
 8006cf8:	e7d3      	b.n	8006ca2 <__gethex+0xee>
 8006cfa:	f04f 0901 	mov.w	r9, #1
 8006cfe:	e7fa      	b.n	8006cf6 <__gethex+0x142>
 8006d00:	230a      	movs	r3, #10
 8006d02:	fb03 0202 	mla	r2, r3, r2, r0
 8006d06:	3a10      	subs	r2, #16
 8006d08:	e7d4      	b.n	8006cb4 <__gethex+0x100>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	e7df      	b.n	8006cce <__gethex+0x11a>
 8006d0e:	1bf3      	subs	r3, r6, r7
 8006d10:	3b01      	subs	r3, #1
 8006d12:	4621      	mov	r1, r4
 8006d14:	2b07      	cmp	r3, #7
 8006d16:	dc0b      	bgt.n	8006d30 <__gethex+0x17c>
 8006d18:	ee18 0a10 	vmov	r0, s16
 8006d1c:	f000 fa82 	bl	8007224 <_Balloc>
 8006d20:	4604      	mov	r4, r0
 8006d22:	b940      	cbnz	r0, 8006d36 <__gethex+0x182>
 8006d24:	4b5d      	ldr	r3, [pc, #372]	; (8006e9c <__gethex+0x2e8>)
 8006d26:	4602      	mov	r2, r0
 8006d28:	21de      	movs	r1, #222	; 0xde
 8006d2a:	485d      	ldr	r0, [pc, #372]	; (8006ea0 <__gethex+0x2ec>)
 8006d2c:	f001 fb24 	bl	8008378 <__assert_func>
 8006d30:	3101      	adds	r1, #1
 8006d32:	105b      	asrs	r3, r3, #1
 8006d34:	e7ee      	b.n	8006d14 <__gethex+0x160>
 8006d36:	f100 0914 	add.w	r9, r0, #20
 8006d3a:	f04f 0b00 	mov.w	fp, #0
 8006d3e:	f1ca 0301 	rsb	r3, sl, #1
 8006d42:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d46:	f8cd b000 	str.w	fp, [sp]
 8006d4a:	9306      	str	r3, [sp, #24]
 8006d4c:	42b7      	cmp	r7, r6
 8006d4e:	d340      	bcc.n	8006dd2 <__gethex+0x21e>
 8006d50:	9802      	ldr	r0, [sp, #8]
 8006d52:	9b00      	ldr	r3, [sp, #0]
 8006d54:	f840 3b04 	str.w	r3, [r0], #4
 8006d58:	eba0 0009 	sub.w	r0, r0, r9
 8006d5c:	1080      	asrs	r0, r0, #2
 8006d5e:	0146      	lsls	r6, r0, #5
 8006d60:	6120      	str	r0, [r4, #16]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb50 	bl	8007408 <__hi0bits>
 8006d68:	1a30      	subs	r0, r6, r0
 8006d6a:	f8d8 6000 	ldr.w	r6, [r8]
 8006d6e:	42b0      	cmp	r0, r6
 8006d70:	dd63      	ble.n	8006e3a <__gethex+0x286>
 8006d72:	1b87      	subs	r7, r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 fef4 	bl	8007b64 <__any_on>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	b1a8      	cbz	r0, 8006dac <__gethex+0x1f8>
 8006d80:	1e7b      	subs	r3, r7, #1
 8006d82:	1159      	asrs	r1, r3, #5
 8006d84:	f003 021f 	and.w	r2, r3, #31
 8006d88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d8c:	f04f 0a01 	mov.w	sl, #1
 8006d90:	fa0a f202 	lsl.w	r2, sl, r2
 8006d94:	420a      	tst	r2, r1
 8006d96:	d009      	beq.n	8006dac <__gethex+0x1f8>
 8006d98:	4553      	cmp	r3, sl
 8006d9a:	dd05      	ble.n	8006da8 <__gethex+0x1f4>
 8006d9c:	1eb9      	subs	r1, r7, #2
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fee0 	bl	8007b64 <__any_on>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d145      	bne.n	8006e34 <__gethex+0x280>
 8006da8:	f04f 0a02 	mov.w	sl, #2
 8006dac:	4639      	mov	r1, r7
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7ff fe99 	bl	8006ae6 <rshift>
 8006db4:	443d      	add	r5, r7
 8006db6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dba:	42ab      	cmp	r3, r5
 8006dbc:	da4c      	bge.n	8006e58 <__gethex+0x2a4>
 8006dbe:	ee18 0a10 	vmov	r0, s16
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	f000 fa6e 	bl	80072a4 <_Bfree>
 8006dc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	27a3      	movs	r7, #163	; 0xa3
 8006dd0:	e785      	b.n	8006cde <__gethex+0x12a>
 8006dd2:	1e73      	subs	r3, r6, #1
 8006dd4:	9a05      	ldr	r2, [sp, #20]
 8006dd6:	9303      	str	r3, [sp, #12]
 8006dd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d019      	beq.n	8006e14 <__gethex+0x260>
 8006de0:	f1bb 0f20 	cmp.w	fp, #32
 8006de4:	d107      	bne.n	8006df6 <__gethex+0x242>
 8006de6:	9b02      	ldr	r3, [sp, #8]
 8006de8:	9a00      	ldr	r2, [sp, #0]
 8006dea:	f843 2b04 	str.w	r2, [r3], #4
 8006dee:	9302      	str	r3, [sp, #8]
 8006df0:	2300      	movs	r3, #0
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	469b      	mov	fp, r3
 8006df6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006dfa:	f7ff fec6 	bl	8006b8a <__hexdig_fun>
 8006dfe:	9b00      	ldr	r3, [sp, #0]
 8006e00:	f000 000f 	and.w	r0, r0, #15
 8006e04:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e08:	4303      	orrs	r3, r0
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	f10b 0b04 	add.w	fp, fp, #4
 8006e10:	9b03      	ldr	r3, [sp, #12]
 8006e12:	e00d      	b.n	8006e30 <__gethex+0x27c>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	9a06      	ldr	r2, [sp, #24]
 8006e18:	4413      	add	r3, r2
 8006e1a:	42bb      	cmp	r3, r7
 8006e1c:	d3e0      	bcc.n	8006de0 <__gethex+0x22c>
 8006e1e:	4618      	mov	r0, r3
 8006e20:	9901      	ldr	r1, [sp, #4]
 8006e22:	9307      	str	r3, [sp, #28]
 8006e24:	4652      	mov	r2, sl
 8006e26:	f001 f9b2 	bl	800818e <strncmp>
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d1d7      	bne.n	8006de0 <__gethex+0x22c>
 8006e30:	461e      	mov	r6, r3
 8006e32:	e78b      	b.n	8006d4c <__gethex+0x198>
 8006e34:	f04f 0a03 	mov.w	sl, #3
 8006e38:	e7b8      	b.n	8006dac <__gethex+0x1f8>
 8006e3a:	da0a      	bge.n	8006e52 <__gethex+0x29e>
 8006e3c:	1a37      	subs	r7, r6, r0
 8006e3e:	4621      	mov	r1, r4
 8006e40:	ee18 0a10 	vmov	r0, s16
 8006e44:	463a      	mov	r2, r7
 8006e46:	f000 fc49 	bl	80076dc <__lshift>
 8006e4a:	1bed      	subs	r5, r5, r7
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	f100 0914 	add.w	r9, r0, #20
 8006e52:	f04f 0a00 	mov.w	sl, #0
 8006e56:	e7ae      	b.n	8006db6 <__gethex+0x202>
 8006e58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e5c:	42a8      	cmp	r0, r5
 8006e5e:	dd72      	ble.n	8006f46 <__gethex+0x392>
 8006e60:	1b45      	subs	r5, r0, r5
 8006e62:	42ae      	cmp	r6, r5
 8006e64:	dc36      	bgt.n	8006ed4 <__gethex+0x320>
 8006e66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d02a      	beq.n	8006ec4 <__gethex+0x310>
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d02c      	beq.n	8006ecc <__gethex+0x318>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d11c      	bne.n	8006eb0 <__gethex+0x2fc>
 8006e76:	42ae      	cmp	r6, r5
 8006e78:	d11a      	bne.n	8006eb0 <__gethex+0x2fc>
 8006e7a:	2e01      	cmp	r6, #1
 8006e7c:	d112      	bne.n	8006ea4 <__gethex+0x2f0>
 8006e7e:	9a04      	ldr	r2, [sp, #16]
 8006e80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	2301      	movs	r3, #1
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	f8c9 3000 	str.w	r3, [r9]
 8006e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e90:	2762      	movs	r7, #98	; 0x62
 8006e92:	601c      	str	r4, [r3, #0]
 8006e94:	e723      	b.n	8006cde <__gethex+0x12a>
 8006e96:	bf00      	nop
 8006e98:	08008ad8 	.word	0x08008ad8
 8006e9c:	080089ff 	.word	0x080089ff
 8006ea0:	08008a70 	.word	0x08008a70
 8006ea4:	1e71      	subs	r1, r6, #1
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 fe5c 	bl	8007b64 <__any_on>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d1e6      	bne.n	8006e7e <__gethex+0x2ca>
 8006eb0:	ee18 0a10 	vmov	r0, s16
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	f000 f9f5 	bl	80072a4 <_Bfree>
 8006eba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	2750      	movs	r7, #80	; 0x50
 8006ec2:	e70c      	b.n	8006cde <__gethex+0x12a>
 8006ec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f2      	bne.n	8006eb0 <__gethex+0x2fc>
 8006eca:	e7d8      	b.n	8006e7e <__gethex+0x2ca>
 8006ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1d5      	bne.n	8006e7e <__gethex+0x2ca>
 8006ed2:	e7ed      	b.n	8006eb0 <__gethex+0x2fc>
 8006ed4:	1e6f      	subs	r7, r5, #1
 8006ed6:	f1ba 0f00 	cmp.w	sl, #0
 8006eda:	d131      	bne.n	8006f40 <__gethex+0x38c>
 8006edc:	b127      	cbz	r7, 8006ee8 <__gethex+0x334>
 8006ede:	4639      	mov	r1, r7
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fe3f 	bl	8007b64 <__any_on>
 8006ee6:	4682      	mov	sl, r0
 8006ee8:	117b      	asrs	r3, r7, #5
 8006eea:	2101      	movs	r1, #1
 8006eec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006ef0:	f007 071f 	and.w	r7, r7, #31
 8006ef4:	fa01 f707 	lsl.w	r7, r1, r7
 8006ef8:	421f      	tst	r7, r3
 8006efa:	4629      	mov	r1, r5
 8006efc:	4620      	mov	r0, r4
 8006efe:	bf18      	it	ne
 8006f00:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f04:	1b76      	subs	r6, r6, r5
 8006f06:	f7ff fdee 	bl	8006ae6 <rshift>
 8006f0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f0e:	2702      	movs	r7, #2
 8006f10:	f1ba 0f00 	cmp.w	sl, #0
 8006f14:	d048      	beq.n	8006fa8 <__gethex+0x3f4>
 8006f16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d015      	beq.n	8006f4a <__gethex+0x396>
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d017      	beq.n	8006f52 <__gethex+0x39e>
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d109      	bne.n	8006f3a <__gethex+0x386>
 8006f26:	f01a 0f02 	tst.w	sl, #2
 8006f2a:	d006      	beq.n	8006f3a <__gethex+0x386>
 8006f2c:	f8d9 0000 	ldr.w	r0, [r9]
 8006f30:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f34:	f01a 0f01 	tst.w	sl, #1
 8006f38:	d10e      	bne.n	8006f58 <__gethex+0x3a4>
 8006f3a:	f047 0710 	orr.w	r7, r7, #16
 8006f3e:	e033      	b.n	8006fa8 <__gethex+0x3f4>
 8006f40:	f04f 0a01 	mov.w	sl, #1
 8006f44:	e7d0      	b.n	8006ee8 <__gethex+0x334>
 8006f46:	2701      	movs	r7, #1
 8006f48:	e7e2      	b.n	8006f10 <__gethex+0x35c>
 8006f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f4c:	f1c3 0301 	rsb	r3, r3, #1
 8006f50:	9315      	str	r3, [sp, #84]	; 0x54
 8006f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <__gethex+0x386>
 8006f58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f5c:	f104 0314 	add.w	r3, r4, #20
 8006f60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f76:	d01c      	beq.n	8006fb2 <__gethex+0x3fe>
 8006f78:	3201      	adds	r2, #1
 8006f7a:	6002      	str	r2, [r0, #0]
 8006f7c:	2f02      	cmp	r7, #2
 8006f7e:	f104 0314 	add.w	r3, r4, #20
 8006f82:	d13f      	bne.n	8007004 <__gethex+0x450>
 8006f84:	f8d8 2000 	ldr.w	r2, [r8]
 8006f88:	3a01      	subs	r2, #1
 8006f8a:	42b2      	cmp	r2, r6
 8006f8c:	d10a      	bne.n	8006fa4 <__gethex+0x3f0>
 8006f8e:	1171      	asrs	r1, r6, #5
 8006f90:	2201      	movs	r2, #1
 8006f92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f96:	f006 061f 	and.w	r6, r6, #31
 8006f9a:	fa02 f606 	lsl.w	r6, r2, r6
 8006f9e:	421e      	tst	r6, r3
 8006fa0:	bf18      	it	ne
 8006fa2:	4617      	movne	r7, r2
 8006fa4:	f047 0720 	orr.w	r7, r7, #32
 8006fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006faa:	601c      	str	r4, [r3, #0]
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	601d      	str	r5, [r3, #0]
 8006fb0:	e695      	b.n	8006cde <__gethex+0x12a>
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fb8:	d8d8      	bhi.n	8006f6c <__gethex+0x3b8>
 8006fba:	68a3      	ldr	r3, [r4, #8]
 8006fbc:	459b      	cmp	fp, r3
 8006fbe:	db19      	blt.n	8006ff4 <__gethex+0x440>
 8006fc0:	6861      	ldr	r1, [r4, #4]
 8006fc2:	ee18 0a10 	vmov	r0, s16
 8006fc6:	3101      	adds	r1, #1
 8006fc8:	f000 f92c 	bl	8007224 <_Balloc>
 8006fcc:	4681      	mov	r9, r0
 8006fce:	b918      	cbnz	r0, 8006fd8 <__gethex+0x424>
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <__gethex+0x488>)
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	2184      	movs	r1, #132	; 0x84
 8006fd6:	e6a8      	b.n	8006d2a <__gethex+0x176>
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	3202      	adds	r2, #2
 8006fdc:	f104 010c 	add.w	r1, r4, #12
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	300c      	adds	r0, #12
 8006fe4:	f000 f910 	bl	8007208 <memcpy>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	ee18 0a10 	vmov	r0, s16
 8006fee:	f000 f959 	bl	80072a4 <_Bfree>
 8006ff2:	464c      	mov	r4, r9
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ffc:	6122      	str	r2, [r4, #16]
 8006ffe:	2201      	movs	r2, #1
 8007000:	615a      	str	r2, [r3, #20]
 8007002:	e7bb      	b.n	8006f7c <__gethex+0x3c8>
 8007004:	6922      	ldr	r2, [r4, #16]
 8007006:	455a      	cmp	r2, fp
 8007008:	dd0b      	ble.n	8007022 <__gethex+0x46e>
 800700a:	2101      	movs	r1, #1
 800700c:	4620      	mov	r0, r4
 800700e:	f7ff fd6a 	bl	8006ae6 <rshift>
 8007012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007016:	3501      	adds	r5, #1
 8007018:	42ab      	cmp	r3, r5
 800701a:	f6ff aed0 	blt.w	8006dbe <__gethex+0x20a>
 800701e:	2701      	movs	r7, #1
 8007020:	e7c0      	b.n	8006fa4 <__gethex+0x3f0>
 8007022:	f016 061f 	ands.w	r6, r6, #31
 8007026:	d0fa      	beq.n	800701e <__gethex+0x46a>
 8007028:	4453      	add	r3, sl
 800702a:	f1c6 0620 	rsb	r6, r6, #32
 800702e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007032:	f000 f9e9 	bl	8007408 <__hi0bits>
 8007036:	42b0      	cmp	r0, r6
 8007038:	dbe7      	blt.n	800700a <__gethex+0x456>
 800703a:	e7f0      	b.n	800701e <__gethex+0x46a>
 800703c:	080089ff 	.word	0x080089ff

08007040 <L_shift>:
 8007040:	f1c2 0208 	rsb	r2, r2, #8
 8007044:	0092      	lsls	r2, r2, #2
 8007046:	b570      	push	{r4, r5, r6, lr}
 8007048:	f1c2 0620 	rsb	r6, r2, #32
 800704c:	6843      	ldr	r3, [r0, #4]
 800704e:	6804      	ldr	r4, [r0, #0]
 8007050:	fa03 f506 	lsl.w	r5, r3, r6
 8007054:	432c      	orrs	r4, r5
 8007056:	40d3      	lsrs	r3, r2
 8007058:	6004      	str	r4, [r0, #0]
 800705a:	f840 3f04 	str.w	r3, [r0, #4]!
 800705e:	4288      	cmp	r0, r1
 8007060:	d3f4      	bcc.n	800704c <L_shift+0xc>
 8007062:	bd70      	pop	{r4, r5, r6, pc}

08007064 <__match>:
 8007064:	b530      	push	{r4, r5, lr}
 8007066:	6803      	ldr	r3, [r0, #0]
 8007068:	3301      	adds	r3, #1
 800706a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800706e:	b914      	cbnz	r4, 8007076 <__match+0x12>
 8007070:	6003      	str	r3, [r0, #0]
 8007072:	2001      	movs	r0, #1
 8007074:	bd30      	pop	{r4, r5, pc}
 8007076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800707e:	2d19      	cmp	r5, #25
 8007080:	bf98      	it	ls
 8007082:	3220      	addls	r2, #32
 8007084:	42a2      	cmp	r2, r4
 8007086:	d0f0      	beq.n	800706a <__match+0x6>
 8007088:	2000      	movs	r0, #0
 800708a:	e7f3      	b.n	8007074 <__match+0x10>

0800708c <__hexnan>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	680b      	ldr	r3, [r1, #0]
 8007092:	115e      	asrs	r6, r3, #5
 8007094:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007098:	f013 031f 	ands.w	r3, r3, #31
 800709c:	b087      	sub	sp, #28
 800709e:	bf18      	it	ne
 80070a0:	3604      	addne	r6, #4
 80070a2:	2500      	movs	r5, #0
 80070a4:	1f37      	subs	r7, r6, #4
 80070a6:	4690      	mov	r8, r2
 80070a8:	6802      	ldr	r2, [r0, #0]
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	4682      	mov	sl, r0
 80070ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80070b2:	46b9      	mov	r9, r7
 80070b4:	463c      	mov	r4, r7
 80070b6:	9502      	str	r5, [sp, #8]
 80070b8:	46ab      	mov	fp, r5
 80070ba:	7851      	ldrb	r1, [r2, #1]
 80070bc:	1c53      	adds	r3, r2, #1
 80070be:	9303      	str	r3, [sp, #12]
 80070c0:	b341      	cbz	r1, 8007114 <__hexnan+0x88>
 80070c2:	4608      	mov	r0, r1
 80070c4:	9205      	str	r2, [sp, #20]
 80070c6:	9104      	str	r1, [sp, #16]
 80070c8:	f7ff fd5f 	bl	8006b8a <__hexdig_fun>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d14f      	bne.n	8007170 <__hexnan+0xe4>
 80070d0:	9904      	ldr	r1, [sp, #16]
 80070d2:	9a05      	ldr	r2, [sp, #20]
 80070d4:	2920      	cmp	r1, #32
 80070d6:	d818      	bhi.n	800710a <__hexnan+0x7e>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	459b      	cmp	fp, r3
 80070dc:	dd13      	ble.n	8007106 <__hexnan+0x7a>
 80070de:	454c      	cmp	r4, r9
 80070e0:	d206      	bcs.n	80070f0 <__hexnan+0x64>
 80070e2:	2d07      	cmp	r5, #7
 80070e4:	dc04      	bgt.n	80070f0 <__hexnan+0x64>
 80070e6:	462a      	mov	r2, r5
 80070e8:	4649      	mov	r1, r9
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7ff ffa8 	bl	8007040 <L_shift>
 80070f0:	4544      	cmp	r4, r8
 80070f2:	d950      	bls.n	8007196 <__hexnan+0x10a>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f1a4 0904 	sub.w	r9, r4, #4
 80070fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80070fe:	f8cd b008 	str.w	fp, [sp, #8]
 8007102:	464c      	mov	r4, r9
 8007104:	461d      	mov	r5, r3
 8007106:	9a03      	ldr	r2, [sp, #12]
 8007108:	e7d7      	b.n	80070ba <__hexnan+0x2e>
 800710a:	2929      	cmp	r1, #41	; 0x29
 800710c:	d156      	bne.n	80071bc <__hexnan+0x130>
 800710e:	3202      	adds	r2, #2
 8007110:	f8ca 2000 	str.w	r2, [sl]
 8007114:	f1bb 0f00 	cmp.w	fp, #0
 8007118:	d050      	beq.n	80071bc <__hexnan+0x130>
 800711a:	454c      	cmp	r4, r9
 800711c:	d206      	bcs.n	800712c <__hexnan+0xa0>
 800711e:	2d07      	cmp	r5, #7
 8007120:	dc04      	bgt.n	800712c <__hexnan+0xa0>
 8007122:	462a      	mov	r2, r5
 8007124:	4649      	mov	r1, r9
 8007126:	4620      	mov	r0, r4
 8007128:	f7ff ff8a 	bl	8007040 <L_shift>
 800712c:	4544      	cmp	r4, r8
 800712e:	d934      	bls.n	800719a <__hexnan+0x10e>
 8007130:	f1a8 0204 	sub.w	r2, r8, #4
 8007134:	4623      	mov	r3, r4
 8007136:	f853 1b04 	ldr.w	r1, [r3], #4
 800713a:	f842 1f04 	str.w	r1, [r2, #4]!
 800713e:	429f      	cmp	r7, r3
 8007140:	d2f9      	bcs.n	8007136 <__hexnan+0xaa>
 8007142:	1b3b      	subs	r3, r7, r4
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	3304      	adds	r3, #4
 800714a:	3401      	adds	r4, #1
 800714c:	3e03      	subs	r6, #3
 800714e:	42b4      	cmp	r4, r6
 8007150:	bf88      	it	hi
 8007152:	2304      	movhi	r3, #4
 8007154:	4443      	add	r3, r8
 8007156:	2200      	movs	r2, #0
 8007158:	f843 2b04 	str.w	r2, [r3], #4
 800715c:	429f      	cmp	r7, r3
 800715e:	d2fb      	bcs.n	8007158 <__hexnan+0xcc>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	b91b      	cbnz	r3, 800716c <__hexnan+0xe0>
 8007164:	4547      	cmp	r7, r8
 8007166:	d127      	bne.n	80071b8 <__hexnan+0x12c>
 8007168:	2301      	movs	r3, #1
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	2005      	movs	r0, #5
 800716e:	e026      	b.n	80071be <__hexnan+0x132>
 8007170:	3501      	adds	r5, #1
 8007172:	2d08      	cmp	r5, #8
 8007174:	f10b 0b01 	add.w	fp, fp, #1
 8007178:	dd06      	ble.n	8007188 <__hexnan+0xfc>
 800717a:	4544      	cmp	r4, r8
 800717c:	d9c3      	bls.n	8007106 <__hexnan+0x7a>
 800717e:	2300      	movs	r3, #0
 8007180:	f844 3c04 	str.w	r3, [r4, #-4]
 8007184:	2501      	movs	r5, #1
 8007186:	3c04      	subs	r4, #4
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	f000 000f 	and.w	r0, r0, #15
 800718e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007192:	6022      	str	r2, [r4, #0]
 8007194:	e7b7      	b.n	8007106 <__hexnan+0x7a>
 8007196:	2508      	movs	r5, #8
 8007198:	e7b5      	b.n	8007106 <__hexnan+0x7a>
 800719a:	9b01      	ldr	r3, [sp, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0df      	beq.n	8007160 <__hexnan+0xd4>
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	f1c3 0320 	rsb	r3, r3, #32
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071b0:	401a      	ands	r2, r3
 80071b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80071b6:	e7d3      	b.n	8007160 <__hexnan+0xd4>
 80071b8:	3f04      	subs	r7, #4
 80071ba:	e7d1      	b.n	8007160 <__hexnan+0xd4>
 80071bc:	2004      	movs	r0, #4
 80071be:	b007      	add	sp, #28
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071c4 <_localeconv_r>:
 80071c4:	4800      	ldr	r0, [pc, #0]	; (80071c8 <_localeconv_r+0x4>)
 80071c6:	4770      	bx	lr
 80071c8:	20000164 	.word	0x20000164

080071cc <__retarget_lock_init_recursive>:
 80071cc:	4770      	bx	lr

080071ce <__retarget_lock_acquire_recursive>:
 80071ce:	4770      	bx	lr

080071d0 <__retarget_lock_release_recursive>:
 80071d0:	4770      	bx	lr
	...

080071d4 <malloc>:
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <malloc+0xc>)
 80071d6:	4601      	mov	r1, r0
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f000 bd67 	b.w	8007cac <_malloc_r>
 80071de:	bf00      	nop
 80071e0:	2000000c 	.word	0x2000000c

080071e4 <__ascii_mbtowc>:
 80071e4:	b082      	sub	sp, #8
 80071e6:	b901      	cbnz	r1, 80071ea <__ascii_mbtowc+0x6>
 80071e8:	a901      	add	r1, sp, #4
 80071ea:	b142      	cbz	r2, 80071fe <__ascii_mbtowc+0x1a>
 80071ec:	b14b      	cbz	r3, 8007202 <__ascii_mbtowc+0x1e>
 80071ee:	7813      	ldrb	r3, [r2, #0]
 80071f0:	600b      	str	r3, [r1, #0]
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	1e10      	subs	r0, r2, #0
 80071f6:	bf18      	it	ne
 80071f8:	2001      	movne	r0, #1
 80071fa:	b002      	add	sp, #8
 80071fc:	4770      	bx	lr
 80071fe:	4610      	mov	r0, r2
 8007200:	e7fb      	b.n	80071fa <__ascii_mbtowc+0x16>
 8007202:	f06f 0001 	mvn.w	r0, #1
 8007206:	e7f8      	b.n	80071fa <__ascii_mbtowc+0x16>

08007208 <memcpy>:
 8007208:	440a      	add	r2, r1
 800720a:	4291      	cmp	r1, r2
 800720c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007210:	d100      	bne.n	8007214 <memcpy+0xc>
 8007212:	4770      	bx	lr
 8007214:	b510      	push	{r4, lr}
 8007216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800721a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800721e:	4291      	cmp	r1, r2
 8007220:	d1f9      	bne.n	8007216 <memcpy+0xe>
 8007222:	bd10      	pop	{r4, pc}

08007224 <_Balloc>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
 800722c:	b976      	cbnz	r6, 800724c <_Balloc+0x28>
 800722e:	2010      	movs	r0, #16
 8007230:	f7ff ffd0 	bl	80071d4 <malloc>
 8007234:	4602      	mov	r2, r0
 8007236:	6260      	str	r0, [r4, #36]	; 0x24
 8007238:	b920      	cbnz	r0, 8007244 <_Balloc+0x20>
 800723a:	4b18      	ldr	r3, [pc, #96]	; (800729c <_Balloc+0x78>)
 800723c:	4818      	ldr	r0, [pc, #96]	; (80072a0 <_Balloc+0x7c>)
 800723e:	2166      	movs	r1, #102	; 0x66
 8007240:	f001 f89a 	bl	8008378 <__assert_func>
 8007244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007248:	6006      	str	r6, [r0, #0]
 800724a:	60c6      	str	r6, [r0, #12]
 800724c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800724e:	68f3      	ldr	r3, [r6, #12]
 8007250:	b183      	cbz	r3, 8007274 <_Balloc+0x50>
 8007252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800725a:	b9b8      	cbnz	r0, 800728c <_Balloc+0x68>
 800725c:	2101      	movs	r1, #1
 800725e:	fa01 f605 	lsl.w	r6, r1, r5
 8007262:	1d72      	adds	r2, r6, #5
 8007264:	0092      	lsls	r2, r2, #2
 8007266:	4620      	mov	r0, r4
 8007268:	f000 fc9d 	bl	8007ba6 <_calloc_r>
 800726c:	b160      	cbz	r0, 8007288 <_Balloc+0x64>
 800726e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007272:	e00e      	b.n	8007292 <_Balloc+0x6e>
 8007274:	2221      	movs	r2, #33	; 0x21
 8007276:	2104      	movs	r1, #4
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fc94 	bl	8007ba6 <_calloc_r>
 800727e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007280:	60f0      	str	r0, [r6, #12]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e4      	bne.n	8007252 <_Balloc+0x2e>
 8007288:	2000      	movs	r0, #0
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	6802      	ldr	r2, [r0, #0]
 800728e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007292:	2300      	movs	r3, #0
 8007294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007298:	e7f7      	b.n	800728a <_Balloc+0x66>
 800729a:	bf00      	nop
 800729c:	0800898d 	.word	0x0800898d
 80072a0:	08008aec 	.word	0x08008aec

080072a4 <_Bfree>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072a8:	4605      	mov	r5, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	b976      	cbnz	r6, 80072cc <_Bfree+0x28>
 80072ae:	2010      	movs	r0, #16
 80072b0:	f7ff ff90 	bl	80071d4 <malloc>
 80072b4:	4602      	mov	r2, r0
 80072b6:	6268      	str	r0, [r5, #36]	; 0x24
 80072b8:	b920      	cbnz	r0, 80072c4 <_Bfree+0x20>
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <_Bfree+0x3c>)
 80072bc:	4809      	ldr	r0, [pc, #36]	; (80072e4 <_Bfree+0x40>)
 80072be:	218a      	movs	r1, #138	; 0x8a
 80072c0:	f001 f85a 	bl	8008378 <__assert_func>
 80072c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072c8:	6006      	str	r6, [r0, #0]
 80072ca:	60c6      	str	r6, [r0, #12]
 80072cc:	b13c      	cbz	r4, 80072de <_Bfree+0x3a>
 80072ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072d0:	6862      	ldr	r2, [r4, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072d8:	6021      	str	r1, [r4, #0]
 80072da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	0800898d 	.word	0x0800898d
 80072e4:	08008aec 	.word	0x08008aec

080072e8 <__multadd>:
 80072e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ec:	690d      	ldr	r5, [r1, #16]
 80072ee:	4607      	mov	r7, r0
 80072f0:	460c      	mov	r4, r1
 80072f2:	461e      	mov	r6, r3
 80072f4:	f101 0c14 	add.w	ip, r1, #20
 80072f8:	2000      	movs	r0, #0
 80072fa:	f8dc 3000 	ldr.w	r3, [ip]
 80072fe:	b299      	uxth	r1, r3
 8007300:	fb02 6101 	mla	r1, r2, r1, r6
 8007304:	0c1e      	lsrs	r6, r3, #16
 8007306:	0c0b      	lsrs	r3, r1, #16
 8007308:	fb02 3306 	mla	r3, r2, r6, r3
 800730c:	b289      	uxth	r1, r1
 800730e:	3001      	adds	r0, #1
 8007310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007314:	4285      	cmp	r5, r0
 8007316:	f84c 1b04 	str.w	r1, [ip], #4
 800731a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800731e:	dcec      	bgt.n	80072fa <__multadd+0x12>
 8007320:	b30e      	cbz	r6, 8007366 <__multadd+0x7e>
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	42ab      	cmp	r3, r5
 8007326:	dc19      	bgt.n	800735c <__multadd+0x74>
 8007328:	6861      	ldr	r1, [r4, #4]
 800732a:	4638      	mov	r0, r7
 800732c:	3101      	adds	r1, #1
 800732e:	f7ff ff79 	bl	8007224 <_Balloc>
 8007332:	4680      	mov	r8, r0
 8007334:	b928      	cbnz	r0, 8007342 <__multadd+0x5a>
 8007336:	4602      	mov	r2, r0
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <__multadd+0x84>)
 800733a:	480d      	ldr	r0, [pc, #52]	; (8007370 <__multadd+0x88>)
 800733c:	21b5      	movs	r1, #181	; 0xb5
 800733e:	f001 f81b 	bl	8008378 <__assert_func>
 8007342:	6922      	ldr	r2, [r4, #16]
 8007344:	3202      	adds	r2, #2
 8007346:	f104 010c 	add.w	r1, r4, #12
 800734a:	0092      	lsls	r2, r2, #2
 800734c:	300c      	adds	r0, #12
 800734e:	f7ff ff5b 	bl	8007208 <memcpy>
 8007352:	4621      	mov	r1, r4
 8007354:	4638      	mov	r0, r7
 8007356:	f7ff ffa5 	bl	80072a4 <_Bfree>
 800735a:	4644      	mov	r4, r8
 800735c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007360:	3501      	adds	r5, #1
 8007362:	615e      	str	r6, [r3, #20]
 8007364:	6125      	str	r5, [r4, #16]
 8007366:	4620      	mov	r0, r4
 8007368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800736c:	080089ff 	.word	0x080089ff
 8007370:	08008aec 	.word	0x08008aec

08007374 <__s2b>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	4615      	mov	r5, r2
 800737c:	461f      	mov	r7, r3
 800737e:	2209      	movs	r2, #9
 8007380:	3308      	adds	r3, #8
 8007382:	4606      	mov	r6, r0
 8007384:	fb93 f3f2 	sdiv	r3, r3, r2
 8007388:	2100      	movs	r1, #0
 800738a:	2201      	movs	r2, #1
 800738c:	429a      	cmp	r2, r3
 800738e:	db09      	blt.n	80073a4 <__s2b+0x30>
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff ff47 	bl	8007224 <_Balloc>
 8007396:	b940      	cbnz	r0, 80073aa <__s2b+0x36>
 8007398:	4602      	mov	r2, r0
 800739a:	4b19      	ldr	r3, [pc, #100]	; (8007400 <__s2b+0x8c>)
 800739c:	4819      	ldr	r0, [pc, #100]	; (8007404 <__s2b+0x90>)
 800739e:	21ce      	movs	r1, #206	; 0xce
 80073a0:	f000 ffea 	bl	8008378 <__assert_func>
 80073a4:	0052      	lsls	r2, r2, #1
 80073a6:	3101      	adds	r1, #1
 80073a8:	e7f0      	b.n	800738c <__s2b+0x18>
 80073aa:	9b08      	ldr	r3, [sp, #32]
 80073ac:	6143      	str	r3, [r0, #20]
 80073ae:	2d09      	cmp	r5, #9
 80073b0:	f04f 0301 	mov.w	r3, #1
 80073b4:	6103      	str	r3, [r0, #16]
 80073b6:	dd16      	ble.n	80073e6 <__s2b+0x72>
 80073b8:	f104 0909 	add.w	r9, r4, #9
 80073bc:	46c8      	mov	r8, r9
 80073be:	442c      	add	r4, r5
 80073c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073c4:	4601      	mov	r1, r0
 80073c6:	3b30      	subs	r3, #48	; 0x30
 80073c8:	220a      	movs	r2, #10
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ff8c 	bl	80072e8 <__multadd>
 80073d0:	45a0      	cmp	r8, r4
 80073d2:	d1f5      	bne.n	80073c0 <__s2b+0x4c>
 80073d4:	f1a5 0408 	sub.w	r4, r5, #8
 80073d8:	444c      	add	r4, r9
 80073da:	1b2d      	subs	r5, r5, r4
 80073dc:	1963      	adds	r3, r4, r5
 80073de:	42bb      	cmp	r3, r7
 80073e0:	db04      	blt.n	80073ec <__s2b+0x78>
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	340a      	adds	r4, #10
 80073e8:	2509      	movs	r5, #9
 80073ea:	e7f6      	b.n	80073da <__s2b+0x66>
 80073ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80073f0:	4601      	mov	r1, r0
 80073f2:	3b30      	subs	r3, #48	; 0x30
 80073f4:	220a      	movs	r2, #10
 80073f6:	4630      	mov	r0, r6
 80073f8:	f7ff ff76 	bl	80072e8 <__multadd>
 80073fc:	e7ee      	b.n	80073dc <__s2b+0x68>
 80073fe:	bf00      	nop
 8007400:	080089ff 	.word	0x080089ff
 8007404:	08008aec 	.word	0x08008aec

08007408 <__hi0bits>:
 8007408:	0c03      	lsrs	r3, r0, #16
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	b9d3      	cbnz	r3, 8007444 <__hi0bits+0x3c>
 800740e:	0400      	lsls	r0, r0, #16
 8007410:	2310      	movs	r3, #16
 8007412:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007416:	bf04      	itt	eq
 8007418:	0200      	lsleq	r0, r0, #8
 800741a:	3308      	addeq	r3, #8
 800741c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007420:	bf04      	itt	eq
 8007422:	0100      	lsleq	r0, r0, #4
 8007424:	3304      	addeq	r3, #4
 8007426:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800742a:	bf04      	itt	eq
 800742c:	0080      	lsleq	r0, r0, #2
 800742e:	3302      	addeq	r3, #2
 8007430:	2800      	cmp	r0, #0
 8007432:	db05      	blt.n	8007440 <__hi0bits+0x38>
 8007434:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007438:	f103 0301 	add.w	r3, r3, #1
 800743c:	bf08      	it	eq
 800743e:	2320      	moveq	r3, #32
 8007440:	4618      	mov	r0, r3
 8007442:	4770      	bx	lr
 8007444:	2300      	movs	r3, #0
 8007446:	e7e4      	b.n	8007412 <__hi0bits+0xa>

08007448 <__lo0bits>:
 8007448:	6803      	ldr	r3, [r0, #0]
 800744a:	f013 0207 	ands.w	r2, r3, #7
 800744e:	4601      	mov	r1, r0
 8007450:	d00b      	beq.n	800746a <__lo0bits+0x22>
 8007452:	07da      	lsls	r2, r3, #31
 8007454:	d423      	bmi.n	800749e <__lo0bits+0x56>
 8007456:	0798      	lsls	r0, r3, #30
 8007458:	bf49      	itett	mi
 800745a:	085b      	lsrmi	r3, r3, #1
 800745c:	089b      	lsrpl	r3, r3, #2
 800745e:	2001      	movmi	r0, #1
 8007460:	600b      	strmi	r3, [r1, #0]
 8007462:	bf5c      	itt	pl
 8007464:	600b      	strpl	r3, [r1, #0]
 8007466:	2002      	movpl	r0, #2
 8007468:	4770      	bx	lr
 800746a:	b298      	uxth	r0, r3
 800746c:	b9a8      	cbnz	r0, 800749a <__lo0bits+0x52>
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	2010      	movs	r0, #16
 8007472:	b2da      	uxtb	r2, r3
 8007474:	b90a      	cbnz	r2, 800747a <__lo0bits+0x32>
 8007476:	3008      	adds	r0, #8
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	071a      	lsls	r2, r3, #28
 800747c:	bf04      	itt	eq
 800747e:	091b      	lsreq	r3, r3, #4
 8007480:	3004      	addeq	r0, #4
 8007482:	079a      	lsls	r2, r3, #30
 8007484:	bf04      	itt	eq
 8007486:	089b      	lsreq	r3, r3, #2
 8007488:	3002      	addeq	r0, #2
 800748a:	07da      	lsls	r2, r3, #31
 800748c:	d403      	bmi.n	8007496 <__lo0bits+0x4e>
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	f100 0001 	add.w	r0, r0, #1
 8007494:	d005      	beq.n	80074a2 <__lo0bits+0x5a>
 8007496:	600b      	str	r3, [r1, #0]
 8007498:	4770      	bx	lr
 800749a:	4610      	mov	r0, r2
 800749c:	e7e9      	b.n	8007472 <__lo0bits+0x2a>
 800749e:	2000      	movs	r0, #0
 80074a0:	4770      	bx	lr
 80074a2:	2020      	movs	r0, #32
 80074a4:	4770      	bx	lr
	...

080074a8 <__i2b>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	460c      	mov	r4, r1
 80074ac:	2101      	movs	r1, #1
 80074ae:	f7ff feb9 	bl	8007224 <_Balloc>
 80074b2:	4602      	mov	r2, r0
 80074b4:	b928      	cbnz	r0, 80074c2 <__i2b+0x1a>
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <__i2b+0x24>)
 80074b8:	4805      	ldr	r0, [pc, #20]	; (80074d0 <__i2b+0x28>)
 80074ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074be:	f000 ff5b 	bl	8008378 <__assert_func>
 80074c2:	2301      	movs	r3, #1
 80074c4:	6144      	str	r4, [r0, #20]
 80074c6:	6103      	str	r3, [r0, #16]
 80074c8:	bd10      	pop	{r4, pc}
 80074ca:	bf00      	nop
 80074cc:	080089ff 	.word	0x080089ff
 80074d0:	08008aec 	.word	0x08008aec

080074d4 <__multiply>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	4691      	mov	r9, r2
 80074da:	690a      	ldr	r2, [r1, #16]
 80074dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bfb8      	it	lt
 80074e4:	460b      	movlt	r3, r1
 80074e6:	460c      	mov	r4, r1
 80074e8:	bfbc      	itt	lt
 80074ea:	464c      	movlt	r4, r9
 80074ec:	4699      	movlt	r9, r3
 80074ee:	6927      	ldr	r7, [r4, #16]
 80074f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074f4:	68a3      	ldr	r3, [r4, #8]
 80074f6:	6861      	ldr	r1, [r4, #4]
 80074f8:	eb07 060a 	add.w	r6, r7, sl
 80074fc:	42b3      	cmp	r3, r6
 80074fe:	b085      	sub	sp, #20
 8007500:	bfb8      	it	lt
 8007502:	3101      	addlt	r1, #1
 8007504:	f7ff fe8e 	bl	8007224 <_Balloc>
 8007508:	b930      	cbnz	r0, 8007518 <__multiply+0x44>
 800750a:	4602      	mov	r2, r0
 800750c:	4b44      	ldr	r3, [pc, #272]	; (8007620 <__multiply+0x14c>)
 800750e:	4845      	ldr	r0, [pc, #276]	; (8007624 <__multiply+0x150>)
 8007510:	f240 115d 	movw	r1, #349	; 0x15d
 8007514:	f000 ff30 	bl	8008378 <__assert_func>
 8007518:	f100 0514 	add.w	r5, r0, #20
 800751c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007520:	462b      	mov	r3, r5
 8007522:	2200      	movs	r2, #0
 8007524:	4543      	cmp	r3, r8
 8007526:	d321      	bcc.n	800756c <__multiply+0x98>
 8007528:	f104 0314 	add.w	r3, r4, #20
 800752c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007530:	f109 0314 	add.w	r3, r9, #20
 8007534:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007538:	9202      	str	r2, [sp, #8]
 800753a:	1b3a      	subs	r2, r7, r4
 800753c:	3a15      	subs	r2, #21
 800753e:	f022 0203 	bic.w	r2, r2, #3
 8007542:	3204      	adds	r2, #4
 8007544:	f104 0115 	add.w	r1, r4, #21
 8007548:	428f      	cmp	r7, r1
 800754a:	bf38      	it	cc
 800754c:	2204      	movcc	r2, #4
 800754e:	9201      	str	r2, [sp, #4]
 8007550:	9a02      	ldr	r2, [sp, #8]
 8007552:	9303      	str	r3, [sp, #12]
 8007554:	429a      	cmp	r2, r3
 8007556:	d80c      	bhi.n	8007572 <__multiply+0x9e>
 8007558:	2e00      	cmp	r6, #0
 800755a:	dd03      	ble.n	8007564 <__multiply+0x90>
 800755c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007560:	2b00      	cmp	r3, #0
 8007562:	d05a      	beq.n	800761a <__multiply+0x146>
 8007564:	6106      	str	r6, [r0, #16]
 8007566:	b005      	add	sp, #20
 8007568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756c:	f843 2b04 	str.w	r2, [r3], #4
 8007570:	e7d8      	b.n	8007524 <__multiply+0x50>
 8007572:	f8b3 a000 	ldrh.w	sl, [r3]
 8007576:	f1ba 0f00 	cmp.w	sl, #0
 800757a:	d024      	beq.n	80075c6 <__multiply+0xf2>
 800757c:	f104 0e14 	add.w	lr, r4, #20
 8007580:	46a9      	mov	r9, r5
 8007582:	f04f 0c00 	mov.w	ip, #0
 8007586:	f85e 2b04 	ldr.w	r2, [lr], #4
 800758a:	f8d9 1000 	ldr.w	r1, [r9]
 800758e:	fa1f fb82 	uxth.w	fp, r2
 8007592:	b289      	uxth	r1, r1
 8007594:	fb0a 110b 	mla	r1, sl, fp, r1
 8007598:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800759c:	f8d9 2000 	ldr.w	r2, [r9]
 80075a0:	4461      	add	r1, ip
 80075a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80075aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075ae:	b289      	uxth	r1, r1
 80075b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075b4:	4577      	cmp	r7, lr
 80075b6:	f849 1b04 	str.w	r1, [r9], #4
 80075ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075be:	d8e2      	bhi.n	8007586 <__multiply+0xb2>
 80075c0:	9a01      	ldr	r2, [sp, #4]
 80075c2:	f845 c002 	str.w	ip, [r5, r2]
 80075c6:	9a03      	ldr	r2, [sp, #12]
 80075c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075cc:	3304      	adds	r3, #4
 80075ce:	f1b9 0f00 	cmp.w	r9, #0
 80075d2:	d020      	beq.n	8007616 <__multiply+0x142>
 80075d4:	6829      	ldr	r1, [r5, #0]
 80075d6:	f104 0c14 	add.w	ip, r4, #20
 80075da:	46ae      	mov	lr, r5
 80075dc:	f04f 0a00 	mov.w	sl, #0
 80075e0:	f8bc b000 	ldrh.w	fp, [ip]
 80075e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075e8:	fb09 220b 	mla	r2, r9, fp, r2
 80075ec:	4492      	add	sl, r2
 80075ee:	b289      	uxth	r1, r1
 80075f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075f4:	f84e 1b04 	str.w	r1, [lr], #4
 80075f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80075fc:	f8be 1000 	ldrh.w	r1, [lr]
 8007600:	0c12      	lsrs	r2, r2, #16
 8007602:	fb09 1102 	mla	r1, r9, r2, r1
 8007606:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800760a:	4567      	cmp	r7, ip
 800760c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007610:	d8e6      	bhi.n	80075e0 <__multiply+0x10c>
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	50a9      	str	r1, [r5, r2]
 8007616:	3504      	adds	r5, #4
 8007618:	e79a      	b.n	8007550 <__multiply+0x7c>
 800761a:	3e01      	subs	r6, #1
 800761c:	e79c      	b.n	8007558 <__multiply+0x84>
 800761e:	bf00      	nop
 8007620:	080089ff 	.word	0x080089ff
 8007624:	08008aec 	.word	0x08008aec

08007628 <__pow5mult>:
 8007628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800762c:	4615      	mov	r5, r2
 800762e:	f012 0203 	ands.w	r2, r2, #3
 8007632:	4606      	mov	r6, r0
 8007634:	460f      	mov	r7, r1
 8007636:	d007      	beq.n	8007648 <__pow5mult+0x20>
 8007638:	4c25      	ldr	r4, [pc, #148]	; (80076d0 <__pow5mult+0xa8>)
 800763a:	3a01      	subs	r2, #1
 800763c:	2300      	movs	r3, #0
 800763e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007642:	f7ff fe51 	bl	80072e8 <__multadd>
 8007646:	4607      	mov	r7, r0
 8007648:	10ad      	asrs	r5, r5, #2
 800764a:	d03d      	beq.n	80076c8 <__pow5mult+0xa0>
 800764c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800764e:	b97c      	cbnz	r4, 8007670 <__pow5mult+0x48>
 8007650:	2010      	movs	r0, #16
 8007652:	f7ff fdbf 	bl	80071d4 <malloc>
 8007656:	4602      	mov	r2, r0
 8007658:	6270      	str	r0, [r6, #36]	; 0x24
 800765a:	b928      	cbnz	r0, 8007668 <__pow5mult+0x40>
 800765c:	4b1d      	ldr	r3, [pc, #116]	; (80076d4 <__pow5mult+0xac>)
 800765e:	481e      	ldr	r0, [pc, #120]	; (80076d8 <__pow5mult+0xb0>)
 8007660:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007664:	f000 fe88 	bl	8008378 <__assert_func>
 8007668:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800766c:	6004      	str	r4, [r0, #0]
 800766e:	60c4      	str	r4, [r0, #12]
 8007670:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007674:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007678:	b94c      	cbnz	r4, 800768e <__pow5mult+0x66>
 800767a:	f240 2171 	movw	r1, #625	; 0x271
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff ff12 	bl	80074a8 <__i2b>
 8007684:	2300      	movs	r3, #0
 8007686:	f8c8 0008 	str.w	r0, [r8, #8]
 800768a:	4604      	mov	r4, r0
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	07eb      	lsls	r3, r5, #31
 8007694:	d50a      	bpl.n	80076ac <__pow5mult+0x84>
 8007696:	4639      	mov	r1, r7
 8007698:	4622      	mov	r2, r4
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff ff1a 	bl	80074d4 <__multiply>
 80076a0:	4639      	mov	r1, r7
 80076a2:	4680      	mov	r8, r0
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7ff fdfd 	bl	80072a4 <_Bfree>
 80076aa:	4647      	mov	r7, r8
 80076ac:	106d      	asrs	r5, r5, #1
 80076ae:	d00b      	beq.n	80076c8 <__pow5mult+0xa0>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	b938      	cbnz	r0, 80076c4 <__pow5mult+0x9c>
 80076b4:	4622      	mov	r2, r4
 80076b6:	4621      	mov	r1, r4
 80076b8:	4630      	mov	r0, r6
 80076ba:	f7ff ff0b 	bl	80074d4 <__multiply>
 80076be:	6020      	str	r0, [r4, #0]
 80076c0:	f8c0 9000 	str.w	r9, [r0]
 80076c4:	4604      	mov	r4, r0
 80076c6:	e7e4      	b.n	8007692 <__pow5mult+0x6a>
 80076c8:	4638      	mov	r0, r7
 80076ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ce:	bf00      	nop
 80076d0:	08008c38 	.word	0x08008c38
 80076d4:	0800898d 	.word	0x0800898d
 80076d8:	08008aec 	.word	0x08008aec

080076dc <__lshift>:
 80076dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	460c      	mov	r4, r1
 80076e2:	6849      	ldr	r1, [r1, #4]
 80076e4:	6923      	ldr	r3, [r4, #16]
 80076e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	4607      	mov	r7, r0
 80076ee:	4691      	mov	r9, r2
 80076f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076f4:	f108 0601 	add.w	r6, r8, #1
 80076f8:	42b3      	cmp	r3, r6
 80076fa:	db0b      	blt.n	8007714 <__lshift+0x38>
 80076fc:	4638      	mov	r0, r7
 80076fe:	f7ff fd91 	bl	8007224 <_Balloc>
 8007702:	4605      	mov	r5, r0
 8007704:	b948      	cbnz	r0, 800771a <__lshift+0x3e>
 8007706:	4602      	mov	r2, r0
 8007708:	4b2a      	ldr	r3, [pc, #168]	; (80077b4 <__lshift+0xd8>)
 800770a:	482b      	ldr	r0, [pc, #172]	; (80077b8 <__lshift+0xdc>)
 800770c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007710:	f000 fe32 	bl	8008378 <__assert_func>
 8007714:	3101      	adds	r1, #1
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	e7ee      	b.n	80076f8 <__lshift+0x1c>
 800771a:	2300      	movs	r3, #0
 800771c:	f100 0114 	add.w	r1, r0, #20
 8007720:	f100 0210 	add.w	r2, r0, #16
 8007724:	4618      	mov	r0, r3
 8007726:	4553      	cmp	r3, sl
 8007728:	db37      	blt.n	800779a <__lshift+0xbe>
 800772a:	6920      	ldr	r0, [r4, #16]
 800772c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007730:	f104 0314 	add.w	r3, r4, #20
 8007734:	f019 091f 	ands.w	r9, r9, #31
 8007738:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800773c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007740:	d02f      	beq.n	80077a2 <__lshift+0xc6>
 8007742:	f1c9 0e20 	rsb	lr, r9, #32
 8007746:	468a      	mov	sl, r1
 8007748:	f04f 0c00 	mov.w	ip, #0
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	fa02 f209 	lsl.w	r2, r2, r9
 8007752:	ea42 020c 	orr.w	r2, r2, ip
 8007756:	f84a 2b04 	str.w	r2, [sl], #4
 800775a:	f853 2b04 	ldr.w	r2, [r3], #4
 800775e:	4298      	cmp	r0, r3
 8007760:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007764:	d8f2      	bhi.n	800774c <__lshift+0x70>
 8007766:	1b03      	subs	r3, r0, r4
 8007768:	3b15      	subs	r3, #21
 800776a:	f023 0303 	bic.w	r3, r3, #3
 800776e:	3304      	adds	r3, #4
 8007770:	f104 0215 	add.w	r2, r4, #21
 8007774:	4290      	cmp	r0, r2
 8007776:	bf38      	it	cc
 8007778:	2304      	movcc	r3, #4
 800777a:	f841 c003 	str.w	ip, [r1, r3]
 800777e:	f1bc 0f00 	cmp.w	ip, #0
 8007782:	d001      	beq.n	8007788 <__lshift+0xac>
 8007784:	f108 0602 	add.w	r6, r8, #2
 8007788:	3e01      	subs	r6, #1
 800778a:	4638      	mov	r0, r7
 800778c:	612e      	str	r6, [r5, #16]
 800778e:	4621      	mov	r1, r4
 8007790:	f7ff fd88 	bl	80072a4 <_Bfree>
 8007794:	4628      	mov	r0, r5
 8007796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779a:	f842 0f04 	str.w	r0, [r2, #4]!
 800779e:	3301      	adds	r3, #1
 80077a0:	e7c1      	b.n	8007726 <__lshift+0x4a>
 80077a2:	3904      	subs	r1, #4
 80077a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80077ac:	4298      	cmp	r0, r3
 80077ae:	d8f9      	bhi.n	80077a4 <__lshift+0xc8>
 80077b0:	e7ea      	b.n	8007788 <__lshift+0xac>
 80077b2:	bf00      	nop
 80077b4:	080089ff 	.word	0x080089ff
 80077b8:	08008aec 	.word	0x08008aec

080077bc <__mcmp>:
 80077bc:	b530      	push	{r4, r5, lr}
 80077be:	6902      	ldr	r2, [r0, #16]
 80077c0:	690c      	ldr	r4, [r1, #16]
 80077c2:	1b12      	subs	r2, r2, r4
 80077c4:	d10e      	bne.n	80077e4 <__mcmp+0x28>
 80077c6:	f100 0314 	add.w	r3, r0, #20
 80077ca:	3114      	adds	r1, #20
 80077cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80077d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077dc:	42a5      	cmp	r5, r4
 80077de:	d003      	beq.n	80077e8 <__mcmp+0x2c>
 80077e0:	d305      	bcc.n	80077ee <__mcmp+0x32>
 80077e2:	2201      	movs	r2, #1
 80077e4:	4610      	mov	r0, r2
 80077e6:	bd30      	pop	{r4, r5, pc}
 80077e8:	4283      	cmp	r3, r0
 80077ea:	d3f3      	bcc.n	80077d4 <__mcmp+0x18>
 80077ec:	e7fa      	b.n	80077e4 <__mcmp+0x28>
 80077ee:	f04f 32ff 	mov.w	r2, #4294967295
 80077f2:	e7f7      	b.n	80077e4 <__mcmp+0x28>

080077f4 <__mdiff>:
 80077f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	460c      	mov	r4, r1
 80077fa:	4606      	mov	r6, r0
 80077fc:	4611      	mov	r1, r2
 80077fe:	4620      	mov	r0, r4
 8007800:	4690      	mov	r8, r2
 8007802:	f7ff ffdb 	bl	80077bc <__mcmp>
 8007806:	1e05      	subs	r5, r0, #0
 8007808:	d110      	bne.n	800782c <__mdiff+0x38>
 800780a:	4629      	mov	r1, r5
 800780c:	4630      	mov	r0, r6
 800780e:	f7ff fd09 	bl	8007224 <_Balloc>
 8007812:	b930      	cbnz	r0, 8007822 <__mdiff+0x2e>
 8007814:	4b3a      	ldr	r3, [pc, #232]	; (8007900 <__mdiff+0x10c>)
 8007816:	4602      	mov	r2, r0
 8007818:	f240 2132 	movw	r1, #562	; 0x232
 800781c:	4839      	ldr	r0, [pc, #228]	; (8007904 <__mdiff+0x110>)
 800781e:	f000 fdab 	bl	8008378 <__assert_func>
 8007822:	2301      	movs	r3, #1
 8007824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782c:	bfa4      	itt	ge
 800782e:	4643      	movge	r3, r8
 8007830:	46a0      	movge	r8, r4
 8007832:	4630      	mov	r0, r6
 8007834:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007838:	bfa6      	itte	ge
 800783a:	461c      	movge	r4, r3
 800783c:	2500      	movge	r5, #0
 800783e:	2501      	movlt	r5, #1
 8007840:	f7ff fcf0 	bl	8007224 <_Balloc>
 8007844:	b920      	cbnz	r0, 8007850 <__mdiff+0x5c>
 8007846:	4b2e      	ldr	r3, [pc, #184]	; (8007900 <__mdiff+0x10c>)
 8007848:	4602      	mov	r2, r0
 800784a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800784e:	e7e5      	b.n	800781c <__mdiff+0x28>
 8007850:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007854:	6926      	ldr	r6, [r4, #16]
 8007856:	60c5      	str	r5, [r0, #12]
 8007858:	f104 0914 	add.w	r9, r4, #20
 800785c:	f108 0514 	add.w	r5, r8, #20
 8007860:	f100 0e14 	add.w	lr, r0, #20
 8007864:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007868:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800786c:	f108 0210 	add.w	r2, r8, #16
 8007870:	46f2      	mov	sl, lr
 8007872:	2100      	movs	r1, #0
 8007874:	f859 3b04 	ldr.w	r3, [r9], #4
 8007878:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800787c:	fa1f f883 	uxth.w	r8, r3
 8007880:	fa11 f18b 	uxtah	r1, r1, fp
 8007884:	0c1b      	lsrs	r3, r3, #16
 8007886:	eba1 0808 	sub.w	r8, r1, r8
 800788a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800788e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007892:	fa1f f888 	uxth.w	r8, r8
 8007896:	1419      	asrs	r1, r3, #16
 8007898:	454e      	cmp	r6, r9
 800789a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800789e:	f84a 3b04 	str.w	r3, [sl], #4
 80078a2:	d8e7      	bhi.n	8007874 <__mdiff+0x80>
 80078a4:	1b33      	subs	r3, r6, r4
 80078a6:	3b15      	subs	r3, #21
 80078a8:	f023 0303 	bic.w	r3, r3, #3
 80078ac:	3304      	adds	r3, #4
 80078ae:	3415      	adds	r4, #21
 80078b0:	42a6      	cmp	r6, r4
 80078b2:	bf38      	it	cc
 80078b4:	2304      	movcc	r3, #4
 80078b6:	441d      	add	r5, r3
 80078b8:	4473      	add	r3, lr
 80078ba:	469e      	mov	lr, r3
 80078bc:	462e      	mov	r6, r5
 80078be:	4566      	cmp	r6, ip
 80078c0:	d30e      	bcc.n	80078e0 <__mdiff+0xec>
 80078c2:	f10c 0203 	add.w	r2, ip, #3
 80078c6:	1b52      	subs	r2, r2, r5
 80078c8:	f022 0203 	bic.w	r2, r2, #3
 80078cc:	3d03      	subs	r5, #3
 80078ce:	45ac      	cmp	ip, r5
 80078d0:	bf38      	it	cc
 80078d2:	2200      	movcc	r2, #0
 80078d4:	441a      	add	r2, r3
 80078d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80078da:	b17b      	cbz	r3, 80078fc <__mdiff+0x108>
 80078dc:	6107      	str	r7, [r0, #16]
 80078de:	e7a3      	b.n	8007828 <__mdiff+0x34>
 80078e0:	f856 8b04 	ldr.w	r8, [r6], #4
 80078e4:	fa11 f288 	uxtah	r2, r1, r8
 80078e8:	1414      	asrs	r4, r2, #16
 80078ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078ee:	b292      	uxth	r2, r2
 80078f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078f4:	f84e 2b04 	str.w	r2, [lr], #4
 80078f8:	1421      	asrs	r1, r4, #16
 80078fa:	e7e0      	b.n	80078be <__mdiff+0xca>
 80078fc:	3f01      	subs	r7, #1
 80078fe:	e7ea      	b.n	80078d6 <__mdiff+0xe2>
 8007900:	080089ff 	.word	0x080089ff
 8007904:	08008aec 	.word	0x08008aec

08007908 <__ulp>:
 8007908:	b082      	sub	sp, #8
 800790a:	ed8d 0b00 	vstr	d0, [sp]
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	4912      	ldr	r1, [pc, #72]	; (800795c <__ulp+0x54>)
 8007912:	4019      	ands	r1, r3
 8007914:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007918:	2900      	cmp	r1, #0
 800791a:	dd05      	ble.n	8007928 <__ulp+0x20>
 800791c:	2200      	movs	r2, #0
 800791e:	460b      	mov	r3, r1
 8007920:	ec43 2b10 	vmov	d0, r2, r3
 8007924:	b002      	add	sp, #8
 8007926:	4770      	bx	lr
 8007928:	4249      	negs	r1, r1
 800792a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800792e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	da04      	bge.n	8007946 <__ulp+0x3e>
 800793c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007940:	fa41 f300 	asr.w	r3, r1, r0
 8007944:	e7ec      	b.n	8007920 <__ulp+0x18>
 8007946:	f1a0 0114 	sub.w	r1, r0, #20
 800794a:	291e      	cmp	r1, #30
 800794c:	bfda      	itte	le
 800794e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007952:	fa20 f101 	lsrle.w	r1, r0, r1
 8007956:	2101      	movgt	r1, #1
 8007958:	460a      	mov	r2, r1
 800795a:	e7e1      	b.n	8007920 <__ulp+0x18>
 800795c:	7ff00000 	.word	0x7ff00000

08007960 <__b2d>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	6905      	ldr	r5, [r0, #16]
 8007964:	f100 0714 	add.w	r7, r0, #20
 8007968:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800796c:	1f2e      	subs	r6, r5, #4
 800796e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007972:	4620      	mov	r0, r4
 8007974:	f7ff fd48 	bl	8007408 <__hi0bits>
 8007978:	f1c0 0320 	rsb	r3, r0, #32
 800797c:	280a      	cmp	r0, #10
 800797e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80079fc <__b2d+0x9c>
 8007982:	600b      	str	r3, [r1, #0]
 8007984:	dc14      	bgt.n	80079b0 <__b2d+0x50>
 8007986:	f1c0 0e0b 	rsb	lr, r0, #11
 800798a:	fa24 f10e 	lsr.w	r1, r4, lr
 800798e:	42b7      	cmp	r7, r6
 8007990:	ea41 030c 	orr.w	r3, r1, ip
 8007994:	bf34      	ite	cc
 8007996:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800799a:	2100      	movcs	r1, #0
 800799c:	3015      	adds	r0, #21
 800799e:	fa04 f000 	lsl.w	r0, r4, r0
 80079a2:	fa21 f10e 	lsr.w	r1, r1, lr
 80079a6:	ea40 0201 	orr.w	r2, r0, r1
 80079aa:	ec43 2b10 	vmov	d0, r2, r3
 80079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b0:	42b7      	cmp	r7, r6
 80079b2:	bf3a      	itte	cc
 80079b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80079bc:	2100      	movcs	r1, #0
 80079be:	380b      	subs	r0, #11
 80079c0:	d017      	beq.n	80079f2 <__b2d+0x92>
 80079c2:	f1c0 0c20 	rsb	ip, r0, #32
 80079c6:	fa04 f500 	lsl.w	r5, r4, r0
 80079ca:	42be      	cmp	r6, r7
 80079cc:	fa21 f40c 	lsr.w	r4, r1, ip
 80079d0:	ea45 0504 	orr.w	r5, r5, r4
 80079d4:	bf8c      	ite	hi
 80079d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80079da:	2400      	movls	r4, #0
 80079dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80079e0:	fa01 f000 	lsl.w	r0, r1, r0
 80079e4:	fa24 f40c 	lsr.w	r4, r4, ip
 80079e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079ec:	ea40 0204 	orr.w	r2, r0, r4
 80079f0:	e7db      	b.n	80079aa <__b2d+0x4a>
 80079f2:	ea44 030c 	orr.w	r3, r4, ip
 80079f6:	460a      	mov	r2, r1
 80079f8:	e7d7      	b.n	80079aa <__b2d+0x4a>
 80079fa:	bf00      	nop
 80079fc:	3ff00000 	.word	0x3ff00000

08007a00 <__d2b>:
 8007a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4689      	mov	r9, r1
 8007a06:	2101      	movs	r1, #1
 8007a08:	ec57 6b10 	vmov	r6, r7, d0
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	f7ff fc09 	bl	8007224 <_Balloc>
 8007a12:	4604      	mov	r4, r0
 8007a14:	b930      	cbnz	r0, 8007a24 <__d2b+0x24>
 8007a16:	4602      	mov	r2, r0
 8007a18:	4b25      	ldr	r3, [pc, #148]	; (8007ab0 <__d2b+0xb0>)
 8007a1a:	4826      	ldr	r0, [pc, #152]	; (8007ab4 <__d2b+0xb4>)
 8007a1c:	f240 310a 	movw	r1, #778	; 0x30a
 8007a20:	f000 fcaa 	bl	8008378 <__assert_func>
 8007a24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007a28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a2c:	bb35      	cbnz	r5, 8007a7c <__d2b+0x7c>
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	d028      	beq.n	8007a86 <__d2b+0x86>
 8007a34:	4668      	mov	r0, sp
 8007a36:	9600      	str	r6, [sp, #0]
 8007a38:	f7ff fd06 	bl	8007448 <__lo0bits>
 8007a3c:	9900      	ldr	r1, [sp, #0]
 8007a3e:	b300      	cbz	r0, 8007a82 <__d2b+0x82>
 8007a40:	9a01      	ldr	r2, [sp, #4]
 8007a42:	f1c0 0320 	rsb	r3, r0, #32
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	40c2      	lsrs	r2, r0
 8007a4e:	6163      	str	r3, [r4, #20]
 8007a50:	9201      	str	r2, [sp, #4]
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	61a3      	str	r3, [r4, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bf14      	ite	ne
 8007a5a:	2202      	movne	r2, #2
 8007a5c:	2201      	moveq	r2, #1
 8007a5e:	6122      	str	r2, [r4, #16]
 8007a60:	b1d5      	cbz	r5, 8007a98 <__d2b+0x98>
 8007a62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a66:	4405      	add	r5, r0
 8007a68:	f8c9 5000 	str.w	r5, [r9]
 8007a6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a70:	f8c8 0000 	str.w	r0, [r8]
 8007a74:	4620      	mov	r0, r4
 8007a76:	b003      	add	sp, #12
 8007a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a80:	e7d5      	b.n	8007a2e <__d2b+0x2e>
 8007a82:	6161      	str	r1, [r4, #20]
 8007a84:	e7e5      	b.n	8007a52 <__d2b+0x52>
 8007a86:	a801      	add	r0, sp, #4
 8007a88:	f7ff fcde 	bl	8007448 <__lo0bits>
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	6163      	str	r3, [r4, #20]
 8007a90:	2201      	movs	r2, #1
 8007a92:	6122      	str	r2, [r4, #16]
 8007a94:	3020      	adds	r0, #32
 8007a96:	e7e3      	b.n	8007a60 <__d2b+0x60>
 8007a98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007aa0:	f8c9 0000 	str.w	r0, [r9]
 8007aa4:	6918      	ldr	r0, [r3, #16]
 8007aa6:	f7ff fcaf 	bl	8007408 <__hi0bits>
 8007aaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007aae:	e7df      	b.n	8007a70 <__d2b+0x70>
 8007ab0:	080089ff 	.word	0x080089ff
 8007ab4:	08008aec 	.word	0x08008aec

08007ab8 <__ratio>:
 8007ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	4688      	mov	r8, r1
 8007abe:	4669      	mov	r1, sp
 8007ac0:	4681      	mov	r9, r0
 8007ac2:	f7ff ff4d 	bl	8007960 <__b2d>
 8007ac6:	a901      	add	r1, sp, #4
 8007ac8:	4640      	mov	r0, r8
 8007aca:	ec55 4b10 	vmov	r4, r5, d0
 8007ace:	f7ff ff47 	bl	8007960 <__b2d>
 8007ad2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ad6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ada:	eba3 0c02 	sub.w	ip, r3, r2
 8007ade:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ae8:	ec51 0b10 	vmov	r0, r1, d0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfd6      	itet	le
 8007af0:	460a      	movle	r2, r1
 8007af2:	462a      	movgt	r2, r5
 8007af4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007af8:	468b      	mov	fp, r1
 8007afa:	462f      	mov	r7, r5
 8007afc:	bfd4      	ite	le
 8007afe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b06:	4620      	mov	r0, r4
 8007b08:	ee10 2a10 	vmov	r2, s0
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	4639      	mov	r1, r7
 8007b10:	f7f8 feac 	bl	800086c <__aeabi_ddiv>
 8007b14:	ec41 0b10 	vmov	d0, r0, r1
 8007b18:	b003      	add	sp, #12
 8007b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b1e <__copybits>:
 8007b1e:	3901      	subs	r1, #1
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	1149      	asrs	r1, r1, #5
 8007b24:	6914      	ldr	r4, [r2, #16]
 8007b26:	3101      	adds	r1, #1
 8007b28:	f102 0314 	add.w	r3, r2, #20
 8007b2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b34:	1f05      	subs	r5, r0, #4
 8007b36:	42a3      	cmp	r3, r4
 8007b38:	d30c      	bcc.n	8007b54 <__copybits+0x36>
 8007b3a:	1aa3      	subs	r3, r4, r2
 8007b3c:	3b11      	subs	r3, #17
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	3211      	adds	r2, #17
 8007b44:	42a2      	cmp	r2, r4
 8007b46:	bf88      	it	hi
 8007b48:	2300      	movhi	r3, #0
 8007b4a:	4418      	add	r0, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4288      	cmp	r0, r1
 8007b50:	d305      	bcc.n	8007b5e <__copybits+0x40>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b58:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b5c:	e7eb      	b.n	8007b36 <__copybits+0x18>
 8007b5e:	f840 3b04 	str.w	r3, [r0], #4
 8007b62:	e7f4      	b.n	8007b4e <__copybits+0x30>

08007b64 <__any_on>:
 8007b64:	f100 0214 	add.w	r2, r0, #20
 8007b68:	6900      	ldr	r0, [r0, #16]
 8007b6a:	114b      	asrs	r3, r1, #5
 8007b6c:	4298      	cmp	r0, r3
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	db11      	blt.n	8007b96 <__any_on+0x32>
 8007b72:	dd0a      	ble.n	8007b8a <__any_on+0x26>
 8007b74:	f011 011f 	ands.w	r1, r1, #31
 8007b78:	d007      	beq.n	8007b8a <__any_on+0x26>
 8007b7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b7e:	fa24 f001 	lsr.w	r0, r4, r1
 8007b82:	fa00 f101 	lsl.w	r1, r0, r1
 8007b86:	428c      	cmp	r4, r1
 8007b88:	d10b      	bne.n	8007ba2 <__any_on+0x3e>
 8007b8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d803      	bhi.n	8007b9a <__any_on+0x36>
 8007b92:	2000      	movs	r0, #0
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	4603      	mov	r3, r0
 8007b98:	e7f7      	b.n	8007b8a <__any_on+0x26>
 8007b9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	d0f5      	beq.n	8007b8e <__any_on+0x2a>
 8007ba2:	2001      	movs	r0, #1
 8007ba4:	e7f6      	b.n	8007b94 <__any_on+0x30>

08007ba6 <_calloc_r>:
 8007ba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ba8:	fba1 2402 	umull	r2, r4, r1, r2
 8007bac:	b94c      	cbnz	r4, 8007bc2 <_calloc_r+0x1c>
 8007bae:	4611      	mov	r1, r2
 8007bb0:	9201      	str	r2, [sp, #4]
 8007bb2:	f000 f87b 	bl	8007cac <_malloc_r>
 8007bb6:	9a01      	ldr	r2, [sp, #4]
 8007bb8:	4605      	mov	r5, r0
 8007bba:	b930      	cbnz	r0, 8007bca <_calloc_r+0x24>
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	b003      	add	sp, #12
 8007bc0:	bd30      	pop	{r4, r5, pc}
 8007bc2:	220c      	movs	r2, #12
 8007bc4:	6002      	str	r2, [r0, #0]
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	e7f8      	b.n	8007bbc <_calloc_r+0x16>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	f7fc fd4a 	bl	8004664 <memset>
 8007bd0:	e7f4      	b.n	8007bbc <_calloc_r+0x16>
	...

08007bd4 <_free_r>:
 8007bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	d044      	beq.n	8007c64 <_free_r+0x90>
 8007bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bde:	9001      	str	r0, [sp, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f1a1 0404 	sub.w	r4, r1, #4
 8007be6:	bfb8      	it	lt
 8007be8:	18e4      	addlt	r4, r4, r3
 8007bea:	f000 fd3f 	bl	800866c <__malloc_lock>
 8007bee:	4a1e      	ldr	r2, [pc, #120]	; (8007c68 <_free_r+0x94>)
 8007bf0:	9801      	ldr	r0, [sp, #4]
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	b933      	cbnz	r3, 8007c04 <_free_r+0x30>
 8007bf6:	6063      	str	r3, [r4, #4]
 8007bf8:	6014      	str	r4, [r2, #0]
 8007bfa:	b003      	add	sp, #12
 8007bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c00:	f000 bd3a 	b.w	8008678 <__malloc_unlock>
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	d908      	bls.n	8007c1a <_free_r+0x46>
 8007c08:	6825      	ldr	r5, [r4, #0]
 8007c0a:	1961      	adds	r1, r4, r5
 8007c0c:	428b      	cmp	r3, r1
 8007c0e:	bf01      	itttt	eq
 8007c10:	6819      	ldreq	r1, [r3, #0]
 8007c12:	685b      	ldreq	r3, [r3, #4]
 8007c14:	1949      	addeq	r1, r1, r5
 8007c16:	6021      	streq	r1, [r4, #0]
 8007c18:	e7ed      	b.n	8007bf6 <_free_r+0x22>
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	b10b      	cbz	r3, 8007c24 <_free_r+0x50>
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	d9fa      	bls.n	8007c1a <_free_r+0x46>
 8007c24:	6811      	ldr	r1, [r2, #0]
 8007c26:	1855      	adds	r5, r2, r1
 8007c28:	42a5      	cmp	r5, r4
 8007c2a:	d10b      	bne.n	8007c44 <_free_r+0x70>
 8007c2c:	6824      	ldr	r4, [r4, #0]
 8007c2e:	4421      	add	r1, r4
 8007c30:	1854      	adds	r4, r2, r1
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	6011      	str	r1, [r2, #0]
 8007c36:	d1e0      	bne.n	8007bfa <_free_r+0x26>
 8007c38:	681c      	ldr	r4, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	6053      	str	r3, [r2, #4]
 8007c3e:	4421      	add	r1, r4
 8007c40:	6011      	str	r1, [r2, #0]
 8007c42:	e7da      	b.n	8007bfa <_free_r+0x26>
 8007c44:	d902      	bls.n	8007c4c <_free_r+0x78>
 8007c46:	230c      	movs	r3, #12
 8007c48:	6003      	str	r3, [r0, #0]
 8007c4a:	e7d6      	b.n	8007bfa <_free_r+0x26>
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	1961      	adds	r1, r4, r5
 8007c50:	428b      	cmp	r3, r1
 8007c52:	bf04      	itt	eq
 8007c54:	6819      	ldreq	r1, [r3, #0]
 8007c56:	685b      	ldreq	r3, [r3, #4]
 8007c58:	6063      	str	r3, [r4, #4]
 8007c5a:	bf04      	itt	eq
 8007c5c:	1949      	addeq	r1, r1, r5
 8007c5e:	6021      	streq	r1, [r4, #0]
 8007c60:	6054      	str	r4, [r2, #4]
 8007c62:	e7ca      	b.n	8007bfa <_free_r+0x26>
 8007c64:	b003      	add	sp, #12
 8007c66:	bd30      	pop	{r4, r5, pc}
 8007c68:	20000310 	.word	0x20000310

08007c6c <sbrk_aligned>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	4e0e      	ldr	r6, [pc, #56]	; (8007ca8 <sbrk_aligned+0x3c>)
 8007c70:	460c      	mov	r4, r1
 8007c72:	6831      	ldr	r1, [r6, #0]
 8007c74:	4605      	mov	r5, r0
 8007c76:	b911      	cbnz	r1, 8007c7e <sbrk_aligned+0x12>
 8007c78:	f000 fa36 	bl	80080e8 <_sbrk_r>
 8007c7c:	6030      	str	r0, [r6, #0]
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 fa31 	bl	80080e8 <_sbrk_r>
 8007c86:	1c43      	adds	r3, r0, #1
 8007c88:	d00a      	beq.n	8007ca0 <sbrk_aligned+0x34>
 8007c8a:	1cc4      	adds	r4, r0, #3
 8007c8c:	f024 0403 	bic.w	r4, r4, #3
 8007c90:	42a0      	cmp	r0, r4
 8007c92:	d007      	beq.n	8007ca4 <sbrk_aligned+0x38>
 8007c94:	1a21      	subs	r1, r4, r0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fa26 	bl	80080e8 <_sbrk_r>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d101      	bne.n	8007ca4 <sbrk_aligned+0x38>
 8007ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
 8007ca8:	20000314 	.word	0x20000314

08007cac <_malloc_r>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	1ccd      	adds	r5, r1, #3
 8007cb2:	f025 0503 	bic.w	r5, r5, #3
 8007cb6:	3508      	adds	r5, #8
 8007cb8:	2d0c      	cmp	r5, #12
 8007cba:	bf38      	it	cc
 8007cbc:	250c      	movcc	r5, #12
 8007cbe:	2d00      	cmp	r5, #0
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	db01      	blt.n	8007cc8 <_malloc_r+0x1c>
 8007cc4:	42a9      	cmp	r1, r5
 8007cc6:	d905      	bls.n	8007cd4 <_malloc_r+0x28>
 8007cc8:	230c      	movs	r3, #12
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	2600      	movs	r6, #0
 8007cce:	4630      	mov	r0, r6
 8007cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd4:	4e2e      	ldr	r6, [pc, #184]	; (8007d90 <_malloc_r+0xe4>)
 8007cd6:	f000 fcc9 	bl	800866c <__malloc_lock>
 8007cda:	6833      	ldr	r3, [r6, #0]
 8007cdc:	461c      	mov	r4, r3
 8007cde:	bb34      	cbnz	r4, 8007d2e <_malloc_r+0x82>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f7ff ffc2 	bl	8007c6c <sbrk_aligned>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	4604      	mov	r4, r0
 8007cec:	d14d      	bne.n	8007d8a <_malloc_r+0xde>
 8007cee:	6834      	ldr	r4, [r6, #0]
 8007cf0:	4626      	mov	r6, r4
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	d140      	bne.n	8007d78 <_malloc_r+0xcc>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	eb04 0803 	add.w	r8, r4, r3
 8007d00:	f000 f9f2 	bl	80080e8 <_sbrk_r>
 8007d04:	4580      	cmp	r8, r0
 8007d06:	d13a      	bne.n	8007d7e <_malloc_r+0xd2>
 8007d08:	6821      	ldr	r1, [r4, #0]
 8007d0a:	3503      	adds	r5, #3
 8007d0c:	1a6d      	subs	r5, r5, r1
 8007d0e:	f025 0503 	bic.w	r5, r5, #3
 8007d12:	3508      	adds	r5, #8
 8007d14:	2d0c      	cmp	r5, #12
 8007d16:	bf38      	it	cc
 8007d18:	250c      	movcc	r5, #12
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7ff ffa5 	bl	8007c6c <sbrk_aligned>
 8007d22:	3001      	adds	r0, #1
 8007d24:	d02b      	beq.n	8007d7e <_malloc_r+0xd2>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	442b      	add	r3, r5
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	e00e      	b.n	8007d4c <_malloc_r+0xa0>
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	1b52      	subs	r2, r2, r5
 8007d32:	d41e      	bmi.n	8007d72 <_malloc_r+0xc6>
 8007d34:	2a0b      	cmp	r2, #11
 8007d36:	d916      	bls.n	8007d66 <_malloc_r+0xba>
 8007d38:	1961      	adds	r1, r4, r5
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	6025      	str	r5, [r4, #0]
 8007d3e:	bf18      	it	ne
 8007d40:	6059      	strne	r1, [r3, #4]
 8007d42:	6863      	ldr	r3, [r4, #4]
 8007d44:	bf08      	it	eq
 8007d46:	6031      	streq	r1, [r6, #0]
 8007d48:	5162      	str	r2, [r4, r5]
 8007d4a:	604b      	str	r3, [r1, #4]
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f104 060b 	add.w	r6, r4, #11
 8007d52:	f000 fc91 	bl	8008678 <__malloc_unlock>
 8007d56:	f026 0607 	bic.w	r6, r6, #7
 8007d5a:	1d23      	adds	r3, r4, #4
 8007d5c:	1af2      	subs	r2, r6, r3
 8007d5e:	d0b6      	beq.n	8007cce <_malloc_r+0x22>
 8007d60:	1b9b      	subs	r3, r3, r6
 8007d62:	50a3      	str	r3, [r4, r2]
 8007d64:	e7b3      	b.n	8007cce <_malloc_r+0x22>
 8007d66:	6862      	ldr	r2, [r4, #4]
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	bf0c      	ite	eq
 8007d6c:	6032      	streq	r2, [r6, #0]
 8007d6e:	605a      	strne	r2, [r3, #4]
 8007d70:	e7ec      	b.n	8007d4c <_malloc_r+0xa0>
 8007d72:	4623      	mov	r3, r4
 8007d74:	6864      	ldr	r4, [r4, #4]
 8007d76:	e7b2      	b.n	8007cde <_malloc_r+0x32>
 8007d78:	4634      	mov	r4, r6
 8007d7a:	6876      	ldr	r6, [r6, #4]
 8007d7c:	e7b9      	b.n	8007cf2 <_malloc_r+0x46>
 8007d7e:	230c      	movs	r3, #12
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	4638      	mov	r0, r7
 8007d84:	f000 fc78 	bl	8008678 <__malloc_unlock>
 8007d88:	e7a1      	b.n	8007cce <_malloc_r+0x22>
 8007d8a:	6025      	str	r5, [r4, #0]
 8007d8c:	e7de      	b.n	8007d4c <_malloc_r+0xa0>
 8007d8e:	bf00      	nop
 8007d90:	20000310 	.word	0x20000310

08007d94 <__sfputc_r>:
 8007d94:	6893      	ldr	r3, [r2, #8]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	b410      	push	{r4}
 8007d9c:	6093      	str	r3, [r2, #8]
 8007d9e:	da08      	bge.n	8007db2 <__sfputc_r+0x1e>
 8007da0:	6994      	ldr	r4, [r2, #24]
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	db01      	blt.n	8007daa <__sfputc_r+0x16>
 8007da6:	290a      	cmp	r1, #10
 8007da8:	d103      	bne.n	8007db2 <__sfputc_r+0x1e>
 8007daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dae:	f000 ba03 	b.w	80081b8 <__swbuf_r>
 8007db2:	6813      	ldr	r3, [r2, #0]
 8007db4:	1c58      	adds	r0, r3, #1
 8007db6:	6010      	str	r0, [r2, #0]
 8007db8:	7019      	strb	r1, [r3, #0]
 8007dba:	4608      	mov	r0, r1
 8007dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <__sfputs_r>:
 8007dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	4614      	mov	r4, r2
 8007dca:	18d5      	adds	r5, r2, r3
 8007dcc:	42ac      	cmp	r4, r5
 8007dce:	d101      	bne.n	8007dd4 <__sfputs_r+0x12>
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e007      	b.n	8007de4 <__sfputs_r+0x22>
 8007dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f7ff ffda 	bl	8007d94 <__sfputc_r>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d1f3      	bne.n	8007dcc <__sfputs_r+0xa>
 8007de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007de8 <_vfiprintf_r>:
 8007de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	460d      	mov	r5, r1
 8007dee:	b09d      	sub	sp, #116	; 0x74
 8007df0:	4614      	mov	r4, r2
 8007df2:	4698      	mov	r8, r3
 8007df4:	4606      	mov	r6, r0
 8007df6:	b118      	cbz	r0, 8007e00 <_vfiprintf_r+0x18>
 8007df8:	6983      	ldr	r3, [r0, #24]
 8007dfa:	b90b      	cbnz	r3, 8007e00 <_vfiprintf_r+0x18>
 8007dfc:	f7fe fdd6 	bl	80069ac <__sinit>
 8007e00:	4b89      	ldr	r3, [pc, #548]	; (8008028 <_vfiprintf_r+0x240>)
 8007e02:	429d      	cmp	r5, r3
 8007e04:	d11b      	bne.n	8007e3e <_vfiprintf_r+0x56>
 8007e06:	6875      	ldr	r5, [r6, #4]
 8007e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e0a:	07d9      	lsls	r1, r3, #31
 8007e0c:	d405      	bmi.n	8007e1a <_vfiprintf_r+0x32>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	059a      	lsls	r2, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_vfiprintf_r+0x32>
 8007e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e16:	f7ff f9da 	bl	80071ce <__retarget_lock_acquire_recursive>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	071b      	lsls	r3, r3, #28
 8007e1e:	d501      	bpl.n	8007e24 <_vfiprintf_r+0x3c>
 8007e20:	692b      	ldr	r3, [r5, #16]
 8007e22:	b9eb      	cbnz	r3, 8007e60 <_vfiprintf_r+0x78>
 8007e24:	4629      	mov	r1, r5
 8007e26:	4630      	mov	r0, r6
 8007e28:	f000 fa38 	bl	800829c <__swsetup_r>
 8007e2c:	b1c0      	cbz	r0, 8007e60 <_vfiprintf_r+0x78>
 8007e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e30:	07dc      	lsls	r4, r3, #31
 8007e32:	d50e      	bpl.n	8007e52 <_vfiprintf_r+0x6a>
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	b01d      	add	sp, #116	; 0x74
 8007e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3e:	4b7b      	ldr	r3, [pc, #492]	; (800802c <_vfiprintf_r+0x244>)
 8007e40:	429d      	cmp	r5, r3
 8007e42:	d101      	bne.n	8007e48 <_vfiprintf_r+0x60>
 8007e44:	68b5      	ldr	r5, [r6, #8]
 8007e46:	e7df      	b.n	8007e08 <_vfiprintf_r+0x20>
 8007e48:	4b79      	ldr	r3, [pc, #484]	; (8008030 <_vfiprintf_r+0x248>)
 8007e4a:	429d      	cmp	r5, r3
 8007e4c:	bf08      	it	eq
 8007e4e:	68f5      	ldreq	r5, [r6, #12]
 8007e50:	e7da      	b.n	8007e08 <_vfiprintf_r+0x20>
 8007e52:	89ab      	ldrh	r3, [r5, #12]
 8007e54:	0598      	lsls	r0, r3, #22
 8007e56:	d4ed      	bmi.n	8007e34 <_vfiprintf_r+0x4c>
 8007e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e5a:	f7ff f9b9 	bl	80071d0 <__retarget_lock_release_recursive>
 8007e5e:	e7e9      	b.n	8007e34 <_vfiprintf_r+0x4c>
 8007e60:	2300      	movs	r3, #0
 8007e62:	9309      	str	r3, [sp, #36]	; 0x24
 8007e64:	2320      	movs	r3, #32
 8007e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6e:	2330      	movs	r3, #48	; 0x30
 8007e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008034 <_vfiprintf_r+0x24c>
 8007e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e78:	f04f 0901 	mov.w	r9, #1
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	469a      	mov	sl, r3
 8007e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e84:	b10a      	cbz	r2, 8007e8a <_vfiprintf_r+0xa2>
 8007e86:	2a25      	cmp	r2, #37	; 0x25
 8007e88:	d1f9      	bne.n	8007e7e <_vfiprintf_r+0x96>
 8007e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e8e:	d00b      	beq.n	8007ea8 <_vfiprintf_r+0xc0>
 8007e90:	465b      	mov	r3, fp
 8007e92:	4622      	mov	r2, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ff93 	bl	8007dc2 <__sfputs_r>
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f000 80aa 	beq.w	8007ff6 <_vfiprintf_r+0x20e>
 8007ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea4:	445a      	add	r2, fp
 8007ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80a2 	beq.w	8007ff6 <_vfiprintf_r+0x20e>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ebc:	f10a 0a01 	add.w	sl, sl, #1
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	9307      	str	r3, [sp, #28]
 8007ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8007eca:	4654      	mov	r4, sl
 8007ecc:	2205      	movs	r2, #5
 8007ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed2:	4858      	ldr	r0, [pc, #352]	; (8008034 <_vfiprintf_r+0x24c>)
 8007ed4:	f7f8 f994 	bl	8000200 <memchr>
 8007ed8:	9a04      	ldr	r2, [sp, #16]
 8007eda:	b9d8      	cbnz	r0, 8007f14 <_vfiprintf_r+0x12c>
 8007edc:	06d1      	lsls	r1, r2, #27
 8007ede:	bf44      	itt	mi
 8007ee0:	2320      	movmi	r3, #32
 8007ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee6:	0713      	lsls	r3, r2, #28
 8007ee8:	bf44      	itt	mi
 8007eea:	232b      	movmi	r3, #43	; 0x2b
 8007eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef6:	d015      	beq.n	8007f24 <_vfiprintf_r+0x13c>
 8007ef8:	9a07      	ldr	r2, [sp, #28]
 8007efa:	4654      	mov	r4, sl
 8007efc:	2000      	movs	r0, #0
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4621      	mov	r1, r4
 8007f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f08:	3b30      	subs	r3, #48	; 0x30
 8007f0a:	2b09      	cmp	r3, #9
 8007f0c:	d94e      	bls.n	8007fac <_vfiprintf_r+0x1c4>
 8007f0e:	b1b0      	cbz	r0, 8007f3e <_vfiprintf_r+0x156>
 8007f10:	9207      	str	r2, [sp, #28]
 8007f12:	e014      	b.n	8007f3e <_vfiprintf_r+0x156>
 8007f14:	eba0 0308 	sub.w	r3, r0, r8
 8007f18:	fa09 f303 	lsl.w	r3, r9, r3
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	46a2      	mov	sl, r4
 8007f22:	e7d2      	b.n	8007eca <_vfiprintf_r+0xe2>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	1d19      	adds	r1, r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	9103      	str	r1, [sp, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bfbb      	ittet	lt
 8007f30:	425b      	neglt	r3, r3
 8007f32:	f042 0202 	orrlt.w	r2, r2, #2
 8007f36:	9307      	strge	r3, [sp, #28]
 8007f38:	9307      	strlt	r3, [sp, #28]
 8007f3a:	bfb8      	it	lt
 8007f3c:	9204      	strlt	r2, [sp, #16]
 8007f3e:	7823      	ldrb	r3, [r4, #0]
 8007f40:	2b2e      	cmp	r3, #46	; 0x2e
 8007f42:	d10c      	bne.n	8007f5e <_vfiprintf_r+0x176>
 8007f44:	7863      	ldrb	r3, [r4, #1]
 8007f46:	2b2a      	cmp	r3, #42	; 0x2a
 8007f48:	d135      	bne.n	8007fb6 <_vfiprintf_r+0x1ce>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	1d1a      	adds	r2, r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	9203      	str	r2, [sp, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	bfb8      	it	lt
 8007f56:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f5a:	3402      	adds	r4, #2
 8007f5c:	9305      	str	r3, [sp, #20]
 8007f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008044 <_vfiprintf_r+0x25c>
 8007f62:	7821      	ldrb	r1, [r4, #0]
 8007f64:	2203      	movs	r2, #3
 8007f66:	4650      	mov	r0, sl
 8007f68:	f7f8 f94a 	bl	8000200 <memchr>
 8007f6c:	b140      	cbz	r0, 8007f80 <_vfiprintf_r+0x198>
 8007f6e:	2340      	movs	r3, #64	; 0x40
 8007f70:	eba0 000a 	sub.w	r0, r0, sl
 8007f74:	fa03 f000 	lsl.w	r0, r3, r0
 8007f78:	9b04      	ldr	r3, [sp, #16]
 8007f7a:	4303      	orrs	r3, r0
 8007f7c:	3401      	adds	r4, #1
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f84:	482c      	ldr	r0, [pc, #176]	; (8008038 <_vfiprintf_r+0x250>)
 8007f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f8a:	2206      	movs	r2, #6
 8007f8c:	f7f8 f938 	bl	8000200 <memchr>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d03f      	beq.n	8008014 <_vfiprintf_r+0x22c>
 8007f94:	4b29      	ldr	r3, [pc, #164]	; (800803c <_vfiprintf_r+0x254>)
 8007f96:	bb1b      	cbnz	r3, 8007fe0 <_vfiprintf_r+0x1f8>
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	3307      	adds	r3, #7
 8007f9c:	f023 0307 	bic.w	r3, r3, #7
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	9303      	str	r3, [sp, #12]
 8007fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa6:	443b      	add	r3, r7
 8007fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8007faa:	e767      	b.n	8007e7c <_vfiprintf_r+0x94>
 8007fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	e7a5      	b.n	8007f02 <_vfiprintf_r+0x11a>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f04f 0c0a 	mov.w	ip, #10
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc8:	3a30      	subs	r2, #48	; 0x30
 8007fca:	2a09      	cmp	r2, #9
 8007fcc:	d903      	bls.n	8007fd6 <_vfiprintf_r+0x1ee>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0c5      	beq.n	8007f5e <_vfiprintf_r+0x176>
 8007fd2:	9105      	str	r1, [sp, #20]
 8007fd4:	e7c3      	b.n	8007f5e <_vfiprintf_r+0x176>
 8007fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fda:	4604      	mov	r4, r0
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e7f0      	b.n	8007fc2 <_vfiprintf_r+0x1da>
 8007fe0:	ab03      	add	r3, sp, #12
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	4b16      	ldr	r3, [pc, #88]	; (8008040 <_vfiprintf_r+0x258>)
 8007fe8:	a904      	add	r1, sp, #16
 8007fea:	4630      	mov	r0, r6
 8007fec:	f7fc fbe2 	bl	80047b4 <_printf_float>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	1c78      	adds	r0, r7, #1
 8007ff4:	d1d6      	bne.n	8007fa4 <_vfiprintf_r+0x1bc>
 8007ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ff8:	07d9      	lsls	r1, r3, #31
 8007ffa:	d405      	bmi.n	8008008 <_vfiprintf_r+0x220>
 8007ffc:	89ab      	ldrh	r3, [r5, #12]
 8007ffe:	059a      	lsls	r2, r3, #22
 8008000:	d402      	bmi.n	8008008 <_vfiprintf_r+0x220>
 8008002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008004:	f7ff f8e4 	bl	80071d0 <__retarget_lock_release_recursive>
 8008008:	89ab      	ldrh	r3, [r5, #12]
 800800a:	065b      	lsls	r3, r3, #25
 800800c:	f53f af12 	bmi.w	8007e34 <_vfiprintf_r+0x4c>
 8008010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008012:	e711      	b.n	8007e38 <_vfiprintf_r+0x50>
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	462a      	mov	r2, r5
 800801a:	4b09      	ldr	r3, [pc, #36]	; (8008040 <_vfiprintf_r+0x258>)
 800801c:	a904      	add	r1, sp, #16
 800801e:	4630      	mov	r0, r6
 8008020:	f7fc fe6c 	bl	8004cfc <_printf_i>
 8008024:	e7e4      	b.n	8007ff0 <_vfiprintf_r+0x208>
 8008026:	bf00      	nop
 8008028:	08008a30 	.word	0x08008a30
 800802c:	08008a50 	.word	0x08008a50
 8008030:	08008a10 	.word	0x08008a10
 8008034:	08008c44 	.word	0x08008c44
 8008038:	08008c4e 	.word	0x08008c4e
 800803c:	080047b5 	.word	0x080047b5
 8008040:	08007dc3 	.word	0x08007dc3
 8008044:	08008c4a 	.word	0x08008c4a

08008048 <_putc_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	460d      	mov	r5, r1
 800804c:	4614      	mov	r4, r2
 800804e:	4606      	mov	r6, r0
 8008050:	b118      	cbz	r0, 800805a <_putc_r+0x12>
 8008052:	6983      	ldr	r3, [r0, #24]
 8008054:	b90b      	cbnz	r3, 800805a <_putc_r+0x12>
 8008056:	f7fe fca9 	bl	80069ac <__sinit>
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <_putc_r+0x84>)
 800805c:	429c      	cmp	r4, r3
 800805e:	d124      	bne.n	80080aa <_putc_r+0x62>
 8008060:	6874      	ldr	r4, [r6, #4]
 8008062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008064:	07d8      	lsls	r0, r3, #31
 8008066:	d405      	bmi.n	8008074 <_putc_r+0x2c>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	0599      	lsls	r1, r3, #22
 800806c:	d402      	bmi.n	8008074 <_putc_r+0x2c>
 800806e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008070:	f7ff f8ad 	bl	80071ce <__retarget_lock_acquire_recursive>
 8008074:	68a3      	ldr	r3, [r4, #8]
 8008076:	3b01      	subs	r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	da05      	bge.n	800808a <_putc_r+0x42>
 800807e:	69a2      	ldr	r2, [r4, #24]
 8008080:	4293      	cmp	r3, r2
 8008082:	db1c      	blt.n	80080be <_putc_r+0x76>
 8008084:	b2eb      	uxtb	r3, r5
 8008086:	2b0a      	cmp	r3, #10
 8008088:	d019      	beq.n	80080be <_putc_r+0x76>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	701d      	strb	r5, [r3, #0]
 8008092:	b2ed      	uxtb	r5, r5
 8008094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008096:	07da      	lsls	r2, r3, #31
 8008098:	d405      	bmi.n	80080a6 <_putc_r+0x5e>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	059b      	lsls	r3, r3, #22
 800809e:	d402      	bmi.n	80080a6 <_putc_r+0x5e>
 80080a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a2:	f7ff f895 	bl	80071d0 <__retarget_lock_release_recursive>
 80080a6:	4628      	mov	r0, r5
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <_putc_r+0x88>)
 80080ac:	429c      	cmp	r4, r3
 80080ae:	d101      	bne.n	80080b4 <_putc_r+0x6c>
 80080b0:	68b4      	ldr	r4, [r6, #8]
 80080b2:	e7d6      	b.n	8008062 <_putc_r+0x1a>
 80080b4:	4b07      	ldr	r3, [pc, #28]	; (80080d4 <_putc_r+0x8c>)
 80080b6:	429c      	cmp	r4, r3
 80080b8:	bf08      	it	eq
 80080ba:	68f4      	ldreq	r4, [r6, #12]
 80080bc:	e7d1      	b.n	8008062 <_putc_r+0x1a>
 80080be:	4629      	mov	r1, r5
 80080c0:	4622      	mov	r2, r4
 80080c2:	4630      	mov	r0, r6
 80080c4:	f000 f878 	bl	80081b8 <__swbuf_r>
 80080c8:	4605      	mov	r5, r0
 80080ca:	e7e3      	b.n	8008094 <_putc_r+0x4c>
 80080cc:	08008a30 	.word	0x08008a30
 80080d0:	08008a50 	.word	0x08008a50
 80080d4:	08008a10 	.word	0x08008a10

080080d8 <nan>:
 80080d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80080e0 <nan+0x8>
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	00000000 	.word	0x00000000
 80080e4:	7ff80000 	.word	0x7ff80000

080080e8 <_sbrk_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	; (8008104 <_sbrk_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7f9 fbce 	bl	8001894 <_sbrk>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_sbrk_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_sbrk_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20000318 	.word	0x20000318

08008108 <__sread>:
 8008108:	b510      	push	{r4, lr}
 800810a:	460c      	mov	r4, r1
 800810c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008110:	f000 fab8 	bl	8008684 <_read_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	bfab      	itete	ge
 8008118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800811a:	89a3      	ldrhlt	r3, [r4, #12]
 800811c:	181b      	addge	r3, r3, r0
 800811e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008122:	bfac      	ite	ge
 8008124:	6563      	strge	r3, [r4, #84]	; 0x54
 8008126:	81a3      	strhlt	r3, [r4, #12]
 8008128:	bd10      	pop	{r4, pc}

0800812a <__swrite>:
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	461f      	mov	r7, r3
 8008130:	898b      	ldrh	r3, [r1, #12]
 8008132:	05db      	lsls	r3, r3, #23
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	4616      	mov	r6, r2
 800813a:	d505      	bpl.n	8008148 <__swrite+0x1e>
 800813c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008140:	2302      	movs	r3, #2
 8008142:	2200      	movs	r2, #0
 8008144:	f000 fa1a 	bl	800857c <_lseek_r>
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800814e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008152:	81a3      	strh	r3, [r4, #12]
 8008154:	4632      	mov	r2, r6
 8008156:	463b      	mov	r3, r7
 8008158:	4628      	mov	r0, r5
 800815a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	f000 b88b 	b.w	8008278 <_write_r>

08008162 <__sseek>:
 8008162:	b510      	push	{r4, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816a:	f000 fa07 	bl	800857c <_lseek_r>
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	bf15      	itete	ne
 8008174:	6560      	strne	r0, [r4, #84]	; 0x54
 8008176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800817a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800817e:	81a3      	strheq	r3, [r4, #12]
 8008180:	bf18      	it	ne
 8008182:	81a3      	strhne	r3, [r4, #12]
 8008184:	bd10      	pop	{r4, pc}

08008186 <__sclose>:
 8008186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818a:	f000 b913 	b.w	80083b4 <_close_r>

0800818e <strncmp>:
 800818e:	b510      	push	{r4, lr}
 8008190:	b17a      	cbz	r2, 80081b2 <strncmp+0x24>
 8008192:	4603      	mov	r3, r0
 8008194:	3901      	subs	r1, #1
 8008196:	1884      	adds	r4, r0, r2
 8008198:	f813 0b01 	ldrb.w	r0, [r3], #1
 800819c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80081a0:	4290      	cmp	r0, r2
 80081a2:	d101      	bne.n	80081a8 <strncmp+0x1a>
 80081a4:	42a3      	cmp	r3, r4
 80081a6:	d101      	bne.n	80081ac <strncmp+0x1e>
 80081a8:	1a80      	subs	r0, r0, r2
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1f3      	bne.n	8008198 <strncmp+0xa>
 80081b0:	e7fa      	b.n	80081a8 <strncmp+0x1a>
 80081b2:	4610      	mov	r0, r2
 80081b4:	e7f9      	b.n	80081aa <strncmp+0x1c>
	...

080081b8 <__swbuf_r>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	460e      	mov	r6, r1
 80081bc:	4614      	mov	r4, r2
 80081be:	4605      	mov	r5, r0
 80081c0:	b118      	cbz	r0, 80081ca <__swbuf_r+0x12>
 80081c2:	6983      	ldr	r3, [r0, #24]
 80081c4:	b90b      	cbnz	r3, 80081ca <__swbuf_r+0x12>
 80081c6:	f7fe fbf1 	bl	80069ac <__sinit>
 80081ca:	4b21      	ldr	r3, [pc, #132]	; (8008250 <__swbuf_r+0x98>)
 80081cc:	429c      	cmp	r4, r3
 80081ce:	d12b      	bne.n	8008228 <__swbuf_r+0x70>
 80081d0:	686c      	ldr	r4, [r5, #4]
 80081d2:	69a3      	ldr	r3, [r4, #24]
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	071a      	lsls	r2, r3, #28
 80081da:	d52f      	bpl.n	800823c <__swbuf_r+0x84>
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	b36b      	cbz	r3, 800823c <__swbuf_r+0x84>
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	1ac0      	subs	r0, r0, r3
 80081e6:	6963      	ldr	r3, [r4, #20]
 80081e8:	b2f6      	uxtb	r6, r6
 80081ea:	4283      	cmp	r3, r0
 80081ec:	4637      	mov	r7, r6
 80081ee:	dc04      	bgt.n	80081fa <__swbuf_r+0x42>
 80081f0:	4621      	mov	r1, r4
 80081f2:	4628      	mov	r0, r5
 80081f4:	f000 f974 	bl	80084e0 <_fflush_r>
 80081f8:	bb30      	cbnz	r0, 8008248 <__swbuf_r+0x90>
 80081fa:	68a3      	ldr	r3, [r4, #8]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	60a3      	str	r3, [r4, #8]
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	6022      	str	r2, [r4, #0]
 8008206:	701e      	strb	r6, [r3, #0]
 8008208:	6963      	ldr	r3, [r4, #20]
 800820a:	3001      	adds	r0, #1
 800820c:	4283      	cmp	r3, r0
 800820e:	d004      	beq.n	800821a <__swbuf_r+0x62>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	07db      	lsls	r3, r3, #31
 8008214:	d506      	bpl.n	8008224 <__swbuf_r+0x6c>
 8008216:	2e0a      	cmp	r6, #10
 8008218:	d104      	bne.n	8008224 <__swbuf_r+0x6c>
 800821a:	4621      	mov	r1, r4
 800821c:	4628      	mov	r0, r5
 800821e:	f000 f95f 	bl	80084e0 <_fflush_r>
 8008222:	b988      	cbnz	r0, 8008248 <__swbuf_r+0x90>
 8008224:	4638      	mov	r0, r7
 8008226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <__swbuf_r+0x9c>)
 800822a:	429c      	cmp	r4, r3
 800822c:	d101      	bne.n	8008232 <__swbuf_r+0x7a>
 800822e:	68ac      	ldr	r4, [r5, #8]
 8008230:	e7cf      	b.n	80081d2 <__swbuf_r+0x1a>
 8008232:	4b09      	ldr	r3, [pc, #36]	; (8008258 <__swbuf_r+0xa0>)
 8008234:	429c      	cmp	r4, r3
 8008236:	bf08      	it	eq
 8008238:	68ec      	ldreq	r4, [r5, #12]
 800823a:	e7ca      	b.n	80081d2 <__swbuf_r+0x1a>
 800823c:	4621      	mov	r1, r4
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f82c 	bl	800829c <__swsetup_r>
 8008244:	2800      	cmp	r0, #0
 8008246:	d0cb      	beq.n	80081e0 <__swbuf_r+0x28>
 8008248:	f04f 37ff 	mov.w	r7, #4294967295
 800824c:	e7ea      	b.n	8008224 <__swbuf_r+0x6c>
 800824e:	bf00      	nop
 8008250:	08008a30 	.word	0x08008a30
 8008254:	08008a50 	.word	0x08008a50
 8008258:	08008a10 	.word	0x08008a10

0800825c <__ascii_wctomb>:
 800825c:	b149      	cbz	r1, 8008272 <__ascii_wctomb+0x16>
 800825e:	2aff      	cmp	r2, #255	; 0xff
 8008260:	bf85      	ittet	hi
 8008262:	238a      	movhi	r3, #138	; 0x8a
 8008264:	6003      	strhi	r3, [r0, #0]
 8008266:	700a      	strbls	r2, [r1, #0]
 8008268:	f04f 30ff 	movhi.w	r0, #4294967295
 800826c:	bf98      	it	ls
 800826e:	2001      	movls	r0, #1
 8008270:	4770      	bx	lr
 8008272:	4608      	mov	r0, r1
 8008274:	4770      	bx	lr
	...

08008278 <_write_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d07      	ldr	r5, [pc, #28]	; (8008298 <_write_r+0x20>)
 800827c:	4604      	mov	r4, r0
 800827e:	4608      	mov	r0, r1
 8008280:	4611      	mov	r1, r2
 8008282:	2200      	movs	r2, #0
 8008284:	602a      	str	r2, [r5, #0]
 8008286:	461a      	mov	r2, r3
 8008288:	f7f9 fab3 	bl	80017f2 <_write>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_write_r+0x1e>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b103      	cbz	r3, 8008296 <_write_r+0x1e>
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	20000318 	.word	0x20000318

0800829c <__swsetup_r>:
 800829c:	4b32      	ldr	r3, [pc, #200]	; (8008368 <__swsetup_r+0xcc>)
 800829e:	b570      	push	{r4, r5, r6, lr}
 80082a0:	681d      	ldr	r5, [r3, #0]
 80082a2:	4606      	mov	r6, r0
 80082a4:	460c      	mov	r4, r1
 80082a6:	b125      	cbz	r5, 80082b2 <__swsetup_r+0x16>
 80082a8:	69ab      	ldr	r3, [r5, #24]
 80082aa:	b913      	cbnz	r3, 80082b2 <__swsetup_r+0x16>
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7fe fb7d 	bl	80069ac <__sinit>
 80082b2:	4b2e      	ldr	r3, [pc, #184]	; (800836c <__swsetup_r+0xd0>)
 80082b4:	429c      	cmp	r4, r3
 80082b6:	d10f      	bne.n	80082d8 <__swsetup_r+0x3c>
 80082b8:	686c      	ldr	r4, [r5, #4]
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c0:	0719      	lsls	r1, r3, #28
 80082c2:	d42c      	bmi.n	800831e <__swsetup_r+0x82>
 80082c4:	06dd      	lsls	r5, r3, #27
 80082c6:	d411      	bmi.n	80082ec <__swsetup_r+0x50>
 80082c8:	2309      	movs	r3, #9
 80082ca:	6033      	str	r3, [r6, #0]
 80082cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	e03e      	b.n	8008356 <__swsetup_r+0xba>
 80082d8:	4b25      	ldr	r3, [pc, #148]	; (8008370 <__swsetup_r+0xd4>)
 80082da:	429c      	cmp	r4, r3
 80082dc:	d101      	bne.n	80082e2 <__swsetup_r+0x46>
 80082de:	68ac      	ldr	r4, [r5, #8]
 80082e0:	e7eb      	b.n	80082ba <__swsetup_r+0x1e>
 80082e2:	4b24      	ldr	r3, [pc, #144]	; (8008374 <__swsetup_r+0xd8>)
 80082e4:	429c      	cmp	r4, r3
 80082e6:	bf08      	it	eq
 80082e8:	68ec      	ldreq	r4, [r5, #12]
 80082ea:	e7e6      	b.n	80082ba <__swsetup_r+0x1e>
 80082ec:	0758      	lsls	r0, r3, #29
 80082ee:	d512      	bpl.n	8008316 <__swsetup_r+0x7a>
 80082f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082f2:	b141      	cbz	r1, 8008306 <__swsetup_r+0x6a>
 80082f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082f8:	4299      	cmp	r1, r3
 80082fa:	d002      	beq.n	8008302 <__swsetup_r+0x66>
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff fc69 	bl	8007bd4 <_free_r>
 8008302:	2300      	movs	r3, #0
 8008304:	6363      	str	r3, [r4, #52]	; 0x34
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	2300      	movs	r3, #0
 8008310:	6063      	str	r3, [r4, #4]
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f043 0308 	orr.w	r3, r3, #8
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	b94b      	cbnz	r3, 8008336 <__swsetup_r+0x9a>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800832c:	d003      	beq.n	8008336 <__swsetup_r+0x9a>
 800832e:	4621      	mov	r1, r4
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f95b 	bl	80085ec <__smakebuf_r>
 8008336:	89a0      	ldrh	r0, [r4, #12]
 8008338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800833c:	f010 0301 	ands.w	r3, r0, #1
 8008340:	d00a      	beq.n	8008358 <__swsetup_r+0xbc>
 8008342:	2300      	movs	r3, #0
 8008344:	60a3      	str	r3, [r4, #8]
 8008346:	6963      	ldr	r3, [r4, #20]
 8008348:	425b      	negs	r3, r3
 800834a:	61a3      	str	r3, [r4, #24]
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	b943      	cbnz	r3, 8008362 <__swsetup_r+0xc6>
 8008350:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008354:	d1ba      	bne.n	80082cc <__swsetup_r+0x30>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	0781      	lsls	r1, r0, #30
 800835a:	bf58      	it	pl
 800835c:	6963      	ldrpl	r3, [r4, #20]
 800835e:	60a3      	str	r3, [r4, #8]
 8008360:	e7f4      	b.n	800834c <__swsetup_r+0xb0>
 8008362:	2000      	movs	r0, #0
 8008364:	e7f7      	b.n	8008356 <__swsetup_r+0xba>
 8008366:	bf00      	nop
 8008368:	2000000c 	.word	0x2000000c
 800836c:	08008a30 	.word	0x08008a30
 8008370:	08008a50 	.word	0x08008a50
 8008374:	08008a10 	.word	0x08008a10

08008378 <__assert_func>:
 8008378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800837a:	4614      	mov	r4, r2
 800837c:	461a      	mov	r2, r3
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <__assert_func+0x2c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4605      	mov	r5, r0
 8008384:	68d8      	ldr	r0, [r3, #12]
 8008386:	b14c      	cbz	r4, 800839c <__assert_func+0x24>
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <__assert_func+0x30>)
 800838a:	9100      	str	r1, [sp, #0]
 800838c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008390:	4906      	ldr	r1, [pc, #24]	; (80083ac <__assert_func+0x34>)
 8008392:	462b      	mov	r3, r5
 8008394:	f000 f8e0 	bl	8008558 <fiprintf>
 8008398:	f000 f986 	bl	80086a8 <abort>
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <__assert_func+0x38>)
 800839e:	461c      	mov	r4, r3
 80083a0:	e7f3      	b.n	800838a <__assert_func+0x12>
 80083a2:	bf00      	nop
 80083a4:	2000000c 	.word	0x2000000c
 80083a8:	08008c55 	.word	0x08008c55
 80083ac:	08008c62 	.word	0x08008c62
 80083b0:	08008c90 	.word	0x08008c90

080083b4 <_close_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_close_r+0x1c>)
 80083b8:	2300      	movs	r3, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	602b      	str	r3, [r5, #0]
 80083c0:	f7f9 fa33 	bl	800182a <_close>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_close_r+0x1a>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_close_r+0x1a>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	20000318 	.word	0x20000318

080083d4 <__sflush_r>:
 80083d4:	898a      	ldrh	r2, [r1, #12]
 80083d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083da:	4605      	mov	r5, r0
 80083dc:	0710      	lsls	r0, r2, #28
 80083de:	460c      	mov	r4, r1
 80083e0:	d458      	bmi.n	8008494 <__sflush_r+0xc0>
 80083e2:	684b      	ldr	r3, [r1, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dc05      	bgt.n	80083f4 <__sflush_r+0x20>
 80083e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dc02      	bgt.n	80083f4 <__sflush_r+0x20>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083f6:	2e00      	cmp	r6, #0
 80083f8:	d0f9      	beq.n	80083ee <__sflush_r+0x1a>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008400:	682f      	ldr	r7, [r5, #0]
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	d032      	beq.n	800846c <__sflush_r+0x98>
 8008406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	075a      	lsls	r2, r3, #29
 800840c:	d505      	bpl.n	800841a <__sflush_r+0x46>
 800840e:	6863      	ldr	r3, [r4, #4]
 8008410:	1ac0      	subs	r0, r0, r3
 8008412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008414:	b10b      	cbz	r3, 800841a <__sflush_r+0x46>
 8008416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008418:	1ac0      	subs	r0, r0, r3
 800841a:	2300      	movs	r3, #0
 800841c:	4602      	mov	r2, r0
 800841e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008420:	6a21      	ldr	r1, [r4, #32]
 8008422:	4628      	mov	r0, r5
 8008424:	47b0      	blx	r6
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	d106      	bne.n	800843a <__sflush_r+0x66>
 800842c:	6829      	ldr	r1, [r5, #0]
 800842e:	291d      	cmp	r1, #29
 8008430:	d82c      	bhi.n	800848c <__sflush_r+0xb8>
 8008432:	4a2a      	ldr	r2, [pc, #168]	; (80084dc <__sflush_r+0x108>)
 8008434:	40ca      	lsrs	r2, r1
 8008436:	07d6      	lsls	r6, r2, #31
 8008438:	d528      	bpl.n	800848c <__sflush_r+0xb8>
 800843a:	2200      	movs	r2, #0
 800843c:	6062      	str	r2, [r4, #4]
 800843e:	04d9      	lsls	r1, r3, #19
 8008440:	6922      	ldr	r2, [r4, #16]
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	d504      	bpl.n	8008450 <__sflush_r+0x7c>
 8008446:	1c42      	adds	r2, r0, #1
 8008448:	d101      	bne.n	800844e <__sflush_r+0x7a>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	b903      	cbnz	r3, 8008450 <__sflush_r+0x7c>
 800844e:	6560      	str	r0, [r4, #84]	; 0x54
 8008450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008452:	602f      	str	r7, [r5, #0]
 8008454:	2900      	cmp	r1, #0
 8008456:	d0ca      	beq.n	80083ee <__sflush_r+0x1a>
 8008458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800845c:	4299      	cmp	r1, r3
 800845e:	d002      	beq.n	8008466 <__sflush_r+0x92>
 8008460:	4628      	mov	r0, r5
 8008462:	f7ff fbb7 	bl	8007bd4 <_free_r>
 8008466:	2000      	movs	r0, #0
 8008468:	6360      	str	r0, [r4, #52]	; 0x34
 800846a:	e7c1      	b.n	80083f0 <__sflush_r+0x1c>
 800846c:	6a21      	ldr	r1, [r4, #32]
 800846e:	2301      	movs	r3, #1
 8008470:	4628      	mov	r0, r5
 8008472:	47b0      	blx	r6
 8008474:	1c41      	adds	r1, r0, #1
 8008476:	d1c7      	bne.n	8008408 <__sflush_r+0x34>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0c4      	beq.n	8008408 <__sflush_r+0x34>
 800847e:	2b1d      	cmp	r3, #29
 8008480:	d001      	beq.n	8008486 <__sflush_r+0xb2>
 8008482:	2b16      	cmp	r3, #22
 8008484:	d101      	bne.n	800848a <__sflush_r+0xb6>
 8008486:	602f      	str	r7, [r5, #0]
 8008488:	e7b1      	b.n	80083ee <__sflush_r+0x1a>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008490:	81a3      	strh	r3, [r4, #12]
 8008492:	e7ad      	b.n	80083f0 <__sflush_r+0x1c>
 8008494:	690f      	ldr	r7, [r1, #16]
 8008496:	2f00      	cmp	r7, #0
 8008498:	d0a9      	beq.n	80083ee <__sflush_r+0x1a>
 800849a:	0793      	lsls	r3, r2, #30
 800849c:	680e      	ldr	r6, [r1, #0]
 800849e:	bf08      	it	eq
 80084a0:	694b      	ldreq	r3, [r1, #20]
 80084a2:	600f      	str	r7, [r1, #0]
 80084a4:	bf18      	it	ne
 80084a6:	2300      	movne	r3, #0
 80084a8:	eba6 0807 	sub.w	r8, r6, r7
 80084ac:	608b      	str	r3, [r1, #8]
 80084ae:	f1b8 0f00 	cmp.w	r8, #0
 80084b2:	dd9c      	ble.n	80083ee <__sflush_r+0x1a>
 80084b4:	6a21      	ldr	r1, [r4, #32]
 80084b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084b8:	4643      	mov	r3, r8
 80084ba:	463a      	mov	r2, r7
 80084bc:	4628      	mov	r0, r5
 80084be:	47b0      	blx	r6
 80084c0:	2800      	cmp	r0, #0
 80084c2:	dc06      	bgt.n	80084d2 <__sflush_r+0xfe>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e78e      	b.n	80083f0 <__sflush_r+0x1c>
 80084d2:	4407      	add	r7, r0
 80084d4:	eba8 0800 	sub.w	r8, r8, r0
 80084d8:	e7e9      	b.n	80084ae <__sflush_r+0xda>
 80084da:	bf00      	nop
 80084dc:	20400001 	.word	0x20400001

080084e0 <_fflush_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	690b      	ldr	r3, [r1, #16]
 80084e4:	4605      	mov	r5, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	b913      	cbnz	r3, 80084f0 <_fflush_r+0x10>
 80084ea:	2500      	movs	r5, #0
 80084ec:	4628      	mov	r0, r5
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	b118      	cbz	r0, 80084fa <_fflush_r+0x1a>
 80084f2:	6983      	ldr	r3, [r0, #24]
 80084f4:	b90b      	cbnz	r3, 80084fa <_fflush_r+0x1a>
 80084f6:	f7fe fa59 	bl	80069ac <__sinit>
 80084fa:	4b14      	ldr	r3, [pc, #80]	; (800854c <_fflush_r+0x6c>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d11b      	bne.n	8008538 <_fflush_r+0x58>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0ef      	beq.n	80084ea <_fflush_r+0xa>
 800850a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800850c:	07d0      	lsls	r0, r2, #31
 800850e:	d404      	bmi.n	800851a <_fflush_r+0x3a>
 8008510:	0599      	lsls	r1, r3, #22
 8008512:	d402      	bmi.n	800851a <_fflush_r+0x3a>
 8008514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008516:	f7fe fe5a 	bl	80071ce <__retarget_lock_acquire_recursive>
 800851a:	4628      	mov	r0, r5
 800851c:	4621      	mov	r1, r4
 800851e:	f7ff ff59 	bl	80083d4 <__sflush_r>
 8008522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008524:	07da      	lsls	r2, r3, #31
 8008526:	4605      	mov	r5, r0
 8008528:	d4e0      	bmi.n	80084ec <_fflush_r+0xc>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	059b      	lsls	r3, r3, #22
 800852e:	d4dd      	bmi.n	80084ec <_fflush_r+0xc>
 8008530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008532:	f7fe fe4d 	bl	80071d0 <__retarget_lock_release_recursive>
 8008536:	e7d9      	b.n	80084ec <_fflush_r+0xc>
 8008538:	4b05      	ldr	r3, [pc, #20]	; (8008550 <_fflush_r+0x70>)
 800853a:	429c      	cmp	r4, r3
 800853c:	d101      	bne.n	8008542 <_fflush_r+0x62>
 800853e:	68ac      	ldr	r4, [r5, #8]
 8008540:	e7df      	b.n	8008502 <_fflush_r+0x22>
 8008542:	4b04      	ldr	r3, [pc, #16]	; (8008554 <_fflush_r+0x74>)
 8008544:	429c      	cmp	r4, r3
 8008546:	bf08      	it	eq
 8008548:	68ec      	ldreq	r4, [r5, #12]
 800854a:	e7da      	b.n	8008502 <_fflush_r+0x22>
 800854c:	08008a30 	.word	0x08008a30
 8008550:	08008a50 	.word	0x08008a50
 8008554:	08008a10 	.word	0x08008a10

08008558 <fiprintf>:
 8008558:	b40e      	push	{r1, r2, r3}
 800855a:	b503      	push	{r0, r1, lr}
 800855c:	4601      	mov	r1, r0
 800855e:	ab03      	add	r3, sp, #12
 8008560:	4805      	ldr	r0, [pc, #20]	; (8008578 <fiprintf+0x20>)
 8008562:	f853 2b04 	ldr.w	r2, [r3], #4
 8008566:	6800      	ldr	r0, [r0, #0]
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	f7ff fc3d 	bl	8007de8 <_vfiprintf_r>
 800856e:	b002      	add	sp, #8
 8008570:	f85d eb04 	ldr.w	lr, [sp], #4
 8008574:	b003      	add	sp, #12
 8008576:	4770      	bx	lr
 8008578:	2000000c 	.word	0x2000000c

0800857c <_lseek_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d07      	ldr	r5, [pc, #28]	; (800859c <_lseek_r+0x20>)
 8008580:	4604      	mov	r4, r0
 8008582:	4608      	mov	r0, r1
 8008584:	4611      	mov	r1, r2
 8008586:	2200      	movs	r2, #0
 8008588:	602a      	str	r2, [r5, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f7f9 f974 	bl	8001878 <_lseek>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_lseek_r+0x1e>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_lseek_r+0x1e>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000318 	.word	0x20000318

080085a0 <__swhatbuf_r>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	460e      	mov	r6, r1
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	2900      	cmp	r1, #0
 80085aa:	b096      	sub	sp, #88	; 0x58
 80085ac:	4614      	mov	r4, r2
 80085ae:	461d      	mov	r5, r3
 80085b0:	da08      	bge.n	80085c4 <__swhatbuf_r+0x24>
 80085b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	602a      	str	r2, [r5, #0]
 80085ba:	061a      	lsls	r2, r3, #24
 80085bc:	d410      	bmi.n	80085e0 <__swhatbuf_r+0x40>
 80085be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c2:	e00e      	b.n	80085e2 <__swhatbuf_r+0x42>
 80085c4:	466a      	mov	r2, sp
 80085c6:	f000 f877 	bl	80086b8 <_fstat_r>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	dbf1      	blt.n	80085b2 <__swhatbuf_r+0x12>
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085d8:	425a      	negs	r2, r3
 80085da:	415a      	adcs	r2, r3
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	e7ee      	b.n	80085be <__swhatbuf_r+0x1e>
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	2000      	movs	r0, #0
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	b016      	add	sp, #88	; 0x58
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080085ec <__smakebuf_r>:
 80085ec:	898b      	ldrh	r3, [r1, #12]
 80085ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085f0:	079d      	lsls	r5, r3, #30
 80085f2:	4606      	mov	r6, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	d507      	bpl.n	8008608 <__smakebuf_r+0x1c>
 80085f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	2301      	movs	r3, #1
 8008602:	6163      	str	r3, [r4, #20]
 8008604:	b002      	add	sp, #8
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	ab01      	add	r3, sp, #4
 800860a:	466a      	mov	r2, sp
 800860c:	f7ff ffc8 	bl	80085a0 <__swhatbuf_r>
 8008610:	9900      	ldr	r1, [sp, #0]
 8008612:	4605      	mov	r5, r0
 8008614:	4630      	mov	r0, r6
 8008616:	f7ff fb49 	bl	8007cac <_malloc_r>
 800861a:	b948      	cbnz	r0, 8008630 <__smakebuf_r+0x44>
 800861c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008620:	059a      	lsls	r2, r3, #22
 8008622:	d4ef      	bmi.n	8008604 <__smakebuf_r+0x18>
 8008624:	f023 0303 	bic.w	r3, r3, #3
 8008628:	f043 0302 	orr.w	r3, r3, #2
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	e7e3      	b.n	80085f8 <__smakebuf_r+0xc>
 8008630:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <__smakebuf_r+0x7c>)
 8008632:	62b3      	str	r3, [r6, #40]	; 0x28
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	9b00      	ldr	r3, [sp, #0]
 8008640:	6163      	str	r3, [r4, #20]
 8008642:	9b01      	ldr	r3, [sp, #4]
 8008644:	6120      	str	r0, [r4, #16]
 8008646:	b15b      	cbz	r3, 8008660 <__smakebuf_r+0x74>
 8008648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864c:	4630      	mov	r0, r6
 800864e:	f000 f845 	bl	80086dc <_isatty_r>
 8008652:	b128      	cbz	r0, 8008660 <__smakebuf_r+0x74>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	89a0      	ldrh	r0, [r4, #12]
 8008662:	4305      	orrs	r5, r0
 8008664:	81a5      	strh	r5, [r4, #12]
 8008666:	e7cd      	b.n	8008604 <__smakebuf_r+0x18>
 8008668:	08006945 	.word	0x08006945

0800866c <__malloc_lock>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__malloc_lock+0x8>)
 800866e:	f7fe bdae 	b.w	80071ce <__retarget_lock_acquire_recursive>
 8008672:	bf00      	nop
 8008674:	2000030c 	.word	0x2000030c

08008678 <__malloc_unlock>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__malloc_unlock+0x8>)
 800867a:	f7fe bda9 	b.w	80071d0 <__retarget_lock_release_recursive>
 800867e:	bf00      	nop
 8008680:	2000030c 	.word	0x2000030c

08008684 <_read_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4d07      	ldr	r5, [pc, #28]	; (80086a4 <_read_r+0x20>)
 8008688:	4604      	mov	r4, r0
 800868a:	4608      	mov	r0, r1
 800868c:	4611      	mov	r1, r2
 800868e:	2200      	movs	r2, #0
 8008690:	602a      	str	r2, [r5, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	f7f9 f890 	bl	80017b8 <_read>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_read_r+0x1e>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_read_r+0x1e>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20000318 	.word	0x20000318

080086a8 <abort>:
 80086a8:	b508      	push	{r3, lr}
 80086aa:	2006      	movs	r0, #6
 80086ac:	f000 f84e 	bl	800874c <raise>
 80086b0:	2001      	movs	r0, #1
 80086b2:	f7f9 f877 	bl	80017a4 <_exit>
	...

080086b8 <_fstat_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d07      	ldr	r5, [pc, #28]	; (80086d8 <_fstat_r+0x20>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7f9 f8bc 	bl	8001842 <_fstat>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_fstat_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_fstat_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	20000318 	.word	0x20000318

080086dc <_isatty_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d06      	ldr	r5, [pc, #24]	; (80086f8 <_isatty_r+0x1c>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7f9 f8bb 	bl	8001862 <_isatty>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_isatty_r+0x1a>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_isatty_r+0x1a>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	20000318 	.word	0x20000318

080086fc <_raise_r>:
 80086fc:	291f      	cmp	r1, #31
 80086fe:	b538      	push	{r3, r4, r5, lr}
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	d904      	bls.n	8008710 <_raise_r+0x14>
 8008706:	2316      	movs	r3, #22
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008712:	b112      	cbz	r2, 800871a <_raise_r+0x1e>
 8008714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008718:	b94b      	cbnz	r3, 800872e <_raise_r+0x32>
 800871a:	4620      	mov	r0, r4
 800871c:	f000 f830 	bl	8008780 <_getpid_r>
 8008720:	462a      	mov	r2, r5
 8008722:	4601      	mov	r1, r0
 8008724:	4620      	mov	r0, r4
 8008726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800872a:	f000 b817 	b.w	800875c <_kill_r>
 800872e:	2b01      	cmp	r3, #1
 8008730:	d00a      	beq.n	8008748 <_raise_r+0x4c>
 8008732:	1c59      	adds	r1, r3, #1
 8008734:	d103      	bne.n	800873e <_raise_r+0x42>
 8008736:	2316      	movs	r3, #22
 8008738:	6003      	str	r3, [r0, #0]
 800873a:	2001      	movs	r0, #1
 800873c:	e7e7      	b.n	800870e <_raise_r+0x12>
 800873e:	2400      	movs	r4, #0
 8008740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008744:	4628      	mov	r0, r5
 8008746:	4798      	blx	r3
 8008748:	2000      	movs	r0, #0
 800874a:	e7e0      	b.n	800870e <_raise_r+0x12>

0800874c <raise>:
 800874c:	4b02      	ldr	r3, [pc, #8]	; (8008758 <raise+0xc>)
 800874e:	4601      	mov	r1, r0
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	f7ff bfd3 	b.w	80086fc <_raise_r>
 8008756:	bf00      	nop
 8008758:	2000000c 	.word	0x2000000c

0800875c <_kill_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d07      	ldr	r5, [pc, #28]	; (800877c <_kill_r+0x20>)
 8008760:	2300      	movs	r3, #0
 8008762:	4604      	mov	r4, r0
 8008764:	4608      	mov	r0, r1
 8008766:	4611      	mov	r1, r2
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	f7f9 f80b 	bl	8001784 <_kill>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	d102      	bne.n	8008778 <_kill_r+0x1c>
 8008772:	682b      	ldr	r3, [r5, #0]
 8008774:	b103      	cbz	r3, 8008778 <_kill_r+0x1c>
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	bf00      	nop
 800877c:	20000318 	.word	0x20000318

08008780 <_getpid_r>:
 8008780:	f7f8 bff8 	b.w	8001774 <_getpid>

08008784 <_init>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	bf00      	nop
 8008788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878a:	bc08      	pop	{r3}
 800878c:	469e      	mov	lr, r3
 800878e:	4770      	bx	lr

08008790 <_fini>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr
